/*!
*  filename: ej2-angular-notifications.umd.js.map
*  version : 17.3.27
*  Copyright Syncfusion Inc. 2001 - 2018. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
*/

{"version":3,"file":"ej2-angular-notifications.umd.js","sources":["~/@syncfusion/ej2-angular-notifications/src/toast/toast-all.module.ts","~/@syncfusion/ej2-angular-notifications/src/toast/toast.module.ts","~/@syncfusion/ej2-angular-notifications/src/toast/toast.component.ts","~/@syncfusion/ej2-angular-notifications/src/toast/buttons.directive.ts"],"sourcesContent":["import { NgModule, ValueProvider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ButtonModelPropDirective, ButtonModelPropsDirective } from './buttons.directive';\nimport { ToastComponent } from './toast.component';\nimport { ToastModule } from './toast.module';\n/**\n * NgModule definition for the Toast component with providers.\n */\nexport class ToastAllModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule, ToastModule],\n    exports: [\n        ToastModule\n    ],\n    providers:[\n        \n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ToastAllModule_tsickle_Closure_declarations() {\n/** @type {?} */\nToastAllModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nToastAllModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ButtonModelPropDirective, ButtonModelPropsDirective } from './buttons.directive';\nimport { ToastComponent } from './toast.component';\n/**\n * NgModule definition for the Toast component.\n */\nexport class ToastModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule],\n    declarations: [\n        ToastComponent,\n        ButtonModelPropDirective,\n        ButtonModelPropsDirective\n    ],\n    exports: [\n        ToastComponent,\n        ButtonModelPropDirective,\n        ButtonModelPropsDirective\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ToastModule_tsickle_Closure_declarations() {\n/** @type {?} */\nToastModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nToastModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ElementRef, ViewContainerRef, Renderer2, Injector, ChangeDetectionStrategy, ValueProvider, ContentChild } from '@angular/core';\nimport { ComponentBase, ComponentMixins, IComponentBase, applyMixins, PropertyCollectionInfo, setValue } from '@syncfusion/ej2-angular-base';\nimport { Toast } from '@syncfusion/ej2-notifications';\nimport { Template } from '@syncfusion/ej2-angular-base';\nimport { ButtonModelPropsDirective } from './buttons.directive';\n\nexport const /** @type {?} */ inputs: string[] = ['animation','buttons','content','cssClass','enablePersistence','enableRtl','extendedTimeout','height','icon','locale','newestOnTop','position','showCloseButton','showProgressBar','target','template','timeOut','title','width'];\nexport const /** @type {?} */ outputs: string[] = ['beforeOpen','click','close','created','destroyed','open'];\nexport const /** @type {?} */ twoWays: string[] = [''];\n/**\n * Represents the Angular Toast Component\n * ```html\n * <ejs-toast></ejs-toast>\n * ```\n */\n@ComponentMixins([ComponentBase])\nexport class ToastComponent extends Toast implements IComponentBase {\npublic childButtons: any;\npublic tags: string[] = ['buttons'];\n/**\n * Specifies the title to be displayed on the Toast. \n * Works only with string values.\n */\n@Template()\n    public title: any;\n/**\n * Specifies the content to be displayed on the Toast. \n * Accepts selectors, string values and HTML elements.\n */\n@Template()\n    public content: any;\n/**\n * Specifies the HTML element/element ID as a string that can be displayed as a Toast. \n * The given template is taken as preference to render the Toast, even if the built-in properties such as title and content are defined.\n */\n@Template()\n    public template: any;\n/**\n * @param {?} ngEle\n * @param {?} srenderer\n * @param {?} viewContainerRef\n * @param {?} injector\n */\nconstructor(private ngEle: ElementRef,\nprivate srenderer: Renderer2,\nprivate viewContainerRef:ViewContainerRef,\nprivate injector: Injector) {\n        super();\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n\n        this.registerEvents(outputs);\n        this.addTwoWay.call(this, twoWays);\n        setValue('currentInstance', this, this.viewContainerRef);\n    }\n/**\n * @return {?}\n */\npublic ngOnInit() {\n    }\n/**\n * @return {?}\n */\npublic ngAfterViewInit(): void {\n    }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\n    }\n/**\n * @return {?}\n */\npublic ngAfterContentChecked(): void {\n    }\npublic registerEvents: (eventList: string[]) => void;\npublic addTwoWay: (propList: string[]) => void;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'ejs-toast',\n    inputs: inputs,\n    outputs: outputs,\n    template: `<ng-content ></ng-content>`,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    queries: {\n        childButtons: new ContentChild(ButtonModelPropsDirective)\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ViewContainerRef, },\n{type: Injector, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'title': [{ type: ContentChild, args: ['title', ] },],\n'content': [{ type: ContentChild, args: ['content', ] },],\n'template': [{ type: ContentChild, args: ['template', ] },],\n};\n}\n\nfunction ToastComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nToastComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nToastComponent.ctorParameters;\n/** @type {?} */\nToastComponent.propDecorators;\n/** @type {?} */\nToastComponent.prototype.childButtons;\n/** @type {?} */\nToastComponent.prototype.tags;\n/**\n * Specifies the title to be displayed on the Toast. \n * Works only with string values.\n * @type {?}\n */\nToastComponent.prototype.title;\n/**\n * Specifies the content to be displayed on the Toast. \n * Accepts selectors, string values and HTML elements.\n * @type {?}\n */\nToastComponent.prototype.content;\n/**\n * Specifies the HTML element/element ID as a string that can be displayed as a Toast. \n * The given template is taken as preference to render the Toast, even if the built-in properties such as title and content are defined.\n * @type {?}\n */\nToastComponent.prototype.template;\n/** @type {?} */\nToastComponent.prototype.registerEvents;\n/** @type {?} */\nToastComponent.prototype.addTwoWay;\n/** @type {?} */\nToastComponent.prototype.ngEle;\n/** @type {?} */\nToastComponent.prototype.srenderer;\n/** @type {?} */\nToastComponent.prototype.viewContainerRef;\n/** @type {?} */\nToastComponent.prototype.injector;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['model'];\nlet /** @type {?} */ outputs: string[] = ['click'];\n/**\n * 'e-button' directive represent a button of angular toast \n * It must be contained in a Toast component(`ejs-toast`). \n * ```html\n * <ejs-toast id='toast' showCloseIcon=true> \n *   <e-buttons>\n *    <e-button content='Ok' isPrimary=true></e-button>\n *    <e-button content='Cancel'></e-button>\n *   </e-buttons>\n * </ejs-toast>\n * ```\n */\nexport class ButtonModelPropDirective extends ComplexBase<ButtonModelPropDirective> {\n/**\n * Specifies the Button component model properties to render the Toast action buttons. \n * \n */\npublic model: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-buttonmodelprops>e-buttonmodelprop',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction ButtonModelPropDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nButtonModelPropDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nButtonModelPropDirective.ctorParameters;\n/**\n * Specifies the Button component model properties to render the Toast action buttons. \n * \n * @type {?}\n */\nButtonModelPropDirective.prototype.model;\n/** @type {?} */\nButtonModelPropDirective.prototype.viewContainerRef;\n}\n\n/**\n * ButtonModelProp Array Directive\n */\nexport class ButtonModelPropsDirective extends ArrayBase<ButtonModelPropsDirective> {\nconstructor() {\n        super('buttons');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-toast>e-buttonmodelprops',\n    queries: {\n        children: new ContentChildren(ButtonModelPropDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ButtonModelPropsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nButtonModelPropsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nButtonModelPropsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["CommonModule","NgModule","ToastComponent","Injector","ViewContainerRef","Renderer2","ElementRef","ComponentMixins","ComponentBase","Template","ContentChild","ChangeDetectionStrategy","outputs","Component","Toast","setValue","ContentChildren","Directive","ArrayBase","ComplexBase"],"mappings":"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"}
