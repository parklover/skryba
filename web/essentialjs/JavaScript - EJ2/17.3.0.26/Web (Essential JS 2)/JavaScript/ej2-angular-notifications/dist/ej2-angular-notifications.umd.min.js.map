/*!
*  filename: ej2-angular-notifications.umd.min.js.map
*  version : 17.3.27
*  Copyright Syncfusion Inc. 2001 - 2018. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
*/

{"version":3,"file":"ej2-angular-notifications.umd.min.js","sources":["~/@syncfusion/ej2-angular-notifications/src/toast/buttons.directive.ts","~/@syncfusion/ej2-angular-notifications/src/toast/toast.component.ts","~/@syncfusion/ej2-angular-notifications/src/toast/toast.module.ts","~/@syncfusion/ej2-angular-notifications/src/toast/toast-all.module.ts"],"sourcesContent":["import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['model'];\nlet /** @type {?} */ outputs: string[] = ['click'];\n/**\n * 'e-button' directive represent a button of angular toast \n * It must be contained in a Toast component(`ejs-toast`). \n * ```html\n * <ejs-toast id='toast' showCloseIcon=true> \n *   <e-buttons>\n *    <e-button content='Ok' isPrimary=true></e-button>\n *    <e-button content='Cancel'></e-button>\n *   </e-buttons>\n * </ejs-toast>\n * ```\n */\nexport class ButtonModelPropDirective extends ComplexBase<ButtonModelPropDirective> {\n/**\n * Specifies the Button component model properties to render the Toast action buttons. \n * \n */\npublic model: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-buttonmodelprops>e-buttonmodelprop',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction ButtonModelPropDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nButtonModelPropDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nButtonModelPropDirective.ctorParameters;\n/**\n * Specifies the Button component model properties to render the Toast action buttons. \n * \n * @type {?}\n */\nButtonModelPropDirective.prototype.model;\n/** @type {?} */\nButtonModelPropDirective.prototype.viewContainerRef;\n}\n\n/**\n * ButtonModelProp Array Directive\n */\nexport class ButtonModelPropsDirective extends ArrayBase<ButtonModelPropsDirective> {\nconstructor() {\n        super('buttons');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-toast>e-buttonmodelprops',\n    queries: {\n        children: new ContentChildren(ButtonModelPropDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ButtonModelPropsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nButtonModelPropsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nButtonModelPropsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ElementRef, ViewContainerRef, Renderer2, Injector, ChangeDetectionStrategy, ValueProvider, ContentChild } from '@angular/core';\nimport { ComponentBase, ComponentMixins, IComponentBase, applyMixins, PropertyCollectionInfo, setValue } from '@syncfusion/ej2-angular-base';\nimport { Toast } from '@syncfusion/ej2-notifications';\nimport { Template } from '@syncfusion/ej2-angular-base';\nimport { ButtonModelPropsDirective } from './buttons.directive';\n\nexport const /** @type {?} */ inputs: string[] = ['animation','buttons','content','cssClass','enablePersistence','enableRtl','extendedTimeout','height','icon','locale','newestOnTop','position','showCloseButton','showProgressBar','target','template','timeOut','title','width'];\nexport const /** @type {?} */ outputs: string[] = ['beforeOpen','click','close','created','destroyed','open'];\nexport const /** @type {?} */ twoWays: string[] = [''];\n/**\n * Represents the Angular Toast Component\n * ```html\n * <ejs-toast></ejs-toast>\n * ```\n */\n@ComponentMixins([ComponentBase])\nexport class ToastComponent extends Toast implements IComponentBase {\npublic childButtons: any;\npublic tags: string[] = ['buttons'];\n/**\n * Specifies the title to be displayed on the Toast. \n * Works only with string values.\n */\n@Template()\n    public title: any;\n/**\n * Specifies the content to be displayed on the Toast. \n * Accepts selectors, string values and HTML elements.\n */\n@Template()\n    public content: any;\n/**\n * Specifies the HTML element/element ID as a string that can be displayed as a Toast. \n * The given template is taken as preference to render the Toast, even if the built-in properties such as title and content are defined.\n */\n@Template()\n    public template: any;\n/**\n * @param {?} ngEle\n * @param {?} srenderer\n * @param {?} viewContainerRef\n * @param {?} injector\n */\nconstructor(private ngEle: ElementRef,\nprivate srenderer: Renderer2,\nprivate viewContainerRef:ViewContainerRef,\nprivate injector: Injector) {\n        super();\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n\n        this.registerEvents(outputs);\n        this.addTwoWay.call(this, twoWays);\n        setValue('currentInstance', this, this.viewContainerRef);\n    }\n/**\n * @return {?}\n */\npublic ngOnInit() {\n    }\n/**\n * @return {?}\n */\npublic ngAfterViewInit(): void {\n    }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\n    }\n/**\n * @return {?}\n */\npublic ngAfterContentChecked(): void {\n    }\npublic registerEvents: (eventList: string[]) => void;\npublic addTwoWay: (propList: string[]) => void;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'ejs-toast',\n    inputs: inputs,\n    outputs: outputs,\n    template: `<ng-content ></ng-content>`,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    queries: {\n        childButtons: new ContentChild(ButtonModelPropsDirective)\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ViewContainerRef, },\n{type: Injector, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'title': [{ type: ContentChild, args: ['title', ] },],\n'content': [{ type: ContentChild, args: ['content', ] },],\n'template': [{ type: ContentChild, args: ['template', ] },],\n};\n}\n\nfunction ToastComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nToastComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nToastComponent.ctorParameters;\n/** @type {?} */\nToastComponent.propDecorators;\n/** @type {?} */\nToastComponent.prototype.childButtons;\n/** @type {?} */\nToastComponent.prototype.tags;\n/**\n * Specifies the title to be displayed on the Toast. \n * Works only with string values.\n * @type {?}\n */\nToastComponent.prototype.title;\n/**\n * Specifies the content to be displayed on the Toast. \n * Accepts selectors, string values and HTML elements.\n * @type {?}\n */\nToastComponent.prototype.content;\n/**\n * Specifies the HTML element/element ID as a string that can be displayed as a Toast. \n * The given template is taken as preference to render the Toast, even if the built-in properties such as title and content are defined.\n * @type {?}\n */\nToastComponent.prototype.template;\n/** @type {?} */\nToastComponent.prototype.registerEvents;\n/** @type {?} */\nToastComponent.prototype.addTwoWay;\n/** @type {?} */\nToastComponent.prototype.ngEle;\n/** @type {?} */\nToastComponent.prototype.srenderer;\n/** @type {?} */\nToastComponent.prototype.viewContainerRef;\n/** @type {?} */\nToastComponent.prototype.injector;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ButtonModelPropDirective, ButtonModelPropsDirective } from './buttons.directive';\nimport { ToastComponent } from './toast.component';\n/**\n * NgModule definition for the Toast component.\n */\nexport class ToastModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule],\n    declarations: [\n        ToastComponent,\n        ButtonModelPropDirective,\n        ButtonModelPropsDirective\n    ],\n    exports: [\n        ToastComponent,\n        ButtonModelPropDirective,\n        ButtonModelPropsDirective\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ToastModule_tsickle_Closure_declarations() {\n/** @type {?} */\nToastModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nToastModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ValueProvider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ButtonModelPropDirective, ButtonModelPropsDirective } from './buttons.directive';\nimport { ToastComponent } from './toast.component';\nimport { ToastModule } from './toast.module';\n/**\n * NgModule definition for the Toast component with providers.\n */\nexport class ToastAllModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule, ToastModule],\n    exports: [\n        ToastModule\n    ],\n    providers:[\n        \n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ToastAllModule_tsickle_Closure_declarations() {\n/** @type {?} */\nToastAllModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nToastAllModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["outputs","ButtonModelPropDirective","_super","viewContainerRef","_this","call","this","setValue","registerEvents","__extends","ComplexBase","decorators","type","Directive","args","selector","inputs","queries","ctorParameters","ViewContainerRef","ButtonModelPropsDirective","ArrayBase","children","ContentChildren","twoWays","exports","ToastComponent","ngEle","srenderer","injector","tags","element","nativeElement","injectedModules","addTwoWay","prototype","ngOnInit","ngAfterViewInit","ngOnDestroy","ngAfterContentChecked","Toast","Component","template","changeDetection","ChangeDetectionStrategy","OnPush","childButtons","ContentChild","ElementRef","Renderer2","Injector","propDecorators","title","content","__decorate","Template","ComponentMixins","ComponentBase","__metadata","ToastModule","NgModule","imports","CommonModule","declarations","ToastAllModule","providers"],"mappings":"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"}
