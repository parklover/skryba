/*!
*  filename: ej2-angular-querybuilder.umd.min.js.map
*  version : 17.3.27
*  Copyright Syncfusion Inc. 2001 - 2018. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
*/

{"version":3,"file":"ej2-angular-querybuilder.umd.min.js","sources":["~/@syncfusion/ej2-angular-querybuilder/src/query-builder/columns.directive.ts","~/@syncfusion/ej2-angular-querybuilder/src/query-builder/querybuilder.component.ts","~/@syncfusion/ej2-angular-querybuilder/src/query-builder/querybuilder.module.ts","~/@syncfusion/ej2-angular-querybuilder/src/query-builder/querybuilder-all.module.ts"],"sourcesContent":["import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['category', 'field', 'format', 'label', 'operators', 'step', 'template', 'type', 'validation', 'value', 'values'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * `e-column` directive represent a column of the Angular QueryBuilder. \n * It must be contained in a QueryBuilder component(`ejs-querybuilder`). \n * ```html\n * <ejs-querybuilder [dataSource]='data'> \n *   <e-columns>\n *    <e-column field='ID' label='ID' type='number'></e-column>\n *    <e-column field='Date' label='Date' type='date' format='dd/MM/yyyy'></e-column>\n *   </e-columns>\n * </ejs-querybuilder>\n * ```\n */\nexport class ColumnDirective extends ComplexBase<ColumnDirective> {\n/**\n * Specifies the types in columns field\n */\npublic type: any;\n/**\n * Specifies the category for columns.\n */\npublic category: any;\n/**\n * Specifies the fields in columns.\n */\npublic field: any;\n/**\n * Specifies the date format for columns.\n */\npublic format: any;\n/**\n * Specifies the labels name in columns\n */\npublic label: any;\n/**\n * Specifies the operators in columns.\n */\npublic operators: any;\n/**\n * Specifies the step value(numeric textbox) for columns.\n */\npublic step: any;\n/**\n * Specifies the template for value field such as slider or any other widgets.\n */\npublic template: any;\n/**\n * Specifies the validation for columns (text, number and date).\n */\npublic validation: any;\n/**\n * Specifies the default value for columns.\n */\npublic value: any;\n/**\n * Specifies the values in columns or bind the values from sub controls.\n */\npublic values: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-querybuilder>e-columns>e-column',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction ColumnDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nColumnDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nColumnDirective.ctorParameters;\n/**\n * Specifies the types in columns field\n * @type {?}\n */\nColumnDirective.prototype.type;\n/**\n * Specifies the category for columns.\n * @type {?}\n */\nColumnDirective.prototype.category;\n/**\n * Specifies the fields in columns.\n * @type {?}\n */\nColumnDirective.prototype.field;\n/**\n * Specifies the date format for columns.\n * @type {?}\n */\nColumnDirective.prototype.format;\n/**\n * Specifies the labels name in columns\n * @type {?}\n */\nColumnDirective.prototype.label;\n/**\n * Specifies the operators in columns.\n * @type {?}\n */\nColumnDirective.prototype.operators;\n/**\n * Specifies the step value(numeric textbox) for columns.\n * @type {?}\n */\nColumnDirective.prototype.step;\n/**\n * Specifies the template for value field such as slider or any other widgets.\n * @type {?}\n */\nColumnDirective.prototype.template;\n/**\n * Specifies the validation for columns (text, number and date).\n * @type {?}\n */\nColumnDirective.prototype.validation;\n/**\n * Specifies the default value for columns.\n * @type {?}\n */\nColumnDirective.prototype.value;\n/**\n * Specifies the values in columns or bind the values from sub controls.\n * @type {?}\n */\nColumnDirective.prototype.values;\n/** @type {?} */\nColumnDirective.prototype.viewContainerRef;\n}\n\n/**\n * Column Array Directive\n */\nexport class ColumnsDirective extends ArrayBase<ColumnsDirective> {\nconstructor() {\n        super('columns');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-querybuilder>e-columns',\n    queries: {\n        children: new ContentChildren(ColumnDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ColumnsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nColumnsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nColumnsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ElementRef, ViewContainerRef, ChangeDetectionStrategy, Renderer2, Injector, ValueProvider, ContentChild } from '@angular/core';\nimport { ComponentBase, IComponentBase, applyMixins, ComponentMixins, PropertyCollectionInfo, setValue } from '@syncfusion/ej2-angular-base';\nimport { QueryBuilder } from '@syncfusion/ej2-querybuilder';\n\nimport { ColumnsDirective } from './columns.directive';\n\nexport const /** @type {?} */ inputs: string[] = ['allowValidation','columns','cssClass','dataSource','displayMode','enablePersistence','enableRtl','height','immediateModeDelay','locale','matchCase','maxGroupCount','rule','showButtons','sortDirection','summaryView','width'];\nexport const /** @type {?} */ outputs: string[] = ['beforeChange','change','created','ruleChange'];\nexport const /** @type {?} */ twoWays: string[] = [''];\n/**\n * Represents the EJ2 Angular QueryBuilder Component.\n * ```html\n * <ejs-querybuilder></ejs-querybuilder>\n * ```\n */\n@ComponentMixins([ComponentBase])\nexport class QueryBuilderComponent extends QueryBuilder implements IComponentBase {\npublic childColumns: any;\npublic tags: string[] = ['columns'];\n/**\n * @param {?} ngEle\n * @param {?} srenderer\n * @param {?} viewContainerRef\n * @param {?} injector\n */\nconstructor(private ngEle: ElementRef,\nprivate srenderer: Renderer2,\nprivate viewContainerRef:ViewContainerRef,\nprivate injector: Injector) {\n        super();\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n\n        this.registerEvents(outputs);\n        this.addTwoWay.call(this, twoWays);\n        setValue('currentInstance', this, this.viewContainerRef);\n    }\n/**\n * @return {?}\n */\npublic ngOnInit() {\n    }\n/**\n * @return {?}\n */\npublic ngAfterViewInit(): void {\n    }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\n    }\n/**\n * @return {?}\n */\npublic ngAfterContentChecked(): void {\n    }\npublic registerEvents: (eventList: string[]) => void;\npublic addTwoWay: (propList: string[]) => void;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'ejs-querybuilder',\n    inputs: inputs,\n    outputs: outputs,\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    queries: {\n        childColumns: new ContentChild(ColumnsDirective)\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ViewContainerRef, },\n{type: Injector, },\n];\n}\n\nfunction QueryBuilderComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nQueryBuilderComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nQueryBuilderComponent.ctorParameters;\n/** @type {?} */\nQueryBuilderComponent.prototype.childColumns;\n/** @type {?} */\nQueryBuilderComponent.prototype.tags;\n/** @type {?} */\nQueryBuilderComponent.prototype.registerEvents;\n/** @type {?} */\nQueryBuilderComponent.prototype.addTwoWay;\n/** @type {?} */\nQueryBuilderComponent.prototype.ngEle;\n/** @type {?} */\nQueryBuilderComponent.prototype.srenderer;\n/** @type {?} */\nQueryBuilderComponent.prototype.viewContainerRef;\n/** @type {?} */\nQueryBuilderComponent.prototype.injector;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ColumnDirective, ColumnsDirective } from './columns.directive';\nimport { QueryBuilderComponent } from './querybuilder.component';\n/**\n * NgModule definition for the QueryBuilder component.\n */\nexport class QueryBuilderModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule],\n    declarations: [\n        QueryBuilderComponent,\n        ColumnDirective,\n        ColumnsDirective\n    ],\n    exports: [\n        QueryBuilderComponent,\n        ColumnDirective,\n        ColumnsDirective\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction QueryBuilderModule_tsickle_Closure_declarations() {\n/** @type {?} */\nQueryBuilderModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nQueryBuilderModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ValueProvider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ColumnDirective, ColumnsDirective } from './columns.directive';\nimport { QueryBuilderComponent } from './querybuilder.component';\nimport { QueryBuilderModule } from './querybuilder.module';\n/**\n * NgModule definition for the QueryBuilder component with providers.\n */\nexport class QueryBuilderAllModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule, QueryBuilderModule],\n    exports: [\n        QueryBuilderModule\n    ],\n    providers:[\n        \n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction QueryBuilderAllModule_tsickle_Closure_declarations() {\n/** @type {?} */\nQueryBuilderAllModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nQueryBuilderAllModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["outputs","ColumnDirective","_super","viewContainerRef","_this","call","this","setValue","registerEvents","__extends","ComplexBase","decorators","type","Directive","args","selector","inputs","queries","ctorParameters","ViewContainerRef","ColumnsDirective","ArrayBase","children","ContentChildren","twoWays","exports","QueryBuilderComponent","ngEle","srenderer","injector","tags","element","nativeElement","injectedModules","addTwoWay","prototype","ngOnInit","ngAfterViewInit","ngOnDestroy","ngAfterContentChecked","QueryBuilder","Component","template","changeDetection","ChangeDetectionStrategy","OnPush","childColumns","ContentChild","ElementRef","Renderer2","Injector","__decorate","ComponentMixins","ComponentBase","__metadata","QueryBuilderModule","NgModule","imports","CommonModule","declarations","QueryBuilderAllModule","providers"],"mappings":"6zBAMIA,KAaJC,EAAA,SAAAC,GAgDA,SAAAD,EAYwBE,GAZxB,IAAAC,EACQF,EADRG,KAAAC,OAAAA,YAYwBF,EAAxBD,iBAAwBA,EAVhBI,EAAAA,SAAS,kBAAmBH,EAAMA,EAAKD,kBACvCC,EAAKI,eAAeR,YAlD3BS,EAADR,EAAAC,KADA,CACCQ,EAAAA,aAgEMT,EAAPU,aACEC,KAAMC,EAAAA,UAAWC,OAXfC,SAYU,sCAXVC,QAtEkB,WAAa,QAAS,SAAU,QAAS,YAAa,OAAQ,WAAY,OAAQ,aAAc,QAAS,UAuE3HhB,QAYSA,EAXTiB,eAkBHhB,EAADiB,eAAC,WAAA,QATAN,KAAMO,EAAAA,oBA0EP,IAAAC,EAAA,SAAAlB,GACA,SAAAkB,IACA,OAAQlB,EAARG,KAAAC,KAAc,YAAdA,YAzDCG,EAADW,EAAAlB,KAuDA,CAvDCmB,EAAAA,WAIMD,EAAPT,aACEC,KAAMC,EAAAA,UAAWC,OAwDfC,SAvDU,6BAwDVE,SACIK,SAvDU,IAAIC,EAAAA,gBAAgBtB,QAKrCmB,EAADF,eAAC,WAAA,ifChHYF,GAAmB,kBAAmB,UAAU,WAAW,aAAa,cAAc,oBAAoB,YAAY,SAAS,qBAAqB,SAAS,YAAY,gBAAgB,OAAO,cAAc,gBAAgB,cAAc,SAC5OhB,GAAoB,eAAgB,SAAS,UAAU,cACvDwB,GAAoB,IAQjCC,EAAAC,sBAAA,SAAAxB,GASA,SAAAwB,EAFwBC,EAA2BC,EAA8BzB,EAA2C0B,GAE5H,IAAAzB,EAIQF,EAJRG,KAAAC,OAAAA,YAFwBF,EAAxBuB,MAAwBA,EAA2BvB,EAAnDwB,UAAmDA,EAA8BxB,EAAjFD,iBAAiFA,EAA2CC,EAA5HyB,SAA4HA,EAHjHzB,EAAX0B,MAA4B,WAUpB1B,EAAK2B,QAAU3B,EAAKuB,MAAMK,cAC1B5B,EAAK6B,gBAAkB7B,EAAK6B,oBAE5B7B,EAAKI,eAAeR,GACpBI,EAAK8B,UAAU7B,KAAKD,EAAMoB,GAC1BjB,EAAAA,SAAS,kBAAmBH,EAAMA,EAAKD,oBA6C/C,OAhE2CM,EAA3CiB,EAAAxB,GAiBKwB,EAALS,UAAAC,SAAK,aAGAV,EAALS,UAAAE,gBAAK,aAGAX,EAALS,UAAAG,YAAK,aAGAZ,EAALS,UAAAI,sBAAK,aAsCLb,EAhEkC,CAASc,EAAAA,cA+BpCd,EAAAA,sBAAPf,aACEC,KAAM6B,EAAAA,UAAW3B,OAafC,SAZU,mBAaVC,OAZQA,EAaRhB,QAZSA,EAaT0C,SAZU,GAaVC,gBAZiBC,EAAAA,wBAAwBC,OAG3C5B,SAWM6B,aAZc,IAAIC,EAAAA,aAAa3B,QAKtCM,EAAAA,sBAADR,eAAC,WAAA,QAeAN,KAAMoC,EAAAA,aACNpC,KAAMqC,EAAAA,YACNrC,KAAMO,EAAAA,mBACNP,KAAMsC,EAAAA,YA9DMxB,EAAAA,sBAAbyB,GACCC,EAAAA,iBAAAC,EAAAA,gBAMDC,EAAA,qBAA+BN,EAAAA,WAA+BC,EAAAA,UAAoC9B,EAAAA,iBAAoC+B,EAAAA,YAPzHxB,EAAAA,uBCTb,IAAA6B,EAAA,kBAAA,aAAA,GAEyCA,EAAzC5C,aACEC,KAAM4C,EAAAA,SAAU1C,OADd2C,SAESC,EAAAA,cADTC,cACIjC,EAAAA,sBACAzB,EACAmB,GAEJK,SACIC,EAAAA,sBACAzB,EACAmB,OAOPmC,EAADrC,eAAC,WAAA,UCjBD,IAAA0C,EAAA,kBAAA,aAAA,GAM4CA,EAA5CjD,aACEC,KAAM4C,EAAAA,SAAU1C,OALd2C,SAMSC,EAAAA,aAAeH,GALxB9B,SACI8B,GAEJM,iBAYHD,EAAD1C,eAAC,WAAA"}
