/*!
*  filename: ej2-angular-circulargauge.umd.min.js.map
*  version : 17.3.27
*  Copyright Syncfusion Inc. 2001 - 2018. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
*/

{"version":3,"file":"ej2-angular-circulargauge.umd.min.js","sources":["~/@syncfusion/ej2-angular-circulargauge/src/circular-gauge/annotations.directive.ts","~/@syncfusion/ej2-angular-circulargauge/src/circular-gauge/ranges.directive.ts","~/@syncfusion/ej2-angular-circulargauge/src/circular-gauge/pointers.directive.ts","~/@syncfusion/ej2-angular-circulargauge/src/circular-gauge/axes.directive.ts","~/@syncfusion/ej2-angular-circulargauge/src/circular-gauge/circulargauge.component.ts","~/@syncfusion/ej2-angular-circulargauge/src/circular-gauge/circulargauge.module.ts","~/@syncfusion/ej2-angular-circulargauge/src/circular-gauge/circulargauge-all.module.ts"],"sourcesContent":["import { Directive, ViewContainerRef, ContentChildren, ContentChild } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\nimport { Template } from '@syncfusion/ej2-angular-base';\n\n\nlet /** @type {?} */ input: string[] = ['angle', 'autoAngle', 'content', 'description', 'radius', 'textStyle', 'zIndex'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Annotation directive\n * ```html\n * <e-annotations><e-annotation></e-annotation></e-annotations>\n * ```\n */\nexport class AnnotationDirective extends ComplexBase<AnnotationDirective> {\n/**\n * Angle for annotation with respect to axis.\n */\npublic angle: any;\n/**\n * Rotates the annotation along the axis.\n */\npublic autoAngle: any;\n/**\n * Information about annotation for assistive technology.\n */\npublic description: any;\n/**\n * Radius for annotation with respect to axis.\n */\npublic radius: any;\n/**\n * Options for customizing the annotation text.\n */\npublic textStyle: any;\n/**\n * Order of an annotation in an axis.\n */\npublic zIndex: any;\n/**\n * Content of the annotation, which accepts the id of the custom element.\n */\n@Template()\n    public content: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-annotations>e-annotation',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'content': [{ type: ContentChild, args: ['content', ] },],\n};\n}\n\nfunction AnnotationDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nAnnotationDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAnnotationDirective.ctorParameters;\n/** @type {?} */\nAnnotationDirective.propDecorators;\n/**\n * Angle for annotation with respect to axis.\n * @type {?}\n */\nAnnotationDirective.prototype.angle;\n/**\n * Rotates the annotation along the axis.\n * @type {?}\n */\nAnnotationDirective.prototype.autoAngle;\n/**\n * Information about annotation for assistive technology.\n * @type {?}\n */\nAnnotationDirective.prototype.description;\n/**\n * Radius for annotation with respect to axis.\n * @type {?}\n */\nAnnotationDirective.prototype.radius;\n/**\n * Options for customizing the annotation text.\n * @type {?}\n */\nAnnotationDirective.prototype.textStyle;\n/**\n * Order of an annotation in an axis.\n * @type {?}\n */\nAnnotationDirective.prototype.zIndex;\n/**\n * Content of the annotation, which accepts the id of the custom element.\n * @type {?}\n */\nAnnotationDirective.prototype.content;\n/** @type {?} */\nAnnotationDirective.prototype.viewContainerRef;\n}\n\n/**\n * Annotation Array Directive\n */\nexport class AnnotationsDirective extends ArrayBase<AnnotationsDirective> {\nconstructor() {\n        super('annotations');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ej-circulargauge>e-axes>e-axis>e-annotations',\n    queries: {\n        children: new ContentChildren(AnnotationDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction AnnotationsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nAnnotationsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAnnotationsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['color', 'end', 'endWidth', 'legendText', 'opacity', 'radius', 'roundedCornerRadius', 'start', 'startWidth'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Ranges directive\n * ```html\n * <e-ranges><e-range></e-range></e-ranges>\n * ```\n */\nexport class RangeDirective extends ComplexBase<RangeDirective> {\n/**\n * Specifies the color of the ranges\n */\npublic color: any;\n/**\n * Specifies the maximum value of the range.\n */\npublic end: any;\n/**\n * Specifies the end width of the ranges\n */\npublic endWidth: any;\n/**\n * Specifies the text for legend.\n */\npublic legendText: any;\n/**\n * Specifies the opacity for ranges.\n */\npublic opacity: any;\n/**\n * The radius of the range in pixels or in percentage.\n */\npublic radius: any;\n/**\n * Specifies the rounded corner radius for ranges.\n */\npublic roundedCornerRadius: any;\n/**\n * Specifies the minimum value of the range.\n */\npublic start: any;\n/**\n * Specifies the start width of the ranges\n */\npublic startWidth: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-ranges>e-range',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction RangeDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nRangeDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRangeDirective.ctorParameters;\n/**\n * Specifies the color of the ranges\n * @type {?}\n */\nRangeDirective.prototype.color;\n/**\n * Specifies the maximum value of the range.\n * @type {?}\n */\nRangeDirective.prototype.end;\n/**\n * Specifies the end width of the ranges\n * @type {?}\n */\nRangeDirective.prototype.endWidth;\n/**\n * Specifies the text for legend.\n * @type {?}\n */\nRangeDirective.prototype.legendText;\n/**\n * Specifies the opacity for ranges.\n * @type {?}\n */\nRangeDirective.prototype.opacity;\n/**\n * The radius of the range in pixels or in percentage.\n * @type {?}\n */\nRangeDirective.prototype.radius;\n/**\n * Specifies the rounded corner radius for ranges.\n * @type {?}\n */\nRangeDirective.prototype.roundedCornerRadius;\n/**\n * Specifies the minimum value of the range.\n * @type {?}\n */\nRangeDirective.prototype.start;\n/**\n * Specifies the start width of the ranges\n * @type {?}\n */\nRangeDirective.prototype.startWidth;\n/** @type {?} */\nRangeDirective.prototype.viewContainerRef;\n}\n\n/**\n * Range Array Directive\n */\nexport class RangesDirective extends ArrayBase<RangesDirective> {\nconstructor() {\n        super('ranges');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ej-circulargauge>e-axes>e-axis>e-ranges',\n    queries: {\n        children: new ContentChildren(RangeDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction RangesDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nRangesDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRangesDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['animation', 'border', 'cap', 'color', 'description', 'imageUrl', 'markerHeight', 'markerShape', 'markerWidth', 'needleTail', 'pointerWidth', 'radius', 'roundedCornerRadius', 'type', 'value'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Pointers directive\n * ```html\n * <e-pointers><e-pointer></e-pointer></e-pointers>\n * ```\n */\nexport class PointerDirective extends ComplexBase<PointerDirective> {\n/**\n * Specifies the type of pointer for an axis. \n * * needle -  Renders a needle. \n * * marker - Renders a marker. \n * * rangeBar - Renders a rangeBar.\n */\npublic type: any;\n/**\n * Configures the animation of pointers.\n */\npublic animation: any;\n/**\n * Options for customizing the border of the needle.\n */\npublic border: any;\n/**\n * Options for customizing the cap\n */\npublic cap: any;\n/**\n * The color of the pointer.\n */\npublic color: any;\n/**\n * Information about pointer for assistive technology.\n */\npublic description: any;\n/**\n * The URL for the Image that is to be displayed as pointer. \n * It requires marker shape value to be Image.\n */\npublic imageUrl: any;\n/**\n * The height of the marker in pixels.\n */\npublic markerHeight: any;\n/**\n * Specifies the shape of the marker. They are \n * * circle - Renders a circle. \n * * rectangle - Renders a rectangle. \n * * triangle - Renders a triangle. \n * * diamond - Renders a diamond. \n * * invertedTriangle - Renders a invertedTriangle. \n * * image - Renders a image.\n */\npublic markerShape: any;\n/**\n * The width of the marker in pixels.\n */\npublic markerWidth: any;\n/**\n * Options for customizing the back needle.\n */\npublic needleTail: any;\n/**\n * Width of the pointer in pixels.\n */\npublic pointerWidth: any;\n/**\n * Length of the pointer in pixels or in percentage.\n */\npublic radius: any;\n/**\n * Specifies the rounded corner radius for pointer.\n */\npublic roundedCornerRadius: any;\n/**\n * Specifies the value of the pointer.\n */\npublic value: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-pointers>e-pointer',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction PointerDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nPointerDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPointerDirective.ctorParameters;\n/**\n * Specifies the type of pointer for an axis. \n * * needle -  Renders a needle. \n * * marker - Renders a marker. \n * * rangeBar - Renders a rangeBar.\n * @type {?}\n */\nPointerDirective.prototype.type;\n/**\n * Configures the animation of pointers.\n * @type {?}\n */\nPointerDirective.prototype.animation;\n/**\n * Options for customizing the border of the needle.\n * @type {?}\n */\nPointerDirective.prototype.border;\n/**\n * Options for customizing the cap\n * @type {?}\n */\nPointerDirective.prototype.cap;\n/**\n * The color of the pointer.\n * @type {?}\n */\nPointerDirective.prototype.color;\n/**\n * Information about pointer for assistive technology.\n * @type {?}\n */\nPointerDirective.prototype.description;\n/**\n * The URL for the Image that is to be displayed as pointer. \n * It requires marker shape value to be Image.\n * @type {?}\n */\nPointerDirective.prototype.imageUrl;\n/**\n * The height of the marker in pixels.\n * @type {?}\n */\nPointerDirective.prototype.markerHeight;\n/**\n * Specifies the shape of the marker. They are \n * * circle - Renders a circle. \n * * rectangle - Renders a rectangle. \n * * triangle - Renders a triangle. \n * * diamond - Renders a diamond. \n * * invertedTriangle - Renders a invertedTriangle. \n * * image - Renders a image.\n * @type {?}\n */\nPointerDirective.prototype.markerShape;\n/**\n * The width of the marker in pixels.\n * @type {?}\n */\nPointerDirective.prototype.markerWidth;\n/**\n * Options for customizing the back needle.\n * @type {?}\n */\nPointerDirective.prototype.needleTail;\n/**\n * Width of the pointer in pixels.\n * @type {?}\n */\nPointerDirective.prototype.pointerWidth;\n/**\n * Length of the pointer in pixels or in percentage.\n * @type {?}\n */\nPointerDirective.prototype.radius;\n/**\n * Specifies the rounded corner radius for pointer.\n * @type {?}\n */\nPointerDirective.prototype.roundedCornerRadius;\n/**\n * Specifies the value of the pointer.\n * @type {?}\n */\nPointerDirective.prototype.value;\n/** @type {?} */\nPointerDirective.prototype.viewContainerRef;\n}\n\n/**\n * Pointer Array Directive\n */\nexport class PointersDirective extends ArrayBase<PointersDirective> {\nconstructor() {\n        super('pointers');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ej-circulargauge>e-axes>e-axis>e-pointers',\n    queries: {\n        children: new ContentChildren(PointerDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction PointersDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nPointersDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPointersDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren, ContentChild } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\nimport { AnnotationsDirective } from './annotations.directive';\nimport { RangesDirective } from './ranges.directive';\nimport { PointersDirective } from './pointers.directive';\n\nlet /** @type {?} */ input: string[] = ['annotations', 'background', 'direction', 'endAngle', 'hideIntersectingLabel', 'labelStyle', 'lineStyle', 'majorTicks', 'maximum', 'minimum', 'minorTicks', 'pointers', 'radius', 'rangeGap', 'ranges', 'roundingPlaces', 'showLastLabel', 'startAndEndRangeGap', 'startAngle'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Axes directive\n * ```html\n * <e-axes><e-axis></e-axis></e-axes>\n * ```\n */\nexport class AxisDirective extends ComplexBase<AxisDirective> {\npublic childAnnotations: any;\npublic childRanges: any;\npublic childPointers: any;\npublic tags: string[] = ['annotations', 'ranges', 'pointers'];\n/**\n * ‘Annotation’ module is used to handle annotation action for an axis.\n */\npublic annotations: any;\n/**\n * The background color of the axis, which accepts value in hex, rgba as a valid CSS color string.\n */\npublic background: any;\n/**\n * Specifies the direction of an axis. They are \n * * clockWise -  Renders the axis in clock wise direction. \n * * antiClockWise - Renders the axis in anti-clock wise direction.\n */\npublic direction: any;\n/**\n * The end angle of an axis\n */\npublic endAngle: any;\n/**\n * Specifies to hide the intersecting axis labels\n */\npublic hideIntersectingLabel: any;\n/**\n * Options to customize the axis label.\n */\npublic labelStyle: any;\n/**\n * Options for customizing the axis lines.\n */\npublic lineStyle: any;\n/**\n * Options for customizing the major tick lines.\n */\npublic majorTicks: any;\n/**\n * Specifies the maximum value of an axis.\n */\npublic maximum: any;\n/**\n * Specifies the minimum value of an axis.\n */\npublic minimum: any;\n/**\n * Options for customizing the minor tick lines.\n */\npublic minorTicks: any;\n/**\n * Options for customizing the pointers of an axis\n */\npublic pointers: any;\n/**\n * Radius of an axis in pixels or in percentage.\n */\npublic radius: any;\n/**\n * Specifies the range gap property by pixel value.\n */\npublic rangeGap: any;\n/**\n * Options for customizing the ranges of an axis\n */\npublic ranges: any;\n/**\n * Specifies the rounding Off value in the label\n */\npublic roundingPlaces: any;\n/**\n * Specifies the last label to be shown\n */\npublic showLastLabel: any;\n/**\n * Specifies the start and end range gap.\n */\npublic startAndEndRangeGap: any;\n/**\n * The start angle of an axis\n */\npublic startAngle: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-axes>e-axis',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n        childAnnotations: new ContentChild(AnnotationsDirective), \n        childRanges: new ContentChild(RangesDirective), \n        childPointers: new ContentChild(PointersDirective)\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction AxisDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nAxisDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAxisDirective.ctorParameters;\n/** @type {?} */\nAxisDirective.prototype.childAnnotations;\n/** @type {?} */\nAxisDirective.prototype.childRanges;\n/** @type {?} */\nAxisDirective.prototype.childPointers;\n/** @type {?} */\nAxisDirective.prototype.tags;\n/**\n * ‘Annotation’ module is used to handle annotation action for an axis.\n * @type {?}\n */\nAxisDirective.prototype.annotations;\n/**\n * The background color of the axis, which accepts value in hex, rgba as a valid CSS color string.\n * @type {?}\n */\nAxisDirective.prototype.background;\n/**\n * Specifies the direction of an axis. They are \n * * clockWise -  Renders the axis in clock wise direction. \n * * antiClockWise - Renders the axis in anti-clock wise direction.\n * @type {?}\n */\nAxisDirective.prototype.direction;\n/**\n * The end angle of an axis\n * @type {?}\n */\nAxisDirective.prototype.endAngle;\n/**\n * Specifies to hide the intersecting axis labels\n * @type {?}\n */\nAxisDirective.prototype.hideIntersectingLabel;\n/**\n * Options to customize the axis label.\n * @type {?}\n */\nAxisDirective.prototype.labelStyle;\n/**\n * Options for customizing the axis lines.\n * @type {?}\n */\nAxisDirective.prototype.lineStyle;\n/**\n * Options for customizing the major tick lines.\n * @type {?}\n */\nAxisDirective.prototype.majorTicks;\n/**\n * Specifies the maximum value of an axis.\n * @type {?}\n */\nAxisDirective.prototype.maximum;\n/**\n * Specifies the minimum value of an axis.\n * @type {?}\n */\nAxisDirective.prototype.minimum;\n/**\n * Options for customizing the minor tick lines.\n * @type {?}\n */\nAxisDirective.prototype.minorTicks;\n/**\n * Options for customizing the pointers of an axis\n * @type {?}\n */\nAxisDirective.prototype.pointers;\n/**\n * Radius of an axis in pixels or in percentage.\n * @type {?}\n */\nAxisDirective.prototype.radius;\n/**\n * Specifies the range gap property by pixel value.\n * @type {?}\n */\nAxisDirective.prototype.rangeGap;\n/**\n * Options for customizing the ranges of an axis\n * @type {?}\n */\nAxisDirective.prototype.ranges;\n/**\n * Specifies the rounding Off value in the label\n * @type {?}\n */\nAxisDirective.prototype.roundingPlaces;\n/**\n * Specifies the last label to be shown\n * @type {?}\n */\nAxisDirective.prototype.showLastLabel;\n/**\n * Specifies the start and end range gap.\n * @type {?}\n */\nAxisDirective.prototype.startAndEndRangeGap;\n/**\n * The start angle of an axis\n * @type {?}\n */\nAxisDirective.prototype.startAngle;\n/** @type {?} */\nAxisDirective.prototype.viewContainerRef;\n}\n\n/**\n * Axis Array Directive\n */\nexport class AxesDirective extends ArrayBase<AxesDirective> {\nconstructor() {\n        super('axes');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ej-circulargauge>e-axes',\n    queries: {\n        children: new ContentChildren(AxisDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction AxesDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nAxesDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAxesDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ElementRef, ViewContainerRef, ChangeDetectionStrategy, Renderer2, Injector, ValueProvider, ContentChild } from '@angular/core';\nimport { ComponentBase, IComponentBase, applyMixins, ComponentMixins, PropertyCollectionInfo, setValue } from '@syncfusion/ej2-angular-base';\nimport { CircularGauge } from '@syncfusion/ej2-circulargauge';\nimport { Template } from '@syncfusion/ej2-angular-base';\nimport { AxesDirective } from './axes.directive';\n\nexport const /** @type {?} */ inputs: string[] = ['axes','background','border','centerX','centerY','description','enablePersistence','enablePointerDrag','enableRtl','height','legendSettings','locale','margin','moveToCenter','tabIndex','theme','title','titleStyle','tooltip','useGroupingSeparator','width'];\nexport const /** @type {?} */ outputs: string[] = ['animationComplete','annotationRender','axisLabelRender','dragEnd','dragMove','dragStart','gaugeMouseDown','gaugeMouseLeave','gaugeMouseMove','gaugeMouseUp','legendRender','load','loaded','radiusCalculate','resized','tooltipRender'];\nexport const /** @type {?} */ twoWays: string[] = [''];\n/**\n * Circular Gauge Component\n * ```html\n * <ej-circulargauge></ej-circulargauge>\n * ```\n */\n@ComponentMixins([ComponentBase])\nexport class CircularGaugeComponent extends CircularGauge implements IComponentBase {\npublic childAxes: any;\npublic tags: string[] = ['axes'];\n\n    \n    @Template()\npublic tooltip_template: any;\n/**\n * @param {?} ngEle\n * @param {?} srenderer\n * @param {?} viewContainerRef\n * @param {?} injector\n */\nconstructor(private ngEle: ElementRef,\nprivate srenderer: Renderer2,\nprivate viewContainerRef:ViewContainerRef,\nprivate injector: Injector) {\n        super();\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n        try {\n                let mod = this.injector.get('CircularGaugeGaugeTooltip');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('CircularGaugeAnnotations');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('CircularGaugeLegend');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n\n        this.registerEvents(outputs);\n        this.addTwoWay.call(this, twoWays);\n        setValue('currentInstance', this, this.viewContainerRef);\n    }\n/**\n * @return {?}\n */\npublic ngOnInit() {\n    }\n/**\n * @return {?}\n */\npublic ngAfterViewInit(): void {\n    }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\n    }\n/**\n * @return {?}\n */\npublic ngAfterContentChecked(): void {\n    }\npublic registerEvents: (eventList: string[]) => void;\npublic addTwoWay: (propList: string[]) => void;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'ejs-circulargauge',\n    inputs: inputs,\n    outputs: outputs,\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    queries: {\n        childAxes: new ContentChild(AxesDirective)\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ViewContainerRef, },\n{type: Injector, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'tooltip_template': [{ type: ContentChild, args: ['tooltipTemplate', ] },],\n};\n}\n\nfunction CircularGaugeComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nCircularGaugeComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCircularGaugeComponent.ctorParameters;\n/** @type {?} */\nCircularGaugeComponent.propDecorators;\n/** @type {?} */\nCircularGaugeComponent.prototype.childAxes;\n/** @type {?} */\nCircularGaugeComponent.prototype.tags;\n/** @type {?} */\nCircularGaugeComponent.prototype.tooltip_template;\n/** @type {?} */\nCircularGaugeComponent.prototype.registerEvents;\n/** @type {?} */\nCircularGaugeComponent.prototype.addTwoWay;\n/** @type {?} */\nCircularGaugeComponent.prototype.ngEle;\n/** @type {?} */\nCircularGaugeComponent.prototype.srenderer;\n/** @type {?} */\nCircularGaugeComponent.prototype.viewContainerRef;\n/** @type {?} */\nCircularGaugeComponent.prototype.injector;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AnnotationDirective, AnnotationsDirective } from './annotations.directive';\nimport { RangeDirective, RangesDirective } from './ranges.directive';\nimport { PointerDirective, PointersDirective } from './pointers.directive';\nimport { AxisDirective, AxesDirective } from './axes.directive';\nimport { CircularGaugeComponent } from './circulargauge.component';\n/**\n * NgModule definition for the CircularGauge component.\n */\nexport class CircularGaugeModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule],\n    declarations: [\n        CircularGaugeComponent,\n        AnnotationDirective,\n        AnnotationsDirective,\n        RangeDirective,\n        RangesDirective,\n        PointerDirective,\n        PointersDirective,\n        AxisDirective,\n        AxesDirective\n    ],\n    exports: [\n        CircularGaugeComponent,\n        AnnotationDirective,\n        AnnotationsDirective,\n        RangeDirective,\n        RangesDirective,\n        PointerDirective,\n        PointersDirective,\n        AxisDirective,\n        AxesDirective\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CircularGaugeModule_tsickle_Closure_declarations() {\n/** @type {?} */\nCircularGaugeModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCircularGaugeModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ValueProvider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AnnotationDirective, AnnotationsDirective } from './annotations.directive';\nimport { RangeDirective, RangesDirective } from './ranges.directive';\nimport { PointerDirective, PointersDirective } from './pointers.directive';\nimport { AxisDirective, AxesDirective } from './axes.directive';\nimport { CircularGaugeComponent } from './circulargauge.component';\nimport { CircularGaugeModule } from './circulargauge.module';\nimport {GaugeTooltip, Annotations, Legend} from '@syncfusion/ej2-circulargauge';\n\n\nexport const /** @type {?} */ GaugeTooltipService: ValueProvider = { provide: 'CircularGaugeGaugeTooltip', useValue: GaugeTooltip};\nexport const /** @type {?} */ AnnotationsService: ValueProvider = { provide: 'CircularGaugeAnnotations', useValue: Annotations};\nexport const /** @type {?} */ LegendService: ValueProvider = { provide: 'CircularGaugeLegend', useValue: Legend};\n/**\n * NgModule definition for the CircularGauge component with providers.\n */\nexport class CircularGaugeAllModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule, CircularGaugeModule],\n    exports: [\n        CircularGaugeModule\n    ],\n    providers:[\n        GaugeTooltipService,\n        AnnotationsService,\n        LegendService\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CircularGaugeAllModule_tsickle_Closure_declarations() {\n/** @type {?} */\nCircularGaugeAllModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCircularGaugeAllModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["outputs","AnnotationDirective","_super","viewContainerRef","_this","call","this","setValue","registerEvents","__extends","ComplexBase","decorators","type","Directive","args","selector","inputs","queries","ctorParameters","ViewContainerRef","propDecorators","content","ContentChild","__decorate","Template","prototype","AnnotationsDirective","ArrayBase","children","ContentChildren","RangeDirective","RangesDirective","PointerDirective","PointersDirective","AxisDirective","tags","childAnnotations","childRanges","childPointers","AxesDirective","twoWays","exports","CircularGaugeComponent","ngEle","srenderer","injector","element","nativeElement","injectedModules","mod","get","indexOf","push","_a","_b","_c","addTwoWay","ngOnInit","ngAfterViewInit","ngOnDestroy","ngAfterContentChecked","CircularGauge","Component","template","changeDetection","ChangeDetectionStrategy","OnPush","childAxes","ElementRef","Renderer2","Injector","tooltip_template","ComponentMixins","ComponentBase","__metadata","CircularGaugeModule","NgModule","imports","CommonModule","declarations","GaugeTooltipService","provide","useValue","GaugeTooltip","AnnotationsService","Annotations","LegendService","Legend","CircularGaugeAllModule","providers"],"mappings":"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"}
