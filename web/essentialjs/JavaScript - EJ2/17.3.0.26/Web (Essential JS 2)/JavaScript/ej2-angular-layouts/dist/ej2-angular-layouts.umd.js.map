/*!
*  filename: ej2-angular-layouts.umd.js.map
*  version : 17.3.27
*  Copyright Syncfusion Inc. 2001 - 2018. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
*/

{"version":3,"file":"ej2-angular-layouts.umd.js","sources":["~/@syncfusion/ej2-angular-layouts/src/dashboard-layout/dashboardlayout-all.module.ts","~/@syncfusion/ej2-angular-layouts/src/dashboard-layout/dashboardlayout.module.ts","~/@syncfusion/ej2-angular-layouts/src/dashboard-layout/dashboardlayout.component.ts","~/@syncfusion/ej2-angular-layouts/src/dashboard-layout/panels.directive.ts","~/@syncfusion/ej2-angular-layouts/src/splitter/splitter-all.module.ts","~/@syncfusion/ej2-angular-layouts/src/splitter/splitter.module.ts","~/@syncfusion/ej2-angular-layouts/src/splitter/splitter.component.ts","~/@syncfusion/ej2-angular-layouts/src/splitter/panesettings.directive.ts"],"sourcesContent":["import { NgModule, ValueProvider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PanelDirective, PanelsDirective } from './panels.directive';\nimport { DashboardLayoutComponent } from './dashboardlayout.component';\nimport { DashboardLayoutModule } from './dashboardlayout.module';\n/**\n * NgModule definition for the DashboardLayout component with providers.\n */\nexport class DashboardLayoutAllModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule, DashboardLayoutModule],\n    exports: [\n        DashboardLayoutModule\n    ],\n    providers:[\n        \n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction DashboardLayoutAllModule_tsickle_Closure_declarations() {\n/** @type {?} */\nDashboardLayoutAllModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDashboardLayoutAllModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PanelDirective, PanelsDirective } from './panels.directive';\nimport { DashboardLayoutComponent } from './dashboardlayout.component';\n/**\n * NgModule definition for the DashboardLayout component.\n */\nexport class DashboardLayoutModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule],\n    declarations: [\n        DashboardLayoutComponent,\n        PanelDirective,\n        PanelsDirective\n    ],\n    exports: [\n        DashboardLayoutComponent,\n        PanelDirective,\n        PanelsDirective\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction DashboardLayoutModule_tsickle_Closure_declarations() {\n/** @type {?} */\nDashboardLayoutModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDashboardLayoutModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ElementRef, ViewContainerRef, Renderer2, Injector, ChangeDetectionStrategy, ValueProvider, ContentChild } from '@angular/core';\nimport { ComponentBase, ComponentMixins, IComponentBase, applyMixins, PropertyCollectionInfo, setValue } from '@syncfusion/ej2-angular-base';\nimport { DashboardLayout } from '@syncfusion/ej2-layouts';\n\nimport { PanelsDirective } from './panels.directive';\n\nexport const /** @type {?} */ inputs: string[] = ['allowDragging','allowFloating','allowPushing','allowResizing','cellAspectRatio','cellSpacing','columns','draggableHandle','enablePersistence','enableRtl','locale','mediaQuery','panels','resizableHandles','showGridLines'];\nexport const /** @type {?} */ outputs: string[] = ['change','created','destroyed','drag','dragStart','dragStop','resize','resizeStart','resizeStop'];\nexport const /** @type {?} */ twoWays: string[] = [''];\n/**\n * Represents the Essential JS 2 Angular DashboardLayout Component.\n * ```html\n * <ejs-dashboardlayout></ejs-dashboardlayout>\n * ```\n */\n@ComponentMixins([ComponentBase])\nexport class DashboardLayoutComponent extends DashboardLayout implements IComponentBase {\npublic childPanels: any;\npublic tags: string[] = ['panels'];\n/**\n * @param {?} ngEle\n * @param {?} srenderer\n * @param {?} viewContainerRef\n * @param {?} injector\n */\nconstructor(private ngEle: ElementRef,\nprivate srenderer: Renderer2,\nprivate viewContainerRef:ViewContainerRef,\nprivate injector: Injector) {\n        super();\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n\n        this.registerEvents(outputs);\n        this.addTwoWay.call(this, twoWays);\n        setValue('currentInstance', this, this.viewContainerRef);\n    }\n/**\n * @return {?}\n */\npublic ngOnInit() {\n    }\n/**\n * @return {?}\n */\npublic ngAfterViewInit(): void {\n    }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\n    }\n/**\n * @return {?}\n */\npublic ngAfterContentChecked(): void {\n    }\npublic registerEvents: (eventList: string[]) => void;\npublic addTwoWay: (propList: string[]) => void;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'ejs-dashboardlayout',\n    inputs: inputs,\n    outputs: outputs,\n    template: `<ng-content select='div'></ng-content>`,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    queries: {\n        childPanels: new ContentChild(PanelsDirective)\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ViewContainerRef, },\n{type: Injector, },\n];\n}\n\nfunction DashboardLayoutComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nDashboardLayoutComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDashboardLayoutComponent.ctorParameters;\n/** @type {?} */\nDashboardLayoutComponent.prototype.childPanels;\n/** @type {?} */\nDashboardLayoutComponent.prototype.tags;\n/** @type {?} */\nDashboardLayoutComponent.prototype.registerEvents;\n/** @type {?} */\nDashboardLayoutComponent.prototype.addTwoWay;\n/** @type {?} */\nDashboardLayoutComponent.prototype.ngEle;\n/** @type {?} */\nDashboardLayoutComponent.prototype.srenderer;\n/** @type {?} */\nDashboardLayoutComponent.prototype.viewContainerRef;\n/** @type {?} */\nDashboardLayoutComponent.prototype.injector;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren, ContentChild } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\nimport { Template } from '@syncfusion/ej2-angular-base';\n\n\nlet /** @type {?} */ input: string[] = ['col', 'content', 'cssClass', 'enabled', 'header', 'id', 'maxSizeX', 'maxSizeY', 'minSizeX', 'minSizeY', 'row', 'sizeX', 'sizeY', 'zIndex'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * 'e-panels' directive represent a panels of angular dashboardlayout \n * It must be contained in a dashboardlayout component(`ej-dashboardlayout`). \n * ```html\n * <ejs-dashboardlayout> \n *   <e-panels>\n *    <e-panel></e-panel>\n *    <e-panel></e-panel>\n *   </e-panels>\n * </ejs-dashboardlayout>\n * ```\n */\nexport class PanelDirective extends ComplexBase<PanelDirective> {\n/**\n * Defines the column value where the panel to be placed.\n */\npublic col: any;\n/**\n * Defines the CSS class name that can be appended with each panel element.\n */\npublic cssClass: any;\n/**\n * Defines whether to the panel should be enabled or not.\n */\npublic enabled: any;\n/**\n * Defines the id of the panel.\n */\npublic id: any;\n/**\n * Specifies the maximum width of the panel in cells count. \n * *\n */\npublic maxSizeX: any;\n/**\n * Specifies the maximum height of the panel in cells count. \n * *\n */\npublic maxSizeY: any;\n/**\n * Specifies the minimum width of the panel in cells count. \n * *\n */\npublic minSizeX: any;\n/**\n * Specifies the minimum height of the panel in cells count.\n */\npublic minSizeY: any;\n/**\n * Defines a row value where the panel should be placed.\n */\npublic row: any;\n/**\n * Specifies the width of the panel in the layout in cells count.\n */\npublic sizeX: any;\n/**\n * Specifies the height of the panel in the layout in cells count.\n */\npublic sizeY: any;\n/**\n * Specifies the z-index of the panel \n * *\n */\npublic zIndex: any;\n/**\n * Defines the template value that should be displayed as the panel's header.\n */\n@Template()\n    public header: any;\n/**\n * Defines the template value that should be displayed as the panel's content.\n */\n@Template()\n    public content: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-panels>e-panel',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'header': [{ type: ContentChild, args: ['header', ] },],\n'content': [{ type: ContentChild, args: ['content', ] },],\n};\n}\n\nfunction PanelDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nPanelDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPanelDirective.ctorParameters;\n/** @type {?} */\nPanelDirective.propDecorators;\n/**\n * Defines the column value where the panel to be placed.\n * @type {?}\n */\nPanelDirective.prototype.col;\n/**\n * Defines the CSS class name that can be appended with each panel element.\n * @type {?}\n */\nPanelDirective.prototype.cssClass;\n/**\n * Defines whether to the panel should be enabled or not.\n * @type {?}\n */\nPanelDirective.prototype.enabled;\n/**\n * Defines the id of the panel.\n * @type {?}\n */\nPanelDirective.prototype.id;\n/**\n * Specifies the maximum width of the panel in cells count. \n * *\n * @type {?}\n */\nPanelDirective.prototype.maxSizeX;\n/**\n * Specifies the maximum height of the panel in cells count. \n * *\n * @type {?}\n */\nPanelDirective.prototype.maxSizeY;\n/**\n * Specifies the minimum width of the panel in cells count. \n * *\n * @type {?}\n */\nPanelDirective.prototype.minSizeX;\n/**\n * Specifies the minimum height of the panel in cells count.\n * @type {?}\n */\nPanelDirective.prototype.minSizeY;\n/**\n * Defines a row value where the panel should be placed.\n * @type {?}\n */\nPanelDirective.prototype.row;\n/**\n * Specifies the width of the panel in the layout in cells count.\n * @type {?}\n */\nPanelDirective.prototype.sizeX;\n/**\n * Specifies the height of the panel in the layout in cells count.\n * @type {?}\n */\nPanelDirective.prototype.sizeY;\n/**\n * Specifies the z-index of the panel \n * *\n * @type {?}\n */\nPanelDirective.prototype.zIndex;\n/**\n * Defines the template value that should be displayed as the panel's header.\n * @type {?}\n */\nPanelDirective.prototype.header;\n/**\n * Defines the template value that should be displayed as the panel's content.\n * @type {?}\n */\nPanelDirective.prototype.content;\n/** @type {?} */\nPanelDirective.prototype.viewContainerRef;\n}\n\n/**\n * Panel Array Directive\n */\nexport class PanelsDirective extends ArrayBase<PanelsDirective> {\nconstructor() {\n        super('panels');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-dashboardlayout>e-panels',\n    queries: {\n        children: new ContentChildren(PanelDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction PanelsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nPanelsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPanelsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ValueProvider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PaneDirective, PanesDirective } from './panesettings.directive';\nimport { SplitterComponent } from './splitter.component';\nimport { SplitterModule } from './splitter.module';\n/**\n * NgModule definition for the Splitter component with providers.\n */\nexport class SplitterAllModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule, SplitterModule],\n    exports: [\n        SplitterModule\n    ],\n    providers:[\n        \n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SplitterAllModule_tsickle_Closure_declarations() {\n/** @type {?} */\nSplitterAllModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSplitterAllModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PaneDirective, PanesDirective } from './panesettings.directive';\nimport { SplitterComponent } from './splitter.component';\n/**\n * NgModule definition for the Splitter component.\n */\nexport class SplitterModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule],\n    declarations: [\n        SplitterComponent,\n        PaneDirective,\n        PanesDirective\n    ],\n    exports: [\n        SplitterComponent,\n        PaneDirective,\n        PanesDirective\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SplitterModule_tsickle_Closure_declarations() {\n/** @type {?} */\nSplitterModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSplitterModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ElementRef, ViewContainerRef, Renderer2, Injector, ChangeDetectionStrategy, ValueProvider, ContentChild } from '@angular/core';\nimport { ComponentBase, ComponentMixins, IComponentBase, applyMixins, PropertyCollectionInfo, setValue } from '@syncfusion/ej2-angular-base';\nimport { Splitter } from '@syncfusion/ej2-layouts';\n\nimport { PanesDirective } from './panesettings.directive';\n\nexport const /** @type {?} */ inputs: string[] = ['cssClass','enablePersistence','enableRtl','enabled','height','locale','orientation','paneSettings','separatorSize','width'];\nexport const /** @type {?} */ outputs: string[] = ['beforeCollapse','beforeExpand','collapsed','created','expanded','resizeStart','resizeStop','resizing'];\nexport const /** @type {?} */ twoWays: string[] = [''];\n/**\n * Represents the Angular Splitter Component\n * ```html\n * <ejs-splitter></ejs-splitter>\n * ```\n */\n@ComponentMixins([ComponentBase])\nexport class SplitterComponent extends Splitter implements IComponentBase {\npublic childPaneSettings: any;\npublic tags: string[] = ['paneSettings'];\n/**\n * @param {?} ngEle\n * @param {?} srenderer\n * @param {?} viewContainerRef\n * @param {?} injector\n */\nconstructor(private ngEle: ElementRef,\nprivate srenderer: Renderer2,\nprivate viewContainerRef:ViewContainerRef,\nprivate injector: Injector) {\n        super();\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n\n        this.registerEvents(outputs);\n        this.addTwoWay.call(this, twoWays);\n        setValue('currentInstance', this, this.viewContainerRef);\n    }\n/**\n * @return {?}\n */\npublic ngOnInit() {\n    }\n/**\n * @return {?}\n */\npublic ngAfterViewInit(): void {\n    }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\n    }\n/**\n * @return {?}\n */\npublic ngAfterContentChecked(): void {\n    }\npublic registerEvents: (eventList: string[]) => void;\npublic addTwoWay: (propList: string[]) => void;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'ejs-splitter',\n    inputs: inputs,\n    outputs: outputs,\n    template: `<ng-content select='div'></ng-content>`,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    queries: {\n        childPaneSettings: new ContentChild(PanesDirective)\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ViewContainerRef, },\n{type: Injector, },\n];\n}\n\nfunction SplitterComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nSplitterComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSplitterComponent.ctorParameters;\n/** @type {?} */\nSplitterComponent.prototype.childPaneSettings;\n/** @type {?} */\nSplitterComponent.prototype.tags;\n/** @type {?} */\nSplitterComponent.prototype.registerEvents;\n/** @type {?} */\nSplitterComponent.prototype.addTwoWay;\n/** @type {?} */\nSplitterComponent.prototype.ngEle;\n/** @type {?} */\nSplitterComponent.prototype.srenderer;\n/** @type {?} */\nSplitterComponent.prototype.viewContainerRef;\n/** @type {?} */\nSplitterComponent.prototype.injector;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren, ContentChild } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\nimport { Template } from '@syncfusion/ej2-angular-base';\n\n\nlet /** @type {?} */ input: string[] = ['collapsed', 'collapsible', 'content', 'max', 'min', 'resizable', 'size'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * 'e-panesettings' directive represent a panes of angular splitter \n * It must be contained in a Splitter component(`ejs-splitter`). \n * ```html\n * <ejs-splitter id='splitter' > \n *   <e-panes>\n *    <e-pane size ='150px'></e-pane>\n *    <e-pane size = '20%'></e-pane>\n *   </e-panes>\n * </ejs-splitter>\n * ```\n */\nexport class PaneDirective extends ComplexBase<PaneDirective> {\n/**\n * Specifies whether a pane is collapsed or not collapsed at the initial rendering of splitter.\n */\npublic collapsed: any;\n/**\n * Specifies whether a pane is collapsible or not collapsible.\n */\npublic collapsible: any;\n/**\n * Specifies the maximum size of a pane. The pane cannot be resized if it is more than the specified maximum limit.\n */\npublic max: any;\n/**\n * Specifies the minimum size of a pane. The pane cannot be resized if it is less than the specified minimum size.\n */\npublic min: any;\n/**\n * Specifies the value whether a pane is resizable. By default, the Splitter is resizable in all panes. \n * You can disable this for any specific panes using this property.\n */\npublic resizable: any;\n/**\n * Configures the properties for each pane.\n */\npublic size: any;\n/**\n * Specifies the content of split pane as plain text, HTML markup, or any other JavaScript controls.\n */\n@Template()\n    public content: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-panes>e-pane',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'content': [{ type: ContentChild, args: ['content', ] },],\n};\n}\n\nfunction PaneDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nPaneDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPaneDirective.ctorParameters;\n/** @type {?} */\nPaneDirective.propDecorators;\n/**\n * Specifies whether a pane is collapsed or not collapsed at the initial rendering of splitter.\n * @type {?}\n */\nPaneDirective.prototype.collapsed;\n/**\n * Specifies whether a pane is collapsible or not collapsible.\n * @type {?}\n */\nPaneDirective.prototype.collapsible;\n/**\n * Specifies the maximum size of a pane. The pane cannot be resized if it is more than the specified maximum limit.\n * @type {?}\n */\nPaneDirective.prototype.max;\n/**\n * Specifies the minimum size of a pane. The pane cannot be resized if it is less than the specified minimum size.\n * @type {?}\n */\nPaneDirective.prototype.min;\n/**\n * Specifies the value whether a pane is resizable. By default, the Splitter is resizable in all panes. \n * You can disable this for any specific panes using this property.\n * @type {?}\n */\nPaneDirective.prototype.resizable;\n/**\n * Configures the properties for each pane.\n * @type {?}\n */\nPaneDirective.prototype.size;\n/**\n * Specifies the content of split pane as plain text, HTML markup, or any other JavaScript controls.\n * @type {?}\n */\nPaneDirective.prototype.content;\n/** @type {?} */\nPaneDirective.prototype.viewContainerRef;\n}\n\n/**\n * Pane Array Directive\n */\nexport class PanesDirective extends ArrayBase<PanesDirective> {\nconstructor() {\n        super('panesettings');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-splitter>e-panes',\n    queries: {\n        children: new ContentChildren(PaneDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction PanesDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nPanesDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPanesDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["CommonModule","NgModule","DashboardLayoutComponent","Injector","ViewContainerRef","Renderer2","__metadata","ElementRef","ComponentMixins","ComponentBase","__decorate","ContentChild","ChangeDetectionStrategy","outputs","inputs","Component","DashboardLayout","setValue","twoWays","ContentChildren","Directive","ArrayBase","Template","input","ComplexBase","SplitterComponent","Splitter"],"mappings":"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"}
