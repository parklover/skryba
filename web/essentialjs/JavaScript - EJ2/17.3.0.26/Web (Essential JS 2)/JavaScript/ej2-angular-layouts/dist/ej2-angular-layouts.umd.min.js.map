/*!
*  filename: ej2-angular-layouts.umd.min.js.map
*  version : 17.3.27
*  Copyright Syncfusion Inc. 2001 - 2018. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
*/

{"version":3,"file":"ej2-angular-layouts.umd.min.js","sources":["~/@syncfusion/ej2-angular-layouts/src/splitter/panesettings.directive.ts","~/@syncfusion/ej2-angular-layouts/src/splitter/splitter.component.ts","~/@syncfusion/ej2-angular-layouts/src/splitter/splitter.module.ts","~/@syncfusion/ej2-angular-layouts/src/splitter/splitter-all.module.ts","~/@syncfusion/ej2-angular-layouts/src/dashboard-layout/panels.directive.ts","~/@syncfusion/ej2-angular-layouts/src/dashboard-layout/dashboardlayout.component.ts","~/@syncfusion/ej2-angular-layouts/src/dashboard-layout/dashboardlayout.module.ts","~/@syncfusion/ej2-angular-layouts/src/dashboard-layout/dashboardlayout-all.module.ts"],"sourcesContent":["import { Directive, ViewContainerRef, ContentChildren, ContentChild } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\nimport { Template } from '@syncfusion/ej2-angular-base';\n\n\nlet /** @type {?} */ input: string[] = ['collapsed', 'collapsible', 'content', 'max', 'min', 'resizable', 'size'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * 'e-panesettings' directive represent a panes of angular splitter \n * It must be contained in a Splitter component(`ejs-splitter`). \n * ```html\n * <ejs-splitter id='splitter' > \n *   <e-panes>\n *    <e-pane size ='150px'></e-pane>\n *    <e-pane size = '20%'></e-pane>\n *   </e-panes>\n * </ejs-splitter>\n * ```\n */\nexport class PaneDirective extends ComplexBase<PaneDirective> {\n/**\n * Specifies whether a pane is collapsed or not collapsed at the initial rendering of splitter.\n */\npublic collapsed: any;\n/**\n * Specifies whether a pane is collapsible or not collapsible.\n */\npublic collapsible: any;\n/**\n * Specifies the maximum size of a pane. The pane cannot be resized if it is more than the specified maximum limit.\n */\npublic max: any;\n/**\n * Specifies the minimum size of a pane. The pane cannot be resized if it is less than the specified minimum size.\n */\npublic min: any;\n/**\n * Specifies the value whether a pane is resizable. By default, the Splitter is resizable in all panes. \n * You can disable this for any specific panes using this property.\n */\npublic resizable: any;\n/**\n * Configures the properties for each pane.\n */\npublic size: any;\n/**\n * Specifies the content of split pane as plain text, HTML markup, or any other JavaScript controls.\n */\n@Template()\n    public content: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-panes>e-pane',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'content': [{ type: ContentChild, args: ['content', ] },],\n};\n}\n\nfunction PaneDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nPaneDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPaneDirective.ctorParameters;\n/** @type {?} */\nPaneDirective.propDecorators;\n/**\n * Specifies whether a pane is collapsed or not collapsed at the initial rendering of splitter.\n * @type {?}\n */\nPaneDirective.prototype.collapsed;\n/**\n * Specifies whether a pane is collapsible or not collapsible.\n * @type {?}\n */\nPaneDirective.prototype.collapsible;\n/**\n * Specifies the maximum size of a pane. The pane cannot be resized if it is more than the specified maximum limit.\n * @type {?}\n */\nPaneDirective.prototype.max;\n/**\n * Specifies the minimum size of a pane. The pane cannot be resized if it is less than the specified minimum size.\n * @type {?}\n */\nPaneDirective.prototype.min;\n/**\n * Specifies the value whether a pane is resizable. By default, the Splitter is resizable in all panes. \n * You can disable this for any specific panes using this property.\n * @type {?}\n */\nPaneDirective.prototype.resizable;\n/**\n * Configures the properties for each pane.\n * @type {?}\n */\nPaneDirective.prototype.size;\n/**\n * Specifies the content of split pane as plain text, HTML markup, or any other JavaScript controls.\n * @type {?}\n */\nPaneDirective.prototype.content;\n/** @type {?} */\nPaneDirective.prototype.viewContainerRef;\n}\n\n/**\n * Pane Array Directive\n */\nexport class PanesDirective extends ArrayBase<PanesDirective> {\nconstructor() {\n        super('panesettings');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-splitter>e-panes',\n    queries: {\n        children: new ContentChildren(PaneDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction PanesDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nPanesDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPanesDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ElementRef, ViewContainerRef, Renderer2, Injector, ChangeDetectionStrategy, ValueProvider, ContentChild } from '@angular/core';\nimport { ComponentBase, ComponentMixins, IComponentBase, applyMixins, PropertyCollectionInfo, setValue } from '@syncfusion/ej2-angular-base';\nimport { Splitter } from '@syncfusion/ej2-layouts';\n\nimport { PanesDirective } from './panesettings.directive';\n\nexport const /** @type {?} */ inputs: string[] = ['cssClass','enablePersistence','enableRtl','enabled','height','locale','orientation','paneSettings','separatorSize','width'];\nexport const /** @type {?} */ outputs: string[] = ['beforeCollapse','beforeExpand','collapsed','created','expanded','resizeStart','resizeStop','resizing'];\nexport const /** @type {?} */ twoWays: string[] = [''];\n/**\n * Represents the Angular Splitter Component\n * ```html\n * <ejs-splitter></ejs-splitter>\n * ```\n */\n@ComponentMixins([ComponentBase])\nexport class SplitterComponent extends Splitter implements IComponentBase {\npublic childPaneSettings: any;\npublic tags: string[] = ['paneSettings'];\n/**\n * @param {?} ngEle\n * @param {?} srenderer\n * @param {?} viewContainerRef\n * @param {?} injector\n */\nconstructor(private ngEle: ElementRef,\nprivate srenderer: Renderer2,\nprivate viewContainerRef:ViewContainerRef,\nprivate injector: Injector) {\n        super();\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n\n        this.registerEvents(outputs);\n        this.addTwoWay.call(this, twoWays);\n        setValue('currentInstance', this, this.viewContainerRef);\n    }\n/**\n * @return {?}\n */\npublic ngOnInit() {\n    }\n/**\n * @return {?}\n */\npublic ngAfterViewInit(): void {\n    }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\n    }\n/**\n * @return {?}\n */\npublic ngAfterContentChecked(): void {\n    }\npublic registerEvents: (eventList: string[]) => void;\npublic addTwoWay: (propList: string[]) => void;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'ejs-splitter',\n    inputs: inputs,\n    outputs: outputs,\n    template: `<ng-content select='div'></ng-content>`,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    queries: {\n        childPaneSettings: new ContentChild(PanesDirective)\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ViewContainerRef, },\n{type: Injector, },\n];\n}\n\nfunction SplitterComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nSplitterComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSplitterComponent.ctorParameters;\n/** @type {?} */\nSplitterComponent.prototype.childPaneSettings;\n/** @type {?} */\nSplitterComponent.prototype.tags;\n/** @type {?} */\nSplitterComponent.prototype.registerEvents;\n/** @type {?} */\nSplitterComponent.prototype.addTwoWay;\n/** @type {?} */\nSplitterComponent.prototype.ngEle;\n/** @type {?} */\nSplitterComponent.prototype.srenderer;\n/** @type {?} */\nSplitterComponent.prototype.viewContainerRef;\n/** @type {?} */\nSplitterComponent.prototype.injector;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PaneDirective, PanesDirective } from './panesettings.directive';\nimport { SplitterComponent } from './splitter.component';\n/**\n * NgModule definition for the Splitter component.\n */\nexport class SplitterModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule],\n    declarations: [\n        SplitterComponent,\n        PaneDirective,\n        PanesDirective\n    ],\n    exports: [\n        SplitterComponent,\n        PaneDirective,\n        PanesDirective\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SplitterModule_tsickle_Closure_declarations() {\n/** @type {?} */\nSplitterModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSplitterModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ValueProvider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PaneDirective, PanesDirective } from './panesettings.directive';\nimport { SplitterComponent } from './splitter.component';\nimport { SplitterModule } from './splitter.module';\n/**\n * NgModule definition for the Splitter component with providers.\n */\nexport class SplitterAllModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule, SplitterModule],\n    exports: [\n        SplitterModule\n    ],\n    providers:[\n        \n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SplitterAllModule_tsickle_Closure_declarations() {\n/** @type {?} */\nSplitterAllModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSplitterAllModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren, ContentChild } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\nimport { Template } from '@syncfusion/ej2-angular-base';\n\n\nlet /** @type {?} */ input: string[] = ['col', 'content', 'cssClass', 'enabled', 'header', 'id', 'maxSizeX', 'maxSizeY', 'minSizeX', 'minSizeY', 'row', 'sizeX', 'sizeY', 'zIndex'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * 'e-panels' directive represent a panels of angular dashboardlayout \n * It must be contained in a dashboardlayout component(`ej-dashboardlayout`). \n * ```html\n * <ejs-dashboardlayout> \n *   <e-panels>\n *    <e-panel></e-panel>\n *    <e-panel></e-panel>\n *   </e-panels>\n * </ejs-dashboardlayout>\n * ```\n */\nexport class PanelDirective extends ComplexBase<PanelDirective> {\n/**\n * Defines the column value where the panel to be placed.\n */\npublic col: any;\n/**\n * Defines the CSS class name that can be appended with each panel element.\n */\npublic cssClass: any;\n/**\n * Defines whether to the panel should be enabled or not.\n */\npublic enabled: any;\n/**\n * Defines the id of the panel.\n */\npublic id: any;\n/**\n * Specifies the maximum width of the panel in cells count. \n * *\n */\npublic maxSizeX: any;\n/**\n * Specifies the maximum height of the panel in cells count. \n * *\n */\npublic maxSizeY: any;\n/**\n * Specifies the minimum width of the panel in cells count. \n * *\n */\npublic minSizeX: any;\n/**\n * Specifies the minimum height of the panel in cells count.\n */\npublic minSizeY: any;\n/**\n * Defines a row value where the panel should be placed.\n */\npublic row: any;\n/**\n * Specifies the width of the panel in the layout in cells count.\n */\npublic sizeX: any;\n/**\n * Specifies the height of the panel in the layout in cells count.\n */\npublic sizeY: any;\n/**\n * Specifies the z-index of the panel \n * *\n */\npublic zIndex: any;\n/**\n * Defines the template value that should be displayed as the panel's header.\n */\n@Template()\n    public header: any;\n/**\n * Defines the template value that should be displayed as the panel's content.\n */\n@Template()\n    public content: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-panels>e-panel',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'header': [{ type: ContentChild, args: ['header', ] },],\n'content': [{ type: ContentChild, args: ['content', ] },],\n};\n}\n\nfunction PanelDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nPanelDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPanelDirective.ctorParameters;\n/** @type {?} */\nPanelDirective.propDecorators;\n/**\n * Defines the column value where the panel to be placed.\n * @type {?}\n */\nPanelDirective.prototype.col;\n/**\n * Defines the CSS class name that can be appended with each panel element.\n * @type {?}\n */\nPanelDirective.prototype.cssClass;\n/**\n * Defines whether to the panel should be enabled or not.\n * @type {?}\n */\nPanelDirective.prototype.enabled;\n/**\n * Defines the id of the panel.\n * @type {?}\n */\nPanelDirective.prototype.id;\n/**\n * Specifies the maximum width of the panel in cells count. \n * *\n * @type {?}\n */\nPanelDirective.prototype.maxSizeX;\n/**\n * Specifies the maximum height of the panel in cells count. \n * *\n * @type {?}\n */\nPanelDirective.prototype.maxSizeY;\n/**\n * Specifies the minimum width of the panel in cells count. \n * *\n * @type {?}\n */\nPanelDirective.prototype.minSizeX;\n/**\n * Specifies the minimum height of the panel in cells count.\n * @type {?}\n */\nPanelDirective.prototype.minSizeY;\n/**\n * Defines a row value where the panel should be placed.\n * @type {?}\n */\nPanelDirective.prototype.row;\n/**\n * Specifies the width of the panel in the layout in cells count.\n * @type {?}\n */\nPanelDirective.prototype.sizeX;\n/**\n * Specifies the height of the panel in the layout in cells count.\n * @type {?}\n */\nPanelDirective.prototype.sizeY;\n/**\n * Specifies the z-index of the panel \n * *\n * @type {?}\n */\nPanelDirective.prototype.zIndex;\n/**\n * Defines the template value that should be displayed as the panel's header.\n * @type {?}\n */\nPanelDirective.prototype.header;\n/**\n * Defines the template value that should be displayed as the panel's content.\n * @type {?}\n */\nPanelDirective.prototype.content;\n/** @type {?} */\nPanelDirective.prototype.viewContainerRef;\n}\n\n/**\n * Panel Array Directive\n */\nexport class PanelsDirective extends ArrayBase<PanelsDirective> {\nconstructor() {\n        super('panels');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-dashboardlayout>e-panels',\n    queries: {\n        children: new ContentChildren(PanelDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction PanelsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nPanelsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPanelsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ElementRef, ViewContainerRef, Renderer2, Injector, ChangeDetectionStrategy, ValueProvider, ContentChild } from '@angular/core';\nimport { ComponentBase, ComponentMixins, IComponentBase, applyMixins, PropertyCollectionInfo, setValue } from '@syncfusion/ej2-angular-base';\nimport { DashboardLayout } from '@syncfusion/ej2-layouts';\n\nimport { PanelsDirective } from './panels.directive';\n\nexport const /** @type {?} */ inputs: string[] = ['allowDragging','allowFloating','allowPushing','allowResizing','cellAspectRatio','cellSpacing','columns','draggableHandle','enablePersistence','enableRtl','locale','mediaQuery','panels','resizableHandles','showGridLines'];\nexport const /** @type {?} */ outputs: string[] = ['change','created','destroyed','drag','dragStart','dragStop','resize','resizeStart','resizeStop'];\nexport const /** @type {?} */ twoWays: string[] = [''];\n/**\n * Represents the Essential JS 2 Angular DashboardLayout Component.\n * ```html\n * <ejs-dashboardlayout></ejs-dashboardlayout>\n * ```\n */\n@ComponentMixins([ComponentBase])\nexport class DashboardLayoutComponent extends DashboardLayout implements IComponentBase {\npublic childPanels: any;\npublic tags: string[] = ['panels'];\n/**\n * @param {?} ngEle\n * @param {?} srenderer\n * @param {?} viewContainerRef\n * @param {?} injector\n */\nconstructor(private ngEle: ElementRef,\nprivate srenderer: Renderer2,\nprivate viewContainerRef:ViewContainerRef,\nprivate injector: Injector) {\n        super();\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n\n        this.registerEvents(outputs);\n        this.addTwoWay.call(this, twoWays);\n        setValue('currentInstance', this, this.viewContainerRef);\n    }\n/**\n * @return {?}\n */\npublic ngOnInit() {\n    }\n/**\n * @return {?}\n */\npublic ngAfterViewInit(): void {\n    }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\n    }\n/**\n * @return {?}\n */\npublic ngAfterContentChecked(): void {\n    }\npublic registerEvents: (eventList: string[]) => void;\npublic addTwoWay: (propList: string[]) => void;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'ejs-dashboardlayout',\n    inputs: inputs,\n    outputs: outputs,\n    template: `<ng-content select='div'></ng-content>`,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    queries: {\n        childPanels: new ContentChild(PanelsDirective)\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ViewContainerRef, },\n{type: Injector, },\n];\n}\n\nfunction DashboardLayoutComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nDashboardLayoutComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDashboardLayoutComponent.ctorParameters;\n/** @type {?} */\nDashboardLayoutComponent.prototype.childPanels;\n/** @type {?} */\nDashboardLayoutComponent.prototype.tags;\n/** @type {?} */\nDashboardLayoutComponent.prototype.registerEvents;\n/** @type {?} */\nDashboardLayoutComponent.prototype.addTwoWay;\n/** @type {?} */\nDashboardLayoutComponent.prototype.ngEle;\n/** @type {?} */\nDashboardLayoutComponent.prototype.srenderer;\n/** @type {?} */\nDashboardLayoutComponent.prototype.viewContainerRef;\n/** @type {?} */\nDashboardLayoutComponent.prototype.injector;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PanelDirective, PanelsDirective } from './panels.directive';\nimport { DashboardLayoutComponent } from './dashboardlayout.component';\n/**\n * NgModule definition for the DashboardLayout component.\n */\nexport class DashboardLayoutModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule],\n    declarations: [\n        DashboardLayoutComponent,\n        PanelDirective,\n        PanelsDirective\n    ],\n    exports: [\n        DashboardLayoutComponent,\n        PanelDirective,\n        PanelsDirective\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction DashboardLayoutModule_tsickle_Closure_declarations() {\n/** @type {?} */\nDashboardLayoutModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDashboardLayoutModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ValueProvider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PanelDirective, PanelsDirective } from './panels.directive';\nimport { DashboardLayoutComponent } from './dashboardlayout.component';\nimport { DashboardLayoutModule } from './dashboardlayout.module';\n/**\n * NgModule definition for the DashboardLayout component with providers.\n */\nexport class DashboardLayoutAllModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule, DashboardLayoutModule],\n    exports: [\n        DashboardLayoutModule\n    ],\n    providers:[\n        \n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction DashboardLayoutAllModule_tsickle_Closure_declarations() {\n/** @type {?} */\nDashboardLayoutAllModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDashboardLayoutAllModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["outputs","PaneDirective","_super","viewContainerRef","_this","call","this","setValue","registerEvents","__extends","ComplexBase","decorators","type","Directive","args","selector","inputs","queries","ctorParameters","ViewContainerRef","propDecorators","content","ContentChild","__decorate","Template","prototype","PanesDirective","ArrayBase","children","ContentChildren","twoWays","exports","SplitterComponent","ngEle","srenderer","injector","tags","element","nativeElement","injectedModules","addTwoWay","ngOnInit","ngAfterViewInit","ngOnDestroy","ngAfterContentChecked","Splitter","Component","template","changeDetection","ChangeDetectionStrategy","OnPush","childPaneSettings","ElementRef","Renderer2","Injector","ComponentMixins","ComponentBase","__metadata","SplitterModule","NgModule","imports","CommonModule","declarations","SplitterAllModule","providers","PanelDirective","header","PanelsDirective","DashboardLayoutComponent","DashboardLayout","childPanels","DashboardLayoutModule","DashboardLayoutAllModule"],"mappings":"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"}
