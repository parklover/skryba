/*!
*  filename: ej2-angular-charts.umd.min.js.map
*  version : 17.3.27
*  Copyright Syncfusion Inc. 2001 - 2018. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
*/

{"version":3,"file":"ej2-angular-charts.umd.min.js","sources":["~/@syncfusion/ej2-angular-charts/src/chart/trendlines.directive.ts","~/@syncfusion/ej2-angular-charts/src/chart/segments.directive.ts","~/@syncfusion/ej2-angular-charts/src/chart/series.directive.ts","~/@syncfusion/ej2-angular-charts/src/chart/striplines.directive.ts","~/@syncfusion/ej2-angular-charts/src/chart/categories.directive.ts","~/@syncfusion/ej2-angular-charts/src/chart/multilevellabels.directive.ts","~/@syncfusion/ej2-angular-charts/src/chart/axes.directive.ts","~/@syncfusion/ej2-angular-charts/src/chart/rows.directive.ts","~/@syncfusion/ej2-angular-charts/src/chart/columns.directive.ts","~/@syncfusion/ej2-angular-charts/src/chart/annotations.directive.ts","~/@syncfusion/ej2-angular-charts/src/chart/selecteddataindexes.directive.ts","~/@syncfusion/ej2-angular-charts/src/chart/indicators.directive.ts","~/@syncfusion/ej2-angular-charts/src/chart/chart.component.ts","~/@syncfusion/ej2-angular-charts/src/chart/chart.module.ts","~/@syncfusion/ej2-angular-charts/src/chart/chart-all.module.ts","~/@syncfusion/ej2-angular-charts/src/accumulation-chart/series.directive.ts","~/@syncfusion/ej2-angular-charts/src/accumulation-chart/annotations.directive.ts","~/@syncfusion/ej2-angular-charts/src/accumulation-chart/accumulationchart.component.ts","~/@syncfusion/ej2-angular-charts/src/accumulation-chart/accumulationchart.module.ts","~/@syncfusion/ej2-angular-charts/src/accumulation-chart/accumulationchart-all.module.ts","~/@syncfusion/ej2-angular-charts/src/range-navigator/series.directive.ts","~/@syncfusion/ej2-angular-charts/src/range-navigator/rangenavigator.component.ts","~/@syncfusion/ej2-angular-charts/src/range-navigator/rangenavigator.module.ts","~/@syncfusion/ej2-angular-charts/src/range-navigator/rangenavigator-all.module.ts","~/@syncfusion/ej2-angular-charts/src/sparkline/rangebandsettings.directive.ts","~/@syncfusion/ej2-angular-charts/src/sparkline/sparkline.component.ts","~/@syncfusion/ej2-angular-charts/src/sparkline/sparkline.module.ts","~/@syncfusion/ej2-angular-charts/src/sparkline/sparkline-all.module.ts","~/@syncfusion/ej2-angular-charts/src/smithchart/series.directive.ts","~/@syncfusion/ej2-angular-charts/src/smithchart/smithchart.component.ts","~/@syncfusion/ej2-angular-charts/src/smithchart/smithchart.module.ts","~/@syncfusion/ej2-angular-charts/src/smithchart/smithchart-all.module.ts","~/@syncfusion/ej2-angular-charts/src/stock-chart/trendlines.directive.ts","~/@syncfusion/ej2-angular-charts/src/stock-chart/series.directive.ts","~/@syncfusion/ej2-angular-charts/src/stock-chart/striplines.directive.ts","~/@syncfusion/ej2-angular-charts/src/stock-chart/axes.directive.ts","~/@syncfusion/ej2-angular-charts/src/stock-chart/rows.directive.ts","~/@syncfusion/ej2-angular-charts/src/stock-chart/annotations.directive.ts","~/@syncfusion/ej2-angular-charts/src/stock-chart/selecteddataindexes.directive.ts","~/@syncfusion/ej2-angular-charts/src/stock-chart/periods.directive.ts","~/@syncfusion/ej2-angular-charts/src/stock-chart/stockevents.directive.ts","~/@syncfusion/ej2-angular-charts/src/stock-chart/indicators.directive.ts","~/@syncfusion/ej2-angular-charts/src/stock-chart/stockchart.component.ts","~/@syncfusion/ej2-angular-charts/src/stock-chart/stockchart.module.ts","~/@syncfusion/ej2-angular-charts/src/stock-chart/stockchart-all.module.ts"],"sourcesContent":["import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['animation', 'backwardForecast', 'dashArray', 'enableTooltip', 'fill', 'forwardForecast', 'intercept', 'legendShape', 'marker', 'name', 'period', 'polynomialOrder', 'type', 'visible', 'width'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Series Directive\n * ```html\n * <e-series-collection>\n * <e-series>\n * <e-trendlines>\n * <e-trendline>\n * </e-trendline>\n * </e-trendlines>\n * </e-series-collection>\n * ```\n */\nexport class TrendlineDirective extends ComplexBase<TrendlineDirective> {\n/**\n * Defines the type of the trendline\n */\npublic type: any;\n/**\n * Options to customize the animation for trendlines\n */\npublic animation: any;\n/**\n * Defines the period, by which the trend has to backward forecast\n */\npublic backwardForecast: any;\n/**\n * Defines the pattern of dashes and gaps to stroke.\n */\npublic dashArray: any;\n/**\n * Enables/disables tooltip for trendlines\n */\npublic enableTooltip: any;\n/**\n * Defines the fill color of trendline\n */\npublic fill: any;\n/**\n * Defines the period, by which the trend has to forward forecast\n */\npublic forwardForecast: any;\n/**\n * Defines the intercept of the trendline\n */\npublic intercept: any;\n/**\n * Sets the legend shape of the trendline\n */\npublic legendShape: any;\n/**\n * Options to customize the marker for trendlines\n */\npublic marker: any;\n/**\n * Defines the name of trendline\n */\npublic name: any;\n/**\n * Defines the period, the price changes over which will be considered to predict moving average trend line\n */\npublic period: any;\n/**\n * Defines the polynomial order of the polynomial trendline\n */\npublic polynomialOrder: any;\n/**\n * Specifies the visibility of trendline.\n */\npublic visible: any;\n/**\n * Defines the width of the trendline\n */\npublic width: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-series>e-trendlines>e-trendline',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction TrendlineDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nTrendlineDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTrendlineDirective.ctorParameters;\n/**\n * Defines the type of the trendline\n * @type {?}\n */\nTrendlineDirective.prototype.type;\n/**\n * Options to customize the animation for trendlines\n * @type {?}\n */\nTrendlineDirective.prototype.animation;\n/**\n * Defines the period, by which the trend has to backward forecast\n * @type {?}\n */\nTrendlineDirective.prototype.backwardForecast;\n/**\n * Defines the pattern of dashes and gaps to stroke.\n * @type {?}\n */\nTrendlineDirective.prototype.dashArray;\n/**\n * Enables/disables tooltip for trendlines\n * @type {?}\n */\nTrendlineDirective.prototype.enableTooltip;\n/**\n * Defines the fill color of trendline\n * @type {?}\n */\nTrendlineDirective.prototype.fill;\n/**\n * Defines the period, by which the trend has to forward forecast\n * @type {?}\n */\nTrendlineDirective.prototype.forwardForecast;\n/**\n * Defines the intercept of the trendline\n * @type {?}\n */\nTrendlineDirective.prototype.intercept;\n/**\n * Sets the legend shape of the trendline\n * @type {?}\n */\nTrendlineDirective.prototype.legendShape;\n/**\n * Options to customize the marker for trendlines\n * @type {?}\n */\nTrendlineDirective.prototype.marker;\n/**\n * Defines the name of trendline\n * @type {?}\n */\nTrendlineDirective.prototype.name;\n/**\n * Defines the period, the price changes over which will be considered to predict moving average trend line\n * @type {?}\n */\nTrendlineDirective.prototype.period;\n/**\n * Defines the polynomial order of the polynomial trendline\n * @type {?}\n */\nTrendlineDirective.prototype.polynomialOrder;\n/**\n * Specifies the visibility of trendline.\n * @type {?}\n */\nTrendlineDirective.prototype.visible;\n/**\n * Defines the width of the trendline\n * @type {?}\n */\nTrendlineDirective.prototype.width;\n/** @type {?} */\nTrendlineDirective.prototype.viewContainerRef;\n}\n\n/**\n * Trendline Array Directive\n */\nexport class TrendlinesDirective extends ArrayBase<TrendlinesDirective> {\nconstructor() {\n        super('trendlines');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-series>e-trendlines',\n    queries: {\n        children: new ContentChildren(TrendlineDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction TrendlinesDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nTrendlinesDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTrendlinesDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['color', 'dashArray', 'value'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Series Directive\n * ```html\n * <e-series-collection>\n * <e-series>\n * <e-segments>\n * <e-segment>\n * </e-segment>\n * </e-segments>\n * </e-series-collection>\n * ```\n */\nexport class SegmentDirective extends ComplexBase<SegmentDirective> {\n/**\n * Defines the color of a region.\n */\npublic color: any;\n/**\n * Defines the pattern of dashes and gaps to stroke.\n */\npublic dashArray: any;\n/**\n * Defines the starting point of region.\n */\npublic value: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-series>e-segments>e-segment',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction SegmentDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nSegmentDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSegmentDirective.ctorParameters;\n/**\n * Defines the color of a region.\n * @type {?}\n */\nSegmentDirective.prototype.color;\n/**\n * Defines the pattern of dashes and gaps to stroke.\n * @type {?}\n */\nSegmentDirective.prototype.dashArray;\n/**\n * Defines the starting point of region.\n * @type {?}\n */\nSegmentDirective.prototype.value;\n/** @type {?} */\nSegmentDirective.prototype.viewContainerRef;\n}\n\n/**\n * Segment Array Directive\n */\nexport class SegmentsDirective extends ArrayBase<SegmentsDirective> {\nconstructor() {\n        super('segments');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-series>e-segments',\n    queries: {\n        children: new ContentChildren(SegmentDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SegmentsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nSegmentsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSegmentsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren, ContentChild } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\nimport { Template } from '@syncfusion/ej2-angular-base';\nimport { TrendlinesDirective } from './trendlines.directive';\nimport { SegmentsDirective } from './segments.directive';\n\nlet /** @type {?} */ input: string[] = ['animation', 'bearFillColor', 'binInterval', 'border', 'boxPlotMode', 'bullFillColor', 'cardinalSplineTension', 'close', 'columnSpacing', 'columnWidth', 'connector', 'cornerRadius', 'dashArray', 'dataSource', 'dragSettings', 'drawType', 'emptyPointSettings', 'enableComplexProperty', 'enableSolidCandles', 'enableTooltip', 'errorBar', 'fill', 'high', 'intermediateSumIndexes', 'isClosed', 'legendShape', 'low', 'marker', 'maxRadius', 'minRadius', 'name', 'negativeFillColor', 'opacity', 'open', 'pointColorMapping', 'query', 'segmentAxis', 'segments', 'selectionStyle', 'showMean', 'showNormalDistribution', 'size', 'splineType', 'stackingGroup', 'sumIndexes', 'summaryFillColor', 'tooltipFormat', 'tooltipMappingName', 'trendlines', 'type', 'visible', 'volume', 'width', 'xAxisName', 'xName', 'yAxisName', 'yName', 'zOrder'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Series Directive\n * ```html\n * <e-series-collection>\n * <e-series></e-series>\n * </e-series-collection>\n * ```\n */\nexport class SeriesDirective extends ComplexBase<SeriesDirective> {\npublic childTrendlines: any;\npublic childSegments: any;\npublic tags: string[] = ['trendlines', 'segments'];\n/**\n * The type of the series are \n * * Line \n * * Column \n * * Area \n * * Bar \n * * Histogram \n * * StackingColumn \n * * StackingArea \n * * StackingBar \n * * StepLine \n * * StepArea \n * * Scatter \n * * Spline \n * * StackingColumn100 \n * * StackingBar100 \n * * StackingArea100 \n * * RangeColumn \n * * Hilo \n * * HiloOpenClose \n * * Waterfall \n * * RangeArea \n * * Bubble \n * * Candle \n * * Polar \n * * Radar \n * * BoxAndWhisker \n * * Pareto\n */\npublic type: any;\n/**\n * Options to customizing animation for the series.\n */\npublic animation: any;\n/**\n * This property is used in financial charts to visualize the price movements in stock. \n * It defines the color of the candle/point, when the opening price is less than the closing price.\n */\npublic bearFillColor: any;\n/**\n * The bin interval of each histogram points.\n */\npublic binInterval: any;\n/**\n * Options to customizing the border of the series. This is applicable only for `Column` and `Bar` type series.\n */\npublic border: any;\n/**\n * The mode of the box and whisker char series. They are, \n * Exclusive \n * Inclusive \n * Normal\n */\npublic boxPlotMode: any;\n/**\n * This property is used in financial charts to visualize the price movements in stock. \n * It defines the color of the candle/point, when the opening price is higher than the closing price.\n */\npublic bullFillColor: any;\n/**\n * It defines tension of cardinal spline types\n */\npublic cardinalSplineTension: any;\n/**\n * The DataSource field that contains the close value of y \n * It is applicable for series and technical indicators\n */\npublic close: any;\n/**\n * To render the column series points with particular column spacing. It takes value from 0 - 1.\n */\npublic columnSpacing: any;\n/**\n * To render the column series points with particular column width. If the series type is histogram the \n * default value is 1 otherwise 0.7.\n */\npublic columnWidth: any;\n/**\n * Defines the appearance of line connecting adjacent points in waterfall charts.\n */\npublic connector: any;\n/**\n * To render the column series points with particular rounded corner.\n */\npublic cornerRadius: any;\n/**\n * Defines the pattern of dashes and gaps to stroke the lines in `Line` type series.\n */\npublic dashArray: any;\n/**\n * Specifies the DataSource for the series. It can be an array of JSON objects or an instance of DataManager. \n * \n */\npublic dataSource: any;\n/**\n * Options to customize the drag settings for series\n */\npublic dragSettings: any;\n/**\n * Type of series to be drawn in radar or polar series. They are \n *  'Line' \n *  'Column' \n *  'Area' \n *  'Scatter' \n *  'Spline' \n *  'StackingColumn' \n *  'StackingArea' \n *  'RangeColumn' \n *  'SplineArea'\n */\npublic drawType: any;\n/**\n * options to customize the empty points in series\n */\npublic emptyPointSettings: any;\n/**\n * This property used to improve chart performance via data mapping for series dataSource.\n */\npublic enableComplexProperty: any;\n/**\n * This property is applicable for candle series. \n * It enables/disables to visually compare the current values with the previous values in stock.\n */\npublic enableSolidCandles: any;\n/**\n * If set true, the Tooltip for series will be visible.\n */\npublic enableTooltip: any;\n/**\n * Options for displaying and customizing error bar for individual point in a series.\n */\npublic errorBar: any;\n/**\n * The fill color for the series that accepts value in hex and rgba as a valid CSS color string. \n * It also represents the color of the signal lines in technical indicators. \n * For technical indicators, the default value is 'blue' and for series, it has null.\n */\npublic fill: any;\n/**\n * The DataSource field that contains the high value of y \n * It is applicable for series and technical indicators\n */\npublic high: any;\n/**\n * Defines the collection of indexes of the intermediate summary columns in waterfall charts.\n */\npublic intermediateSumIndexes: any;\n/**\n * Specifies whether to join start and end point of a line/area series used in polar/radar chart to form a closed path.\n */\npublic isClosed: any;\n/**\n * The shape of the legend. Each series has its own legend shape. They are, \n * * Circle \n * * Rectangle \n * * Triangle \n * * Diamond \n * * Cross \n * * HorizontalLine \n * * VerticalLine \n * * Pentagon \n * * InvertedTriangle \n * * SeriesType\n */\npublic legendShape: any;\n/**\n * The DataSource field that contains the low value of y \n * It is applicable for series and technical indicators\n */\npublic low: any;\n/**\n * Options for displaying and customizing markers for individual points in a series.\n */\npublic marker: any;\n/**\n * Maximum radius\n */\npublic maxRadius: any;\n/**\n * Minimum radius\n */\npublic minRadius: any;\n/**\n * The name of the series visible in legend.\n */\npublic name: any;\n/**\n * Defines the visual representation of the negative changes in waterfall charts.\n */\npublic negativeFillColor: any;\n/**\n * The opacity of the series.\n */\npublic opacity: any;\n/**\n * The DataSource field that contains the open value of y \n * It is applicable for series and technical indicators\n */\npublic open: any;\n/**\n * The DataSource field that contains the color value of point \n * It is applicable for series\n */\npublic pointColorMapping: any;\n/**\n * Specifies query to select data from DataSource. This property is applicable only when the DataSource is `ej.DataManager`.\n */\npublic query: any;\n/**\n * Defines the axis, based on which the line series will be split.\n */\npublic segmentAxis: any;\n/**\n * Defines the collection of regions that helps to differentiate a line series.\n */\npublic segments: any;\n/**\n * Custom style for the selected series or points.\n */\npublic selectionStyle: any;\n/**\n * If set true, the mean value for box and whisker will be visible.\n */\npublic showMean: any;\n/**\n * The normal distribution of histogram series.\n */\npublic showNormalDistribution: any;\n/**\n * The DataSource field that contains the size value of y\n */\npublic size: any;\n/**\n * Defines type of spline to be rendered.\n */\npublic splineType: any;\n/**\n * This property allows grouping series in `stacked column / bar` charts. \n * Any string value can be provided to the stackingGroup property. \n * If any two or above series have the same value, those series will be grouped together.\n */\npublic stackingGroup: any;\n/**\n * Defines the collection of indexes of the overall summary columns in waterfall charts.\n */\npublic sumIndexes: any;\n/**\n * Defines the visual representation of the summaries in waterfall charts.\n */\npublic summaryFillColor: any;\n/**\n * user can format now each series tooltip format separately.\n */\npublic tooltipFormat: any;\n/**\n * The provided value will be considered as a Tooltip name\n */\npublic tooltipMappingName: any;\n/**\n * Defines the collection of trendlines that are used to predict the trend\n */\npublic trendlines: any;\n/**\n * Specifies the visibility of series.\n */\npublic visible: any;\n/**\n * Defines the data source field that contains the volume value in candle charts \n * It is applicable for financial series and technical indicators\n */\npublic volume: any;\n/**\n * The stroke width for the series that is applicable only for `Line` type series. \n * It also represents the stroke width of the signal lines in technical indicators.\n */\npublic width: any;\n/**\n * The name of the horizontal axis associated with the series. It requires `axes` of the chart. \n * It is applicable for series and technical indicators \n * \n */\npublic xAxisName: any;\n/**\n * The DataSource field that contains the x value. \n * It is applicable for series and technical indicators\n */\npublic xName: any;\n/**\n * The name of the vertical axis associated with the series. It requires `axes` of the chart. \n * It is applicable for series and technical indicators \n * \n */\npublic yAxisName: any;\n/**\n * The DataSource field that contains the y value.\n */\npublic yName: any;\n/**\n * The z order of the series.\n */\npublic zOrder: any;\n    \n    @Template()\npublic dataLabel_template: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-series-collection>e-series',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n        childTrendlines: new ContentChild(TrendlinesDirective), \n        childSegments: new ContentChild(SegmentsDirective)\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'dataLabel_template': [{ type: ContentChild, args: ['dataLabelTemplate', ] },],\n};\n}\n\nfunction SeriesDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nSeriesDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSeriesDirective.ctorParameters;\n/** @type {?} */\nSeriesDirective.propDecorators;\n/** @type {?} */\nSeriesDirective.prototype.childTrendlines;\n/** @type {?} */\nSeriesDirective.prototype.childSegments;\n/** @type {?} */\nSeriesDirective.prototype.tags;\n/**\n * The type of the series are \n * * Line \n * * Column \n * * Area \n * * Bar \n * * Histogram \n * * StackingColumn \n * * StackingArea \n * * StackingBar \n * * StepLine \n * * StepArea \n * * Scatter \n * * Spline \n * * StackingColumn100 \n * * StackingBar100 \n * * StackingArea100 \n * * RangeColumn \n * * Hilo \n * * HiloOpenClose \n * * Waterfall \n * * RangeArea \n * * Bubble \n * * Candle \n * * Polar \n * * Radar \n * * BoxAndWhisker \n * * Pareto\n * @type {?}\n */\nSeriesDirective.prototype.type;\n/**\n * Options to customizing animation for the series.\n * @type {?}\n */\nSeriesDirective.prototype.animation;\n/**\n * This property is used in financial charts to visualize the price movements in stock. \n * It defines the color of the candle/point, when the opening price is less than the closing price.\n * @type {?}\n */\nSeriesDirective.prototype.bearFillColor;\n/**\n * The bin interval of each histogram points.\n * @type {?}\n */\nSeriesDirective.prototype.binInterval;\n/**\n * Options to customizing the border of the series. This is applicable only for `Column` and `Bar` type series.\n * @type {?}\n */\nSeriesDirective.prototype.border;\n/**\n * The mode of the box and whisker char series. They are, \n * Exclusive \n * Inclusive \n * Normal\n * @type {?}\n */\nSeriesDirective.prototype.boxPlotMode;\n/**\n * This property is used in financial charts to visualize the price movements in stock. \n * It defines the color of the candle/point, when the opening price is higher than the closing price.\n * @type {?}\n */\nSeriesDirective.prototype.bullFillColor;\n/**\n * It defines tension of cardinal spline types\n * @type {?}\n */\nSeriesDirective.prototype.cardinalSplineTension;\n/**\n * The DataSource field that contains the close value of y \n * It is applicable for series and technical indicators\n * @type {?}\n */\nSeriesDirective.prototype.close;\n/**\n * To render the column series points with particular column spacing. It takes value from 0 - 1.\n * @type {?}\n */\nSeriesDirective.prototype.columnSpacing;\n/**\n * To render the column series points with particular column width. If the series type is histogram the \n * default value is 1 otherwise 0.7.\n * @type {?}\n */\nSeriesDirective.prototype.columnWidth;\n/**\n * Defines the appearance of line connecting adjacent points in waterfall charts.\n * @type {?}\n */\nSeriesDirective.prototype.connector;\n/**\n * To render the column series points with particular rounded corner.\n * @type {?}\n */\nSeriesDirective.prototype.cornerRadius;\n/**\n * Defines the pattern of dashes and gaps to stroke the lines in `Line` type series.\n * @type {?}\n */\nSeriesDirective.prototype.dashArray;\n/**\n * Specifies the DataSource for the series. It can be an array of JSON objects or an instance of DataManager. \n * \n * @type {?}\n */\nSeriesDirective.prototype.dataSource;\n/**\n * Options to customize the drag settings for series\n * @type {?}\n */\nSeriesDirective.prototype.dragSettings;\n/**\n * Type of series to be drawn in radar or polar series. They are \n *  'Line' \n *  'Column' \n *  'Area' \n *  'Scatter' \n *  'Spline' \n *  'StackingColumn' \n *  'StackingArea' \n *  'RangeColumn' \n *  'SplineArea'\n * @type {?}\n */\nSeriesDirective.prototype.drawType;\n/**\n * options to customize the empty points in series\n * @type {?}\n */\nSeriesDirective.prototype.emptyPointSettings;\n/**\n * This property used to improve chart performance via data mapping for series dataSource.\n * @type {?}\n */\nSeriesDirective.prototype.enableComplexProperty;\n/**\n * This property is applicable for candle series. \n * It enables/disables to visually compare the current values with the previous values in stock.\n * @type {?}\n */\nSeriesDirective.prototype.enableSolidCandles;\n/**\n * If set true, the Tooltip for series will be visible.\n * @type {?}\n */\nSeriesDirective.prototype.enableTooltip;\n/**\n * Options for displaying and customizing error bar for individual point in a series.\n * @type {?}\n */\nSeriesDirective.prototype.errorBar;\n/**\n * The fill color for the series that accepts value in hex and rgba as a valid CSS color string. \n * It also represents the color of the signal lines in technical indicators. \n * For technical indicators, the default value is 'blue' and for series, it has null.\n * @type {?}\n */\nSeriesDirective.prototype.fill;\n/**\n * The DataSource field that contains the high value of y \n * It is applicable for series and technical indicators\n * @type {?}\n */\nSeriesDirective.prototype.high;\n/**\n * Defines the collection of indexes of the intermediate summary columns in waterfall charts.\n * @type {?}\n */\nSeriesDirective.prototype.intermediateSumIndexes;\n/**\n * Specifies whether to join start and end point of a line/area series used in polar/radar chart to form a closed path.\n * @type {?}\n */\nSeriesDirective.prototype.isClosed;\n/**\n * The shape of the legend. Each series has its own legend shape. They are, \n * * Circle \n * * Rectangle \n * * Triangle \n * * Diamond \n * * Cross \n * * HorizontalLine \n * * VerticalLine \n * * Pentagon \n * * InvertedTriangle \n * * SeriesType\n * @type {?}\n */\nSeriesDirective.prototype.legendShape;\n/**\n * The DataSource field that contains the low value of y \n * It is applicable for series and technical indicators\n * @type {?}\n */\nSeriesDirective.prototype.low;\n/**\n * Options for displaying and customizing markers for individual points in a series.\n * @type {?}\n */\nSeriesDirective.prototype.marker;\n/**\n * Maximum radius\n * @type {?}\n */\nSeriesDirective.prototype.maxRadius;\n/**\n * Minimum radius\n * @type {?}\n */\nSeriesDirective.prototype.minRadius;\n/**\n * The name of the series visible in legend.\n * @type {?}\n */\nSeriesDirective.prototype.name;\n/**\n * Defines the visual representation of the negative changes in waterfall charts.\n * @type {?}\n */\nSeriesDirective.prototype.negativeFillColor;\n/**\n * The opacity of the series.\n * @type {?}\n */\nSeriesDirective.prototype.opacity;\n/**\n * The DataSource field that contains the open value of y \n * It is applicable for series and technical indicators\n * @type {?}\n */\nSeriesDirective.prototype.open;\n/**\n * The DataSource field that contains the color value of point \n * It is applicable for series\n * @type {?}\n */\nSeriesDirective.prototype.pointColorMapping;\n/**\n * Specifies query to select data from DataSource. This property is applicable only when the DataSource is `ej.DataManager`.\n * @type {?}\n */\nSeriesDirective.prototype.query;\n/**\n * Defines the axis, based on which the line series will be split.\n * @type {?}\n */\nSeriesDirective.prototype.segmentAxis;\n/**\n * Defines the collection of regions that helps to differentiate a line series.\n * @type {?}\n */\nSeriesDirective.prototype.segments;\n/**\n * Custom style for the selected series or points.\n * @type {?}\n */\nSeriesDirective.prototype.selectionStyle;\n/**\n * If set true, the mean value for box and whisker will be visible.\n * @type {?}\n */\nSeriesDirective.prototype.showMean;\n/**\n * The normal distribution of histogram series.\n * @type {?}\n */\nSeriesDirective.prototype.showNormalDistribution;\n/**\n * The DataSource field that contains the size value of y\n * @type {?}\n */\nSeriesDirective.prototype.size;\n/**\n * Defines type of spline to be rendered.\n * @type {?}\n */\nSeriesDirective.prototype.splineType;\n/**\n * This property allows grouping series in `stacked column / bar` charts. \n * Any string value can be provided to the stackingGroup property. \n * If any two or above series have the same value, those series will be grouped together.\n * @type {?}\n */\nSeriesDirective.prototype.stackingGroup;\n/**\n * Defines the collection of indexes of the overall summary columns in waterfall charts.\n * @type {?}\n */\nSeriesDirective.prototype.sumIndexes;\n/**\n * Defines the visual representation of the summaries in waterfall charts.\n * @type {?}\n */\nSeriesDirective.prototype.summaryFillColor;\n/**\n * user can format now each series tooltip format separately.\n * @type {?}\n */\nSeriesDirective.prototype.tooltipFormat;\n/**\n * The provided value will be considered as a Tooltip name\n * @type {?}\n */\nSeriesDirective.prototype.tooltipMappingName;\n/**\n * Defines the collection of trendlines that are used to predict the trend\n * @type {?}\n */\nSeriesDirective.prototype.trendlines;\n/**\n * Specifies the visibility of series.\n * @type {?}\n */\nSeriesDirective.prototype.visible;\n/**\n * Defines the data source field that contains the volume value in candle charts \n * It is applicable for financial series and technical indicators\n * @type {?}\n */\nSeriesDirective.prototype.volume;\n/**\n * The stroke width for the series that is applicable only for `Line` type series. \n * It also represents the stroke width of the signal lines in technical indicators.\n * @type {?}\n */\nSeriesDirective.prototype.width;\n/**\n * The name of the horizontal axis associated with the series. It requires `axes` of the chart. \n * It is applicable for series and technical indicators \n * \n * @type {?}\n */\nSeriesDirective.prototype.xAxisName;\n/**\n * The DataSource field that contains the x value. \n * It is applicable for series and technical indicators\n * @type {?}\n */\nSeriesDirective.prototype.xName;\n/**\n * The name of the vertical axis associated with the series. It requires `axes` of the chart. \n * It is applicable for series and technical indicators \n * \n * @type {?}\n */\nSeriesDirective.prototype.yAxisName;\n/**\n * The DataSource field that contains the y value.\n * @type {?}\n */\nSeriesDirective.prototype.yName;\n/**\n * The z order of the series.\n * @type {?}\n */\nSeriesDirective.prototype.zOrder;\n/** @type {?} */\nSeriesDirective.prototype.dataLabel_template;\n/** @type {?} */\nSeriesDirective.prototype.viewContainerRef;\n}\n\n/**\n * Series Array Directive\n */\nexport class SeriesCollectionDirective extends ArrayBase<SeriesCollectionDirective> {\nconstructor() {\n        super('series');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ej-chart>e-series-collection',\n    queries: {\n        children: new ContentChildren(SeriesDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SeriesCollectionDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nSeriesCollectionDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSeriesCollectionDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['border', 'color', 'dashArray', 'end', 'horizontalAlignment', 'isRepeat', 'isSegmented', 'opacity', 'repeatEvery', 'repeatUntil', 'rotation', 'segmentAxisName', 'segmentEnd', 'segmentStart', 'size', 'sizeType', 'start', 'startFromAxis', 'text', 'textStyle', 'verticalAlignment', 'visible', 'zIndex'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * StripLine Directive\n * ```html\n * <e-axis>\n * <e-striplines>\n * <e-stripline></e-stripline>\n * </e-striplines>\n * </e-axis>\n * ```\n */\nexport class StripLineDirective extends ComplexBase<StripLineDirective> {\n/**\n * Border of the strip line.\n */\npublic border: any;\n/**\n * Color of the strip line.\n */\npublic color: any;\n/**\n * Dash Array of the strip line.\n */\npublic dashArray: any;\n/**\n * End value of the strip line.\n */\npublic end: any;\n/**\n * Defines the position of the strip line text horizontally. They are, \n * * Start: Places the strip line text at the start. \n * * Middle: Places the strip line text in the middle. \n * * End: Places the strip line text at the end.\n */\npublic horizontalAlignment: any;\n/**\n * isRepeat value of the strip line.\n */\npublic isRepeat: any;\n/**\n * isSegmented value of the strip line\n */\npublic isSegmented: any;\n/**\n * Strip line Opacity\n */\npublic opacity: any;\n/**\n * repeatEvery value of the strip line.\n */\npublic repeatEvery: any;\n/**\n * repeatUntil value of the strip line.\n */\npublic repeatUntil: any;\n/**\n * The angle to which the strip line text gets rotated.\n */\npublic rotation: any;\n/**\n * segmentAxisName of the strip line.\n */\npublic segmentAxisName: any;\n/**\n * segmentEnd value of the strip line.\n */\npublic segmentEnd: any;\n/**\n * segmentStart value of the strip line.\n */\npublic segmentStart: any;\n/**\n * Size of the strip line, when it starts from the origin.\n */\npublic size: any;\n/**\n * Size type of the strip line\n */\npublic sizeType: any;\n/**\n * Start value of the strip line.\n */\npublic start: any;\n/**\n *  If set true, strip line get render from axis origin.\n */\npublic startFromAxis: any;\n/**\n * Strip line text.\n */\npublic text: any;\n/**\n * Options to customize the strip line text.\n */\npublic textStyle: any;\n/**\n * Defines the position of the strip line text vertically. They are, \n * * Start: Places the strip line text at the start. \n * * Middle: Places the strip line text in the middle. \n * * End: Places the strip line text at the end.\n */\npublic verticalAlignment: any;\n/**\n * If set true, strip line for axis renders.\n */\npublic visible: any;\n/**\n * Specifies the order of the strip line. They are, \n * * Behind: Places the strip line behind the series elements. \n * * Over: Places the strip line over the series elements.\n */\npublic zIndex: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-axis>e-striplines>e-stripline',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction StripLineDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nStripLineDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStripLineDirective.ctorParameters;\n/**\n * Border of the strip line.\n * @type {?}\n */\nStripLineDirective.prototype.border;\n/**\n * Color of the strip line.\n * @type {?}\n */\nStripLineDirective.prototype.color;\n/**\n * Dash Array of the strip line.\n * @type {?}\n */\nStripLineDirective.prototype.dashArray;\n/**\n * End value of the strip line.\n * @type {?}\n */\nStripLineDirective.prototype.end;\n/**\n * Defines the position of the strip line text horizontally. They are, \n * * Start: Places the strip line text at the start. \n * * Middle: Places the strip line text in the middle. \n * * End: Places the strip line text at the end.\n * @type {?}\n */\nStripLineDirective.prototype.horizontalAlignment;\n/**\n * isRepeat value of the strip line.\n * @type {?}\n */\nStripLineDirective.prototype.isRepeat;\n/**\n * isSegmented value of the strip line\n * @type {?}\n */\nStripLineDirective.prototype.isSegmented;\n/**\n * Strip line Opacity\n * @type {?}\n */\nStripLineDirective.prototype.opacity;\n/**\n * repeatEvery value of the strip line.\n * @type {?}\n */\nStripLineDirective.prototype.repeatEvery;\n/**\n * repeatUntil value of the strip line.\n * @type {?}\n */\nStripLineDirective.prototype.repeatUntil;\n/**\n * The angle to which the strip line text gets rotated.\n * @type {?}\n */\nStripLineDirective.prototype.rotation;\n/**\n * segmentAxisName of the strip line.\n * @type {?}\n */\nStripLineDirective.prototype.segmentAxisName;\n/**\n * segmentEnd value of the strip line.\n * @type {?}\n */\nStripLineDirective.prototype.segmentEnd;\n/**\n * segmentStart value of the strip line.\n * @type {?}\n */\nStripLineDirective.prototype.segmentStart;\n/**\n * Size of the strip line, when it starts from the origin.\n * @type {?}\n */\nStripLineDirective.prototype.size;\n/**\n * Size type of the strip line\n * @type {?}\n */\nStripLineDirective.prototype.sizeType;\n/**\n * Start value of the strip line.\n * @type {?}\n */\nStripLineDirective.prototype.start;\n/**\n *  If set true, strip line get render from axis origin.\n * @type {?}\n */\nStripLineDirective.prototype.startFromAxis;\n/**\n * Strip line text.\n * @type {?}\n */\nStripLineDirective.prototype.text;\n/**\n * Options to customize the strip line text.\n * @type {?}\n */\nStripLineDirective.prototype.textStyle;\n/**\n * Defines the position of the strip line text vertically. They are, \n * * Start: Places the strip line text at the start. \n * * Middle: Places the strip line text in the middle. \n * * End: Places the strip line text at the end.\n * @type {?}\n */\nStripLineDirective.prototype.verticalAlignment;\n/**\n * If set true, strip line for axis renders.\n * @type {?}\n */\nStripLineDirective.prototype.visible;\n/**\n * Specifies the order of the strip line. They are, \n * * Behind: Places the strip line behind the series elements. \n * * Over: Places the strip line over the series elements.\n * @type {?}\n */\nStripLineDirective.prototype.zIndex;\n/** @type {?} */\nStripLineDirective.prototype.viewContainerRef;\n}\n\n/**\n * StripLine Array Directive\n */\nexport class StripLinesDirective extends ArrayBase<StripLinesDirective> {\nconstructor() {\n        super('striplines');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-axis>e-striplines',\n    queries: {\n        children: new ContentChildren(StripLineDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction StripLinesDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nStripLinesDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStripLinesDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['customAttributes', 'end', 'maximumTextWidth', 'start', 'text', 'type'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * MultiLevelLabels Directive\n * ```html\n * <e-multilevellabels>\n * <e-multilevellabel>\n * <e-Categories>\n * <e-Category>\n * </e-Category>\n * </e-Categories>\n * </e-multilevellabel>\n * </e-multilevellabels>\n * ```\n */\nexport class CategoryDirective extends ComplexBase<CategoryDirective> {\n/**\n * Border type for labels \n * * Rectangle \n * * Without Top Border \n * * Without Top and BottomBorder \n * * Without Border \n * * Brace \n * * CurlyBrace\n */\npublic type: any;\n/**\n * multi level labels custom data.\n */\npublic customAttributes: any;\n/**\n * End value of the multi level labels\n */\npublic end: any;\n/**\n * Maximum width of the text for multi level labels.\n */\npublic maximumTextWidth: any;\n/**\n * Start value of the multi level labels\n */\npublic start: any;\n/**\n * multi level labels text.\n */\npublic text: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-multilevellabel>e-categories>e-category',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction CategoryDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nCategoryDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCategoryDirective.ctorParameters;\n/**\n * Border type for labels \n * * Rectangle \n * * Without Top Border \n * * Without Top and BottomBorder \n * * Without Border \n * * Brace \n * * CurlyBrace\n * @type {?}\n */\nCategoryDirective.prototype.type;\n/**\n * multi level labels custom data.\n * @type {?}\n */\nCategoryDirective.prototype.customAttributes;\n/**\n * End value of the multi level labels\n * @type {?}\n */\nCategoryDirective.prototype.end;\n/**\n * Maximum width of the text for multi level labels.\n * @type {?}\n */\nCategoryDirective.prototype.maximumTextWidth;\n/**\n * Start value of the multi level labels\n * @type {?}\n */\nCategoryDirective.prototype.start;\n/**\n * multi level labels text.\n * @type {?}\n */\nCategoryDirective.prototype.text;\n/** @type {?} */\nCategoryDirective.prototype.viewContainerRef;\n}\n\n/**\n * Category Array Directive\n */\nexport class CategoriesDirective extends ArrayBase<CategoriesDirective> {\nconstructor() {\n        super('categories');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-multilevellabel>e-categories',\n    queries: {\n        children: new ContentChildren(CategoryDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CategoriesDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nCategoriesDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCategoriesDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren, ContentChild } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\nimport { CategoriesDirective } from './categories.directive';\n\nlet /** @type {?} */ input: string[] = ['alignment', 'border', 'categories', 'overflow', 'textStyle'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * MultiLevelLabel Directive\n * ```html\n * <e-axis>\n * <e-multilevellabels>\n * <e-multilevellabel></e-multilevellabel>\n * </e-multilevellabels>\n * </e-axis>\n * ```\n */\nexport class MultiLevelLabelDirective extends ComplexBase<MultiLevelLabelDirective> {\npublic childCategories: any;\npublic tags: string[] = ['categories'];\n/**\n * Defines the position of the multi level labels. They are, \n * * Near: Places the multi level labels at Near. \n * * Center: Places the multi level labels at Center. \n * * Far: Places the multi level labels at Far.\n */\npublic alignment: any;\n/**\n * Border of the multi level labels.\n */\npublic border: any;\n/**\n * multi level categories for multi level labels.\n */\npublic categories: any;\n/**\n * Defines the textOverFlow for multi level labels. They are, \n * * Trim: Trim textOverflow for multi level labels. \n * * Wrap: Wrap textOverflow for multi level labels. \n * * none: None textOverflow for multi level labels.\n */\npublic overflow: any;\n/**\n * Options to customize the multi level labels.\n */\npublic textStyle: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-axis>e-multilevellabels>e-multilevellabel',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n        childCategories: new ContentChild(CategoriesDirective)\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction MultiLevelLabelDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nMultiLevelLabelDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMultiLevelLabelDirective.ctorParameters;\n/** @type {?} */\nMultiLevelLabelDirective.prototype.childCategories;\n/** @type {?} */\nMultiLevelLabelDirective.prototype.tags;\n/**\n * Defines the position of the multi level labels. They are, \n * * Near: Places the multi level labels at Near. \n * * Center: Places the multi level labels at Center. \n * * Far: Places the multi level labels at Far.\n * @type {?}\n */\nMultiLevelLabelDirective.prototype.alignment;\n/**\n * Border of the multi level labels.\n * @type {?}\n */\nMultiLevelLabelDirective.prototype.border;\n/**\n * multi level categories for multi level labels.\n * @type {?}\n */\nMultiLevelLabelDirective.prototype.categories;\n/**\n * Defines the textOverFlow for multi level labels. They are, \n * * Trim: Trim textOverflow for multi level labels. \n * * Wrap: Wrap textOverflow for multi level labels. \n * * none: None textOverflow for multi level labels.\n * @type {?}\n */\nMultiLevelLabelDirective.prototype.overflow;\n/**\n * Options to customize the multi level labels.\n * @type {?}\n */\nMultiLevelLabelDirective.prototype.textStyle;\n/** @type {?} */\nMultiLevelLabelDirective.prototype.viewContainerRef;\n}\n\n/**\n * MultiLevelLabel Array Directive\n */\nexport class MultiLevelLabelsDirective extends ArrayBase<MultiLevelLabelsDirective> {\nconstructor() {\n        super('multilevellabels');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-axis>e-multilevellabels',\n    queries: {\n        children: new ContentChildren(MultiLevelLabelDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MultiLevelLabelsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nMultiLevelLabelsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMultiLevelLabelsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren, ContentChild } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\nimport { StripLinesDirective } from './striplines.directive';\nimport { MultiLevelLabelsDirective } from './multilevellabels.directive';\n\nlet /** @type {?} */ input: string[] = ['border', 'coefficient', 'columnIndex', 'crossesAt', 'crossesInAxis', 'crosshairTooltip', 'description', 'desiredIntervals', 'edgeLabelPlacement', 'enableAutoIntervalOnZooming', 'enableTrim', 'interval', 'intervalType', 'isIndexed', 'isInversed', 'labelFormat', 'labelIntersectAction', 'labelPlacement', 'labelPosition', 'labelRotation', 'labelStyle', 'lineStyle', 'logBase', 'majorGridLines', 'majorTickLines', 'maximum', 'maximumLabelWidth', 'maximumLabels', 'minimum', 'minorGridLines', 'minorTickLines', 'minorTicksPerInterval', 'multiLevelLabels', 'name', 'opposedPosition', 'placeNextToAxisLine', 'plotOffset', 'plotOffsetBottom', 'plotOffsetLeft', 'plotOffsetRight', 'plotOffsetTop', 'rangePadding', 'rowIndex', 'scrollbarSettings', 'skeleton', 'skeletonType', 'span', 'startAngle', 'stripLines', 'tabIndex', 'tickPosition', 'title', 'titleStyle', 'valueType', 'visible', 'zoomFactor', 'zoomPosition'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Axis Directive\n * ```html\n * <e-axes><e-axis></e-axis></e-axes>\n * ```\n */\nexport class AxisDirective extends ComplexBase<AxisDirective> {\npublic childStripLines: any;\npublic childMultiLevelLabels: any;\npublic tags: string[] = ['stripLines', 'multiLevelLabels'];\n/**\n * Border of the multi level labels.\n */\npublic border: any;\n/**\n * The polar radar radius position.\n */\npublic coefficient: any;\n/**\n * Specifies the index of the column where the axis is associated, \n * when the chart area is divided into multiple plot areas by using `columns`. \n * \n */\npublic columnIndex: any;\n/**\n * Specifies the value at which the axis line has to be intersect with the vertical axis or vice versa.\n */\npublic crossesAt: any;\n/**\n * Specifies axis name with which the axis line has to be crossed\n */\npublic crossesInAxis: any;\n/**\n * Options to customize the crosshair ToolTip.\n */\npublic crosshairTooltip: any;\n/**\n * Description for axis and its element.\n */\npublic description: any;\n/**\n * With this property, you can request axis to calculate intervals approximately equal to your specified interval.\n */\npublic desiredIntervals: any;\n/**\n * Specifies the position of labels at the edge of the axis.They are, \n * * None: No action will be performed. \n * * Hide: Edge label will be hidden. \n * * Shift: Shifts the edge labels.\n */\npublic edgeLabelPlacement: any;\n/**\n * If set to true, axis interval will be calculated automatically with respect to the zoomed range.\n */\npublic enableAutoIntervalOnZooming: any;\n/**\n * Specifies the Trim property for an axis.\n */\npublic enableTrim: any;\n/**\n * Specifies the interval for an axis.\n */\npublic interval: any;\n/**\n * Specifies the types like `Years`, `Months`, `Days`, `Hours`, `Minutes`, `Seconds` in date time axis.They are, \n * * Auto: Defines the interval of the axis based on data. \n * * Years: Defines the interval of the axis in years. \n * * Months: Defines the interval of the axis in months. \n * * Days: Defines the interval of the axis in days. \n * * Hours: Defines the interval of the axis in hours. \n * * Minutes: Defines the interval of the axis in minutes.\n */\npublic intervalType: any;\n/**\n * Specifies indexed category  axis.\n */\npublic isIndexed: any;\n/**\n * It specifies whether the axis to be rendered in inversed manner or not.\n */\npublic isInversed: any;\n/**\n * Used to format the axis label that accepts any global string format like 'C', 'n1', 'P' etc. \n * It also accepts placeholder like '{value}°C' in which value represent the axis label, e.g, 20°C.\n */\npublic labelFormat: any;\n/**\n * Specifies the actions like `None`, `Hide`, `Trim`, `Wrap`, `MultipleRows`, `Rotate45`, and `Rotate90` \n * when the axis labels intersect with each other.They are, \n * * None: Shows all the labels. \n * * Hide: Hides the label when it intersects. \n * * Trim: Trim the label when it intersects. \n * * Wrap: Wrap the label when it intersects. \n * * MultipleRows: Shows the label in MultipleRows when it intersects. \n * * Rotate45: Rotates the label to 45 degree when it intersects. \n * * Rotate90: Rotates the label to 90 degree when it intersects.\n */\npublic labelIntersectAction: any;\n/**\n * Specifies the placement of a label for category axis. They are, \n * * betweenTicks: Renders the label between the ticks. \n * * onTicks: Renders the label on the ticks.\n */\npublic labelPlacement: any;\n/**\n * Specifies the placement of a labels to the axis line. They are, \n * * inside: Renders the labels inside to the axis line. \n * * outside: Renders the labels outside to the axis line.\n */\npublic labelPosition: any;\n/**\n * The angle to which the axis label gets rotated.\n */\npublic labelRotation: any;\n/**\n * Options to customize the axis label.\n */\npublic labelStyle: any;\n/**\n * Options for customizing axis lines.\n */\npublic lineStyle: any;\n/**\n * The base value for logarithmic axis. It requires `valueType` to be `Logarithmic`.\n */\npublic logBase: any;\n/**\n * Options for customizing major grid lines.\n */\npublic majorGridLines: any;\n/**\n * Options for customizing major tick lines.\n */\npublic majorTickLines: any;\n/**\n * Specifies the maximum range of an axis.\n */\npublic maximum: any;\n/**\n * Specifies the maximum width of an axis label.\n */\npublic maximumLabelWidth: any;\n/**\n * The maximum number of label count per 100 pixels with respect to the axis length.\n */\npublic maximumLabels: any;\n/**\n * Specifies the minimum range of an axis.\n */\npublic minimum: any;\n/**\n * Options for customizing minor grid lines.\n */\npublic minorGridLines: any;\n/**\n * Options for customizing minor tick lines.\n */\npublic minorTickLines: any;\n/**\n * Specifies the number of minor ticks per interval.\n */\npublic minorTicksPerInterval: any;\n/**\n * Specifies the multi level labels collection for the axis\n */\npublic multiLevelLabels: any;\n/**\n * Unique identifier of an axis. \n * To associate an axis with the series, set this name to the xAxisName/yAxisName properties of the series.\n */\npublic name: any;\n/**\n * If set to true, the axis will render at the opposite side of its default position.\n */\npublic opposedPosition: any;\n/**\n * Specifies whether axis elements like axis labels, axis title, etc has to be crossed with axis line\n */\npublic placeNextToAxisLine: any;\n/**\n * Left and right padding for the plot area in pixels.\n */\npublic plotOffset: any;\n/**\n * Bottom padding for the plot area in pixels.\n */\npublic plotOffsetBottom: any;\n/**\n * Left padding for the plot area in pixels.\n */\npublic plotOffsetLeft: any;\n/**\n * Right padding for the plot area in pixels.\n */\npublic plotOffsetRight: any;\n/**\n * Top padding for the plot area in pixels.\n */\npublic plotOffsetTop: any;\n/**\n * Specifies the padding for the axis range in terms of interval.They are, \n * * none: Padding cannot be applied to the axis. \n * * normal: Padding is applied to the axis based on the range calculation. \n * * additional: Interval of the axis is added as padding to the minimum and maximum values of the range. \n * * round: Axis range is rounded to the nearest possible value divided by the interval.\n */\npublic rangePadding: any;\n/**\n * Specifies the index of the row where the axis is associated, when the chart area is divided into multiple plot areas by using `rows`. \n * \n */\npublic rowIndex: any;\n/**\n * Option to customize scrollbar with lazy loading\n */\npublic scrollbarSettings: any;\n/**\n * Specifies the skeleton format in which the dateTime format will process.\n */\npublic skeleton: any;\n/**\n * It specifies the type of format to be used in dateTime format process.\n */\npublic skeletonType: any;\n/**\n * Specifies the number of `columns` or `rows` an axis has to span horizontally or vertically.\n */\npublic span: any;\n/**\n * The start angle for the series.\n */\npublic startAngle: any;\n/**\n * Specifies the stripLine collection for the axis\n */\npublic stripLines: any;\n/**\n * TabIndex value for the axis.\n */\npublic tabIndex: any;\n/**\n * Specifies the placement of a ticks to the axis line. They are, \n * * inside: Renders the ticks inside to the axis line. \n * * outside: Renders the ticks outside to the axis line.\n */\npublic tickPosition: any;\n/**\n * Specifies the title of an axis.\n */\npublic title: any;\n/**\n * Options for customizing the axis title.\n */\npublic titleStyle: any;\n/**\n * Specifies the type of data the axis is handling. \n * * Double:  Renders a numeric axis. \n * * DateTime: Renders a dateTime axis. \n * * Category: Renders a category axis. \n * * Logarithmic: Renders a log axis.\n */\npublic valueType: any;\n/**\n * If set to true, axis label will be visible.\n */\npublic visible: any;\n/**\n * The axis is scaled by this factor. When zoomFactor is 0.5, the chart is scaled by 200% along this axis. Value ranges from 0 to 1.\n */\npublic zoomFactor: any;\n/**\n * Position of the zoomed axis. Value ranges from 0 to 1.\n */\npublic zoomPosition: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-axes>e-axis',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n        childStripLines: new ContentChild(StripLinesDirective), \n        childMultiLevelLabels: new ContentChild(MultiLevelLabelsDirective)\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction AxisDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nAxisDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAxisDirective.ctorParameters;\n/** @type {?} */\nAxisDirective.prototype.childStripLines;\n/** @type {?} */\nAxisDirective.prototype.childMultiLevelLabels;\n/** @type {?} */\nAxisDirective.prototype.tags;\n/**\n * Border of the multi level labels.\n * @type {?}\n */\nAxisDirective.prototype.border;\n/**\n * The polar radar radius position.\n * @type {?}\n */\nAxisDirective.prototype.coefficient;\n/**\n * Specifies the index of the column where the axis is associated, \n * when the chart area is divided into multiple plot areas by using `columns`. \n * \n * @type {?}\n */\nAxisDirective.prototype.columnIndex;\n/**\n * Specifies the value at which the axis line has to be intersect with the vertical axis or vice versa.\n * @type {?}\n */\nAxisDirective.prototype.crossesAt;\n/**\n * Specifies axis name with which the axis line has to be crossed\n * @type {?}\n */\nAxisDirective.prototype.crossesInAxis;\n/**\n * Options to customize the crosshair ToolTip.\n * @type {?}\n */\nAxisDirective.prototype.crosshairTooltip;\n/**\n * Description for axis and its element.\n * @type {?}\n */\nAxisDirective.prototype.description;\n/**\n * With this property, you can request axis to calculate intervals approximately equal to your specified interval.\n * @type {?}\n */\nAxisDirective.prototype.desiredIntervals;\n/**\n * Specifies the position of labels at the edge of the axis.They are, \n * * None: No action will be performed. \n * * Hide: Edge label will be hidden. \n * * Shift: Shifts the edge labels.\n * @type {?}\n */\nAxisDirective.prototype.edgeLabelPlacement;\n/**\n * If set to true, axis interval will be calculated automatically with respect to the zoomed range.\n * @type {?}\n */\nAxisDirective.prototype.enableAutoIntervalOnZooming;\n/**\n * Specifies the Trim property for an axis.\n * @type {?}\n */\nAxisDirective.prototype.enableTrim;\n/**\n * Specifies the interval for an axis.\n * @type {?}\n */\nAxisDirective.prototype.interval;\n/**\n * Specifies the types like `Years`, `Months`, `Days`, `Hours`, `Minutes`, `Seconds` in date time axis.They are, \n * * Auto: Defines the interval of the axis based on data. \n * * Years: Defines the interval of the axis in years. \n * * Months: Defines the interval of the axis in months. \n * * Days: Defines the interval of the axis in days. \n * * Hours: Defines the interval of the axis in hours. \n * * Minutes: Defines the interval of the axis in minutes.\n * @type {?}\n */\nAxisDirective.prototype.intervalType;\n/**\n * Specifies indexed category  axis.\n * @type {?}\n */\nAxisDirective.prototype.isIndexed;\n/**\n * It specifies whether the axis to be rendered in inversed manner or not.\n * @type {?}\n */\nAxisDirective.prototype.isInversed;\n/**\n * Used to format the axis label that accepts any global string format like 'C', 'n1', 'P' etc. \n * It also accepts placeholder like '{value}°C' in which value represent the axis label, e.g, 20°C.\n * @type {?}\n */\nAxisDirective.prototype.labelFormat;\n/**\n * Specifies the actions like `None`, `Hide`, `Trim`, `Wrap`, `MultipleRows`, `Rotate45`, and `Rotate90` \n * when the axis labels intersect with each other.They are, \n * * None: Shows all the labels. \n * * Hide: Hides the label when it intersects. \n * * Trim: Trim the label when it intersects. \n * * Wrap: Wrap the label when it intersects. \n * * MultipleRows: Shows the label in MultipleRows when it intersects. \n * * Rotate45: Rotates the label to 45 degree when it intersects. \n * * Rotate90: Rotates the label to 90 degree when it intersects.\n * @type {?}\n */\nAxisDirective.prototype.labelIntersectAction;\n/**\n * Specifies the placement of a label for category axis. They are, \n * * betweenTicks: Renders the label between the ticks. \n * * onTicks: Renders the label on the ticks.\n * @type {?}\n */\nAxisDirective.prototype.labelPlacement;\n/**\n * Specifies the placement of a labels to the axis line. They are, \n * * inside: Renders the labels inside to the axis line. \n * * outside: Renders the labels outside to the axis line.\n * @type {?}\n */\nAxisDirective.prototype.labelPosition;\n/**\n * The angle to which the axis label gets rotated.\n * @type {?}\n */\nAxisDirective.prototype.labelRotation;\n/**\n * Options to customize the axis label.\n * @type {?}\n */\nAxisDirective.prototype.labelStyle;\n/**\n * Options for customizing axis lines.\n * @type {?}\n */\nAxisDirective.prototype.lineStyle;\n/**\n * The base value for logarithmic axis. It requires `valueType` to be `Logarithmic`.\n * @type {?}\n */\nAxisDirective.prototype.logBase;\n/**\n * Options for customizing major grid lines.\n * @type {?}\n */\nAxisDirective.prototype.majorGridLines;\n/**\n * Options for customizing major tick lines.\n * @type {?}\n */\nAxisDirective.prototype.majorTickLines;\n/**\n * Specifies the maximum range of an axis.\n * @type {?}\n */\nAxisDirective.prototype.maximum;\n/**\n * Specifies the maximum width of an axis label.\n * @type {?}\n */\nAxisDirective.prototype.maximumLabelWidth;\n/**\n * The maximum number of label count per 100 pixels with respect to the axis length.\n * @type {?}\n */\nAxisDirective.prototype.maximumLabels;\n/**\n * Specifies the minimum range of an axis.\n * @type {?}\n */\nAxisDirective.prototype.minimum;\n/**\n * Options for customizing minor grid lines.\n * @type {?}\n */\nAxisDirective.prototype.minorGridLines;\n/**\n * Options for customizing minor tick lines.\n * @type {?}\n */\nAxisDirective.prototype.minorTickLines;\n/**\n * Specifies the number of minor ticks per interval.\n * @type {?}\n */\nAxisDirective.prototype.minorTicksPerInterval;\n/**\n * Specifies the multi level labels collection for the axis\n * @type {?}\n */\nAxisDirective.prototype.multiLevelLabels;\n/**\n * Unique identifier of an axis. \n * To associate an axis with the series, set this name to the xAxisName/yAxisName properties of the series.\n * @type {?}\n */\nAxisDirective.prototype.name;\n/**\n * If set to true, the axis will render at the opposite side of its default position.\n * @type {?}\n */\nAxisDirective.prototype.opposedPosition;\n/**\n * Specifies whether axis elements like axis labels, axis title, etc has to be crossed with axis line\n * @type {?}\n */\nAxisDirective.prototype.placeNextToAxisLine;\n/**\n * Left and right padding for the plot area in pixels.\n * @type {?}\n */\nAxisDirective.prototype.plotOffset;\n/**\n * Bottom padding for the plot area in pixels.\n * @type {?}\n */\nAxisDirective.prototype.plotOffsetBottom;\n/**\n * Left padding for the plot area in pixels.\n * @type {?}\n */\nAxisDirective.prototype.plotOffsetLeft;\n/**\n * Right padding for the plot area in pixels.\n * @type {?}\n */\nAxisDirective.prototype.plotOffsetRight;\n/**\n * Top padding for the plot area in pixels.\n * @type {?}\n */\nAxisDirective.prototype.plotOffsetTop;\n/**\n * Specifies the padding for the axis range in terms of interval.They are, \n * * none: Padding cannot be applied to the axis. \n * * normal: Padding is applied to the axis based on the range calculation. \n * * additional: Interval of the axis is added as padding to the minimum and maximum values of the range. \n * * round: Axis range is rounded to the nearest possible value divided by the interval.\n * @type {?}\n */\nAxisDirective.prototype.rangePadding;\n/**\n * Specifies the index of the row where the axis is associated, when the chart area is divided into multiple plot areas by using `rows`. \n * \n * @type {?}\n */\nAxisDirective.prototype.rowIndex;\n/**\n * Option to customize scrollbar with lazy loading\n * @type {?}\n */\nAxisDirective.prototype.scrollbarSettings;\n/**\n * Specifies the skeleton format in which the dateTime format will process.\n * @type {?}\n */\nAxisDirective.prototype.skeleton;\n/**\n * It specifies the type of format to be used in dateTime format process.\n * @type {?}\n */\nAxisDirective.prototype.skeletonType;\n/**\n * Specifies the number of `columns` or `rows` an axis has to span horizontally or vertically.\n * @type {?}\n */\nAxisDirective.prototype.span;\n/**\n * The start angle for the series.\n * @type {?}\n */\nAxisDirective.prototype.startAngle;\n/**\n * Specifies the stripLine collection for the axis\n * @type {?}\n */\nAxisDirective.prototype.stripLines;\n/**\n * TabIndex value for the axis.\n * @type {?}\n */\nAxisDirective.prototype.tabIndex;\n/**\n * Specifies the placement of a ticks to the axis line. They are, \n * * inside: Renders the ticks inside to the axis line. \n * * outside: Renders the ticks outside to the axis line.\n * @type {?}\n */\nAxisDirective.prototype.tickPosition;\n/**\n * Specifies the title of an axis.\n * @type {?}\n */\nAxisDirective.prototype.title;\n/**\n * Options for customizing the axis title.\n * @type {?}\n */\nAxisDirective.prototype.titleStyle;\n/**\n * Specifies the type of data the axis is handling. \n * * Double:  Renders a numeric axis. \n * * DateTime: Renders a dateTime axis. \n * * Category: Renders a category axis. \n * * Logarithmic: Renders a log axis.\n * @type {?}\n */\nAxisDirective.prototype.valueType;\n/**\n * If set to true, axis label will be visible.\n * @type {?}\n */\nAxisDirective.prototype.visible;\n/**\n * The axis is scaled by this factor. When zoomFactor is 0.5, the chart is scaled by 200% along this axis. Value ranges from 0 to 1.\n * @type {?}\n */\nAxisDirective.prototype.zoomFactor;\n/**\n * Position of the zoomed axis. Value ranges from 0 to 1.\n * @type {?}\n */\nAxisDirective.prototype.zoomPosition;\n/** @type {?} */\nAxisDirective.prototype.viewContainerRef;\n}\n\n/**\n * Axis Array Directive\n */\nexport class AxesDirective extends ArrayBase<AxesDirective> {\nconstructor() {\n        super('axes');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-chart>e-axes',\n    queries: {\n        children: new ContentChildren(AxisDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction AxesDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nAxesDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAxesDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['border', 'height'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Row Directive\n * ```html\n * <e-rows><e-row></e-row><e-rows>\n * ```\n */\nexport class RowDirective extends ComplexBase<RowDirective> {\n/**\n * Options to customize the border of the rows.\n */\npublic border: any;\n/**\n * The height of the row as a string accept input both as '100px' and '100%'. \n * If specified as '100%, row renders to the full height of its chart.\n */\npublic height: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-rows>e-row',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction RowDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nRowDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRowDirective.ctorParameters;\n/**\n * Options to customize the border of the rows.\n * @type {?}\n */\nRowDirective.prototype.border;\n/**\n * The height of the row as a string accept input both as '100px' and '100%'. \n * If specified as '100%, row renders to the full height of its chart.\n * @type {?}\n */\nRowDirective.prototype.height;\n/** @type {?} */\nRowDirective.prototype.viewContainerRef;\n}\n\n/**\n * Row Array Directive\n */\nexport class RowsDirective extends ArrayBase<RowsDirective> {\nconstructor() {\n        super('rows');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-chart>e-rows',\n    queries: {\n        children: new ContentChildren(RowDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction RowsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nRowsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRowsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['border', 'width'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Column Directive\n * ```html\n * <e-columns><e-column></e-column><e-columns>\n * ```\n */\nexport class ColumnDirective extends ComplexBase<ColumnDirective> {\n/**\n * Options to customize the border of the columns.\n */\npublic border: any;\n/**\n * The width of the column as a string accepts input both as like '100px' or '100%'. \n * If specified as '100%, column renders to the full width of its chart.\n */\npublic width: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-columns>e-column',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction ColumnDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nColumnDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nColumnDirective.ctorParameters;\n/**\n * Options to customize the border of the columns.\n * @type {?}\n */\nColumnDirective.prototype.border;\n/**\n * The width of the column as a string accepts input both as like '100px' or '100%'. \n * If specified as '100%, column renders to the full width of its chart.\n * @type {?}\n */\nColumnDirective.prototype.width;\n/** @type {?} */\nColumnDirective.prototype.viewContainerRef;\n}\n\n/**\n * Column Array Directive\n */\nexport class ColumnsDirective extends ArrayBase<ColumnsDirective> {\nconstructor() {\n        super('columns');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-chart>e-columns',\n    queries: {\n        children: new ContentChildren(ColumnDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ColumnsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nColumnsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nColumnsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren, ContentChild } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\nimport { Template } from '@syncfusion/ej2-angular-base';\n\n\nlet /** @type {?} */ input: string[] = ['content', 'coordinateUnits', 'description', 'horizontalAlignment', 'region', 'verticalAlignment', 'x', 'xAxisName', 'y', 'yAxisName'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Annotation Directive\n * ```html\n * <e-annotations><e-annotation></e-annotation><e-annotations>\n * ```\n */\nexport class AnnotationDirective extends ComplexBase<AnnotationDirective> {\n/**\n * Specifies the coordinate units of the annotation. They are \n * * Pixel - Annotation renders based on x and y pixel value. \n * * Point - Annotation renders based on x and y axis value.\n */\npublic coordinateUnits: any;\n/**\n * Information about annotation for assistive technology.\n */\npublic description: any;\n/**\n * Specifies the alignment of the annotation. They are \n * * Near - Align the annotation element as left side. \n * * Far - Align the annotation element as right side. \n * * Center - Align the annotation element as mid point.\n */\npublic horizontalAlignment: any;\n/**\n * Specifies the regions of the annotation. They are \n * * Chart - Annotation renders based on chart coordinates. \n * * Series - Annotation renders based on series coordinates.\n */\npublic region: any;\n/**\n * Specifies the position of the annotation. They are \n * * Top - Align the annotation element as top side. \n * * Bottom - Align the annotation element as bottom side. \n * * Middle - Align the annotation element as mid point.\n */\npublic verticalAlignment: any;\n/**\n * if set coordinateUnit as `Pixel` X specifies the axis value \n * else is specifies pixel or percentage of coordinate\n */\npublic x: any;\n/**\n * The name of horizontal axis associated with the annotation. \n * It requires `axes` of chart.\n */\npublic xAxisName: any;\n/**\n * if set coordinateUnit as `Pixel` Y specifies the axis value \n * else is specifies pixel or percentage of coordinate\n */\npublic y: any;\n/**\n * The name of vertical axis associated with the annotation. \n * It requires `axes` of chart.\n */\npublic yAxisName: any;\n/**\n * Content of the annotation, which accepts the id of the custom element.\n */\n@Template()\n    public content: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-annotations>e-annotation',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'content': [{ type: ContentChild, args: ['content', ] },],\n};\n}\n\nfunction AnnotationDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nAnnotationDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAnnotationDirective.ctorParameters;\n/** @type {?} */\nAnnotationDirective.propDecorators;\n/**\n * Specifies the coordinate units of the annotation. They are \n * * Pixel - Annotation renders based on x and y pixel value. \n * * Point - Annotation renders based on x and y axis value.\n * @type {?}\n */\nAnnotationDirective.prototype.coordinateUnits;\n/**\n * Information about annotation for assistive technology.\n * @type {?}\n */\nAnnotationDirective.prototype.description;\n/**\n * Specifies the alignment of the annotation. They are \n * * Near - Align the annotation element as left side. \n * * Far - Align the annotation element as right side. \n * * Center - Align the annotation element as mid point.\n * @type {?}\n */\nAnnotationDirective.prototype.horizontalAlignment;\n/**\n * Specifies the regions of the annotation. They are \n * * Chart - Annotation renders based on chart coordinates. \n * * Series - Annotation renders based on series coordinates.\n * @type {?}\n */\nAnnotationDirective.prototype.region;\n/**\n * Specifies the position of the annotation. They are \n * * Top - Align the annotation element as top side. \n * * Bottom - Align the annotation element as bottom side. \n * * Middle - Align the annotation element as mid point.\n * @type {?}\n */\nAnnotationDirective.prototype.verticalAlignment;\n/**\n * if set coordinateUnit as `Pixel` X specifies the axis value \n * else is specifies pixel or percentage of coordinate\n * @type {?}\n */\nAnnotationDirective.prototype.x;\n/**\n * The name of horizontal axis associated with the annotation. \n * It requires `axes` of chart.\n * @type {?}\n */\nAnnotationDirective.prototype.xAxisName;\n/**\n * if set coordinateUnit as `Pixel` Y specifies the axis value \n * else is specifies pixel or percentage of coordinate\n * @type {?}\n */\nAnnotationDirective.prototype.y;\n/**\n * The name of vertical axis associated with the annotation. \n * It requires `axes` of chart.\n * @type {?}\n */\nAnnotationDirective.prototype.yAxisName;\n/**\n * Content of the annotation, which accepts the id of the custom element.\n * @type {?}\n */\nAnnotationDirective.prototype.content;\n/** @type {?} */\nAnnotationDirective.prototype.viewContainerRef;\n}\n\n/**\n * Annotation Array Directive\n */\nexport class AnnotationsDirective extends ArrayBase<AnnotationsDirective> {\nconstructor() {\n        super('annotations');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-chart>e-annotations',\n    queries: {\n        children: new ContentChildren(AnnotationDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction AnnotationsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nAnnotationsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAnnotationsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['point', 'series'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Selected Data Directive\n * ```html\n * <e-selecteddataindexes><e-selecteddataindex></e-selecteddataindex><e-selecteddataindexes>\n * ```\n */\nexport class SelectedDataIndexDirective extends ComplexBase<SelectedDataIndexDirective> {\n/**\n * Specifies the point index\n */\npublic point: any;\n/**\n * Specifies the series index\n */\npublic series: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-selecteddataindexes>e-selecteddataindex',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction SelectedDataIndexDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nSelectedDataIndexDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSelectedDataIndexDirective.ctorParameters;\n/**\n * Specifies the point index\n * @type {?}\n */\nSelectedDataIndexDirective.prototype.point;\n/**\n * Specifies the series index\n * @type {?}\n */\nSelectedDataIndexDirective.prototype.series;\n/** @type {?} */\nSelectedDataIndexDirective.prototype.viewContainerRef;\n}\n\n/**\n * SelectedDataIndex Array Directive\n */\nexport class SelectedDataIndexesDirective extends ArrayBase<SelectedDataIndexesDirective> {\nconstructor() {\n        super('selecteddataindexes');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-chart>e-selecteddataindexes',\n    queries: {\n        children: new ContentChildren(SelectedDataIndexDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SelectedDataIndexesDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nSelectedDataIndexesDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSelectedDataIndexesDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['animation', 'bandColor', 'close', 'dPeriod', 'dashArray', 'dataSource', 'enableComplexProperty', 'fastPeriod', 'field', 'fill', 'high', 'kPeriod', 'low', 'lowerLine', 'macdLine', 'macdNegativeColor', 'macdPositiveColor', 'macdType', 'open', 'overBought', 'overSold', 'period', 'periodLine', 'pointColorMapping', 'query', 'segmentAxis', 'segments', 'seriesName', 'showZones', 'slowPeriod', 'standardDeviation', 'type', 'upperLine', 'visible', 'volume', 'width', 'xAxisName', 'xName', 'yAxisName'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Indicator Directive\n * ```html\n * <e-indicators>\n * <e-indicator></e-indicator>\n * </e-indicators>\n * ```\n */\nexport class IndicatorDirective extends ComplexBase<IndicatorDirective> {\n/**\n * Defines the type of the technical indicator\n */\npublic type: any;\n/**\n * Options to customizing animation for the series.\n */\npublic animation: any;\n/**\n * Options for customizing the BollingerBand in the indicator.\n */\npublic bandColor: any;\n/**\n * The DataSource field that contains the close value of y \n * It is applicable for series and technical indicators\n */\npublic close: any;\n/**\n * Defines the period, the price changes over which will define the %D value in stochastic indicators\n */\npublic dPeriod: any;\n/**\n * Defines the pattern of dashes and gaps to stroke the lines in `Line` type series.\n */\npublic dashArray: any;\n/**\n * Specifies the DataSource for the series. It can be an array of JSON objects or an instance of DataManager. \n * \n */\npublic dataSource: any;\n/**\n * This property used to improve chart performance via data mapping for series dataSource.\n */\npublic enableComplexProperty: any;\n/**\n * Sets the fast period to define the Macd line\n */\npublic fastPeriod: any;\n/**\n * Defines the field to compare the current value with previous values\n */\npublic field: any;\n/**\n * The fill color for the series that accepts value in hex and rgba as a valid CSS color string. \n * It also represents the color of the signal lines in technical indicators. \n * For technical indicators, the default value is 'blue' and for series, it has null.\n */\npublic fill: any;\n/**\n * The DataSource field that contains the high value of y \n * It is applicable for series and technical indicators\n */\npublic high: any;\n/**\n * Defines the look back period, the price changes over which will define the %K value in stochastic indicators\n */\npublic kPeriod: any;\n/**\n * The DataSource field that contains the low value of y \n * It is applicable for series and technical indicators\n */\npublic low: any;\n/**\n * Defines the appearance of lower line in technical indicators\n */\npublic lowerLine: any;\n/**\n * Defines the appearance of the the MacdLine of Macd indicator\n */\npublic macdLine: any;\n/**\n * Defines the color of the negative bars in Macd indicators\n */\npublic macdNegativeColor: any;\n/**\n * Defines the color of the positive bars in Macd indicators\n */\npublic macdPositiveColor: any;\n/**\n * Defines the type of the Macd indicator.\n */\npublic macdType: any;\n/**\n * The DataSource field that contains the open value of y \n * It is applicable for series and technical indicators\n */\npublic open: any;\n/**\n * Defines the over-bought(threshold) values. It is applicable for RSI and stochastic indicators\n */\npublic overBought: any;\n/**\n * Defines the over-sold(threshold) values. It is applicable for RSI and stochastic indicators\n */\npublic overSold: any;\n/**\n * Defines the period, the price changes over which will be considered to predict the trend\n */\npublic period: any;\n/**\n * Defines the appearance of period line in technical indicators\n */\npublic periodLine: any;\n/**\n * The DataSource field that contains the color value of point \n * It is applicable for series\n */\npublic pointColorMapping: any;\n/**\n * Specifies query to select data from DataSource. This property is applicable only when the DataSource is `ej.DataManager`.\n */\npublic query: any;\n/**\n * Defines the axis, based on which the line series will be split.\n */\npublic segmentAxis: any;\n/**\n * Defines the collection of regions that helps to differentiate a line series.\n */\npublic segments: any;\n/**\n * Defines the name of the series, the data of which has to be depicted as indicator\n */\npublic seriesName: any;\n/**\n * Enables/Disables the over-bought and over-sold regions\n */\npublic showZones: any;\n/**\n * Sets the slow period to define the Macd line\n */\npublic slowPeriod: any;\n/**\n * Sets the standard deviation values that helps to define the upper and lower bollinger bands\n */\npublic standardDeviation: any;\n/**\n * Defines the appearance of the upper line in technical indicators\n */\npublic upperLine: any;\n/**\n * Specifies the visibility of series.\n */\npublic visible: any;\n/**\n * Defines the data source field that contains the volume value in candle charts \n * It is applicable for financial series and technical indicators\n */\npublic volume: any;\n/**\n * The stroke width for the series that is applicable only for `Line` type series. \n * It also represents the stroke width of the signal lines in technical indicators.\n */\npublic width: any;\n/**\n * The name of the horizontal axis associated with the series. It requires `axes` of the chart. \n * It is applicable for series and technical indicators \n * \n */\npublic xAxisName: any;\n/**\n * The DataSource field that contains the x value. \n * It is applicable for series and technical indicators\n */\npublic xName: any;\n/**\n * The name of the vertical axis associated with the series. It requires `axes` of the chart. \n * It is applicable for series and technical indicators \n * \n */\npublic yAxisName: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-indicators>e-indicator',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction IndicatorDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nIndicatorDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nIndicatorDirective.ctorParameters;\n/**\n * Defines the type of the technical indicator\n * @type {?}\n */\nIndicatorDirective.prototype.type;\n/**\n * Options to customizing animation for the series.\n * @type {?}\n */\nIndicatorDirective.prototype.animation;\n/**\n * Options for customizing the BollingerBand in the indicator.\n * @type {?}\n */\nIndicatorDirective.prototype.bandColor;\n/**\n * The DataSource field that contains the close value of y \n * It is applicable for series and technical indicators\n * @type {?}\n */\nIndicatorDirective.prototype.close;\n/**\n * Defines the period, the price changes over which will define the %D value in stochastic indicators\n * @type {?}\n */\nIndicatorDirective.prototype.dPeriod;\n/**\n * Defines the pattern of dashes and gaps to stroke the lines in `Line` type series.\n * @type {?}\n */\nIndicatorDirective.prototype.dashArray;\n/**\n * Specifies the DataSource for the series. It can be an array of JSON objects or an instance of DataManager. \n * \n * @type {?}\n */\nIndicatorDirective.prototype.dataSource;\n/**\n * This property used to improve chart performance via data mapping for series dataSource.\n * @type {?}\n */\nIndicatorDirective.prototype.enableComplexProperty;\n/**\n * Sets the fast period to define the Macd line\n * @type {?}\n */\nIndicatorDirective.prototype.fastPeriod;\n/**\n * Defines the field to compare the current value with previous values\n * @type {?}\n */\nIndicatorDirective.prototype.field;\n/**\n * The fill color for the series that accepts value in hex and rgba as a valid CSS color string. \n * It also represents the color of the signal lines in technical indicators. \n * For technical indicators, the default value is 'blue' and for series, it has null.\n * @type {?}\n */\nIndicatorDirective.prototype.fill;\n/**\n * The DataSource field that contains the high value of y \n * It is applicable for series and technical indicators\n * @type {?}\n */\nIndicatorDirective.prototype.high;\n/**\n * Defines the look back period, the price changes over which will define the %K value in stochastic indicators\n * @type {?}\n */\nIndicatorDirective.prototype.kPeriod;\n/**\n * The DataSource field that contains the low value of y \n * It is applicable for series and technical indicators\n * @type {?}\n */\nIndicatorDirective.prototype.low;\n/**\n * Defines the appearance of lower line in technical indicators\n * @type {?}\n */\nIndicatorDirective.prototype.lowerLine;\n/**\n * Defines the appearance of the the MacdLine of Macd indicator\n * @type {?}\n */\nIndicatorDirective.prototype.macdLine;\n/**\n * Defines the color of the negative bars in Macd indicators\n * @type {?}\n */\nIndicatorDirective.prototype.macdNegativeColor;\n/**\n * Defines the color of the positive bars in Macd indicators\n * @type {?}\n */\nIndicatorDirective.prototype.macdPositiveColor;\n/**\n * Defines the type of the Macd indicator.\n * @type {?}\n */\nIndicatorDirective.prototype.macdType;\n/**\n * The DataSource field that contains the open value of y \n * It is applicable for series and technical indicators\n * @type {?}\n */\nIndicatorDirective.prototype.open;\n/**\n * Defines the over-bought(threshold) values. It is applicable for RSI and stochastic indicators\n * @type {?}\n */\nIndicatorDirective.prototype.overBought;\n/**\n * Defines the over-sold(threshold) values. It is applicable for RSI and stochastic indicators\n * @type {?}\n */\nIndicatorDirective.prototype.overSold;\n/**\n * Defines the period, the price changes over which will be considered to predict the trend\n * @type {?}\n */\nIndicatorDirective.prototype.period;\n/**\n * Defines the appearance of period line in technical indicators\n * @type {?}\n */\nIndicatorDirective.prototype.periodLine;\n/**\n * The DataSource field that contains the color value of point \n * It is applicable for series\n * @type {?}\n */\nIndicatorDirective.prototype.pointColorMapping;\n/**\n * Specifies query to select data from DataSource. This property is applicable only when the DataSource is `ej.DataManager`.\n * @type {?}\n */\nIndicatorDirective.prototype.query;\n/**\n * Defines the axis, based on which the line series will be split.\n * @type {?}\n */\nIndicatorDirective.prototype.segmentAxis;\n/**\n * Defines the collection of regions that helps to differentiate a line series.\n * @type {?}\n */\nIndicatorDirective.prototype.segments;\n/**\n * Defines the name of the series, the data of which has to be depicted as indicator\n * @type {?}\n */\nIndicatorDirective.prototype.seriesName;\n/**\n * Enables/Disables the over-bought and over-sold regions\n * @type {?}\n */\nIndicatorDirective.prototype.showZones;\n/**\n * Sets the slow period to define the Macd line\n * @type {?}\n */\nIndicatorDirective.prototype.slowPeriod;\n/**\n * Sets the standard deviation values that helps to define the upper and lower bollinger bands\n * @type {?}\n */\nIndicatorDirective.prototype.standardDeviation;\n/**\n * Defines the appearance of the upper line in technical indicators\n * @type {?}\n */\nIndicatorDirective.prototype.upperLine;\n/**\n * Specifies the visibility of series.\n * @type {?}\n */\nIndicatorDirective.prototype.visible;\n/**\n * Defines the data source field that contains the volume value in candle charts \n * It is applicable for financial series and technical indicators\n * @type {?}\n */\nIndicatorDirective.prototype.volume;\n/**\n * The stroke width for the series that is applicable only for `Line` type series. \n * It also represents the stroke width of the signal lines in technical indicators.\n * @type {?}\n */\nIndicatorDirective.prototype.width;\n/**\n * The name of the horizontal axis associated with the series. It requires `axes` of the chart. \n * It is applicable for series and technical indicators \n * \n * @type {?}\n */\nIndicatorDirective.prototype.xAxisName;\n/**\n * The DataSource field that contains the x value. \n * It is applicable for series and technical indicators\n * @type {?}\n */\nIndicatorDirective.prototype.xName;\n/**\n * The name of the vertical axis associated with the series. It requires `axes` of the chart. \n * It is applicable for series and technical indicators \n * \n * @type {?}\n */\nIndicatorDirective.prototype.yAxisName;\n/** @type {?} */\nIndicatorDirective.prototype.viewContainerRef;\n}\n\n/**\n * Indicator Array Directive\n */\nexport class IndicatorsDirective extends ArrayBase<IndicatorsDirective> {\nconstructor() {\n        super('indicators');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ej-chart>e-indicators',\n    queries: {\n        children: new ContentChildren(IndicatorDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction IndicatorsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nIndicatorsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nIndicatorsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ElementRef, ViewContainerRef, ChangeDetectionStrategy, Renderer2, Injector, ValueProvider, ContentChild } from '@angular/core';\nimport { ComponentBase, IComponentBase, applyMixins, ComponentMixins, PropertyCollectionInfo, setValue } from '@syncfusion/ej2-angular-base';\nimport { Chart } from '@syncfusion/ej2-charts';\nimport { Template } from '@syncfusion/ej2-angular-base';\nimport { SeriesCollectionDirective } from './series.directive';\nimport { AxesDirective } from './axes.directive';\nimport { RowsDirective } from './rows.directive';\nimport { ColumnsDirective } from './columns.directive';\nimport { AnnotationsDirective } from './annotations.directive';\nimport { SelectedDataIndexesDirective } from './selecteddataindexes.directive';\nimport { IndicatorsDirective } from './indicators.directive';\n\nexport const /** @type {?} */ inputs: string[] = ['allowMultiSelection','annotations','axes','backGroundImageUrl','background','border','chartArea','columns','crosshair','currencyCode','dataSource','description','enableAnimation','enableCanvas','enableExport','enablePersistence','enableRtl','enableSideBySidePlacement','height','indicators','isMultiSelect','isTransposed','legendSettings','locale','margin','palettes','primaryXAxis','primaryYAxis','rows','selectedDataIndexes','selectionMode','series','subTitle','subTitleStyle','tabIndex','theme','title','titleStyle','tooltip','useGroupingSeparator','width','zoomSettings'];\nexport const /** @type {?} */ outputs: string[] = ['animationComplete','annotationRender','axisLabelRender','axisMultiLabelRender','axisRangeCalculated','beforePrint','chartMouseClick','chartMouseDown','chartMouseLeave','chartMouseMove','chartMouseUp','drag','dragComplete','dragEnd','dragStart','legendClick','legendRender','load','loaded','multiLevelLabelClick','pointClick','pointMove','pointRender','resized','scrollChanged','scrollEnd','scrollStart','selectionComplete','seriesRender','textRender','tooltipRender','zoomComplete','dataSourceChange'];\nexport const /** @type {?} */ twoWays: string[] = ['dataSource'];\n/**\n * Chart Component\n * ```html\n * <ejschart></ejschart>\n * ```\n */\n@ComponentMixins([ComponentBase])\nexport class ChartComponent extends Chart implements IComponentBase {\npublic childSeries: any;\npublic childAxes: any;\npublic childRows: any;\npublic childColumns: any;\npublic childAnnotations: any;\npublic childSelectedDataIndexes: any;\npublic childIndicators: any;\npublic tags: string[] = ['series', 'axes', 'rows', 'columns', 'annotations', 'selectedDataIndexes', 'indicators'];\npublic dataSourceChange: any;\n    \n    @Template()\npublic tooltip_template: any;\n/**\n * @param {?} ngEle\n * @param {?} srenderer\n * @param {?} viewContainerRef\n * @param {?} injector\n */\nconstructor(private ngEle: ElementRef,\nprivate srenderer: Renderer2,\nprivate viewContainerRef:ViewContainerRef,\nprivate injector: Injector) {\n        super();\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n        try {\n                let mod = this.injector.get('ChartsLineSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsScatterSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsColumnSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsSplineSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsSplineAreaSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsStripLine');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsAreaSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsScrollBar');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsStepLineSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsStepAreaSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsStackingColumnSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsStackingLineSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsStackingAreaSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsBarSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsStackingBarSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsRangeColumnSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsBubbleSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsTooltip');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsCrosshair');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsCategory');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsDateTime');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsLogarithmic');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsLegend');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsZoom');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsDataLabel');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsSelection');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsChartAnnotation');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsHiloSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsHiloOpenCloseSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsWaterfallSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsRangeAreaSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsCandleSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsPolarSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsRadarSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsSmaIndicator');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsTmaIndicator');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsEmaIndicator');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsAccumulationDistributionIndicator');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsMacdIndicator');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsAtrIndicator');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsRsiIndicator');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsMomentumIndicator');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsStochasticIndicator');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsBollingerBands');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsBoxAndWhiskerSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsHistogramSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsErrorBar');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsTrendlines');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsDateTimeCategory');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsMultiColoredLineSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsMultiColoredAreaSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsMultiLevelLabel');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsParetoSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsExport');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsDataEditing');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n\n        this.registerEvents(outputs);\n        this.addTwoWay.call(this, twoWays);\n        setValue('currentInstance', this, this.viewContainerRef);\n    }\n/**\n * @return {?}\n */\npublic ngOnInit() {\n    }\n/**\n * @return {?}\n */\npublic ngAfterViewInit(): void {\n    }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\n    }\n/**\n * @return {?}\n */\npublic ngAfterContentChecked(): void {\n    }\npublic registerEvents: (eventList: string[]) => void;\npublic addTwoWay: (propList: string[]) => void;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'ejs-chart',\n    inputs: inputs,\n    outputs: outputs,\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    queries: {\n        childSeries: new ContentChild(SeriesCollectionDirective), \n        childAxes: new ContentChild(AxesDirective), \n        childRows: new ContentChild(RowsDirective), \n        childColumns: new ContentChild(ColumnsDirective), \n        childAnnotations: new ContentChild(AnnotationsDirective), \n        childSelectedDataIndexes: new ContentChild(SelectedDataIndexesDirective), \n        childIndicators: new ContentChild(IndicatorsDirective)\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ViewContainerRef, },\n{type: Injector, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'tooltip_template': [{ type: ContentChild, args: ['tooltipTemplate', ] },],\n};\n}\n\nfunction ChartComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nChartComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nChartComponent.ctorParameters;\n/** @type {?} */\nChartComponent.propDecorators;\n/** @type {?} */\nChartComponent.prototype.childSeries;\n/** @type {?} */\nChartComponent.prototype.childAxes;\n/** @type {?} */\nChartComponent.prototype.childRows;\n/** @type {?} */\nChartComponent.prototype.childColumns;\n/** @type {?} */\nChartComponent.prototype.childAnnotations;\n/** @type {?} */\nChartComponent.prototype.childSelectedDataIndexes;\n/** @type {?} */\nChartComponent.prototype.childIndicators;\n/** @type {?} */\nChartComponent.prototype.tags;\n/** @type {?} */\nChartComponent.prototype.dataSourceChange;\n/** @type {?} */\nChartComponent.prototype.tooltip_template;\n/** @type {?} */\nChartComponent.prototype.registerEvents;\n/** @type {?} */\nChartComponent.prototype.addTwoWay;\n/** @type {?} */\nChartComponent.prototype.ngEle;\n/** @type {?} */\nChartComponent.prototype.srenderer;\n/** @type {?} */\nChartComponent.prototype.viewContainerRef;\n/** @type {?} */\nChartComponent.prototype.injector;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TrendlineDirective, TrendlinesDirective } from './trendlines.directive';\nimport { SegmentDirective, SegmentsDirective } from './segments.directive';\nimport { SeriesDirective, SeriesCollectionDirective } from './series.directive';\nimport { StripLineDirective, StripLinesDirective } from './striplines.directive';\nimport { CategoryDirective, CategoriesDirective } from './categories.directive';\nimport { MultiLevelLabelDirective, MultiLevelLabelsDirective } from './multilevellabels.directive';\nimport { AxisDirective, AxesDirective } from './axes.directive';\nimport { RowDirective, RowsDirective } from './rows.directive';\nimport { ColumnDirective, ColumnsDirective } from './columns.directive';\nimport { AnnotationDirective, AnnotationsDirective } from './annotations.directive';\nimport { SelectedDataIndexDirective, SelectedDataIndexesDirective } from './selecteddataindexes.directive';\nimport { IndicatorDirective, IndicatorsDirective } from './indicators.directive';\nimport { ChartComponent } from './chart.component';\n/**\n * NgModule definition for the Chart component.\n */\nexport class ChartModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule],\n    declarations: [\n        ChartComponent,\n        TrendlineDirective,\n        TrendlinesDirective,\n        SegmentDirective,\n        SegmentsDirective,\n        SeriesDirective,\n        SeriesCollectionDirective,\n        StripLineDirective,\n        StripLinesDirective,\n        CategoryDirective,\n        CategoriesDirective,\n        MultiLevelLabelDirective,\n        MultiLevelLabelsDirective,\n        AxisDirective,\n        AxesDirective,\n        RowDirective,\n        RowsDirective,\n        ColumnDirective,\n        ColumnsDirective,\n        AnnotationDirective,\n        AnnotationsDirective,\n        SelectedDataIndexDirective,\n        SelectedDataIndexesDirective,\n        IndicatorDirective,\n        IndicatorsDirective\n    ],\n    exports: [\n        ChartComponent,\n        TrendlineDirective,\n        TrendlinesDirective,\n        SegmentDirective,\n        SegmentsDirective,\n        SeriesDirective,\n        SeriesCollectionDirective,\n        StripLineDirective,\n        StripLinesDirective,\n        CategoryDirective,\n        CategoriesDirective,\n        MultiLevelLabelDirective,\n        MultiLevelLabelsDirective,\n        AxisDirective,\n        AxesDirective,\n        RowDirective,\n        RowsDirective,\n        ColumnDirective,\n        ColumnsDirective,\n        AnnotationDirective,\n        AnnotationsDirective,\n        SelectedDataIndexDirective,\n        SelectedDataIndexesDirective,\n        IndicatorDirective,\n        IndicatorsDirective\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ChartModule_tsickle_Closure_declarations() {\n/** @type {?} */\nChartModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nChartModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ValueProvider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TrendlineDirective, TrendlinesDirective } from './trendlines.directive';\nimport { SegmentDirective, SegmentsDirective } from './segments.directive';\nimport { SeriesDirective, SeriesCollectionDirective } from './series.directive';\nimport { StripLineDirective, StripLinesDirective } from './striplines.directive';\nimport { CategoryDirective, CategoriesDirective } from './categories.directive';\nimport { MultiLevelLabelDirective, MultiLevelLabelsDirective } from './multilevellabels.directive';\nimport { AxisDirective, AxesDirective } from './axes.directive';\nimport { RowDirective, RowsDirective } from './rows.directive';\nimport { ColumnDirective, ColumnsDirective } from './columns.directive';\nimport { AnnotationDirective, AnnotationsDirective } from './annotations.directive';\nimport { SelectedDataIndexDirective, SelectedDataIndexesDirective } from './selecteddataindexes.directive';\nimport { IndicatorDirective, IndicatorsDirective } from './indicators.directive';\nimport { ChartComponent } from './chart.component';\nimport { ChartModule } from './chart.module';\nimport {LineSeries, ScatterSeries, ColumnSeries, SplineSeries, SplineAreaSeries, StripLine, AreaSeries, ScrollBar, StepLineSeries, StepAreaSeries, StackingColumnSeries, StackingLineSeries, StackingAreaSeries, BarSeries, StackingBarSeries, RangeColumnSeries, BubbleSeries, Tooltip, Crosshair, Category, DateTime, Logarithmic, Legend, Zoom, DataLabel, Selection, ChartAnnotation, HiloSeries, HiloOpenCloseSeries, WaterfallSeries, RangeAreaSeries, CandleSeries, PolarSeries, RadarSeries, SmaIndicator, TmaIndicator, EmaIndicator, AccumulationDistributionIndicator, MacdIndicator, AtrIndicator, RsiIndicator, MomentumIndicator, StochasticIndicator, BollingerBands, BoxAndWhiskerSeries, HistogramSeries, ErrorBar, Trendlines, DateTimeCategory, MultiColoredLineSeries, MultiColoredAreaSeries, MultiLevelLabel, ParetoSeries, Export, DataEditing} from '@syncfusion/ej2-charts';\n\n\nexport const /** @type {?} */ LineSeriesService: ValueProvider = { provide: 'ChartsLineSeries', useValue: LineSeries};\nexport const /** @type {?} */ ScatterSeriesService: ValueProvider = { provide: 'ChartsScatterSeries', useValue: ScatterSeries};\nexport const /** @type {?} */ ColumnSeriesService: ValueProvider = { provide: 'ChartsColumnSeries', useValue: ColumnSeries};\nexport const /** @type {?} */ SplineSeriesService: ValueProvider = { provide: 'ChartsSplineSeries', useValue: SplineSeries};\nexport const /** @type {?} */ SplineAreaSeriesService: ValueProvider = { provide: 'ChartsSplineAreaSeries', useValue: SplineAreaSeries};\nexport const /** @type {?} */ StripLineService: ValueProvider = { provide: 'ChartsStripLine', useValue: StripLine};\nexport const /** @type {?} */ AreaSeriesService: ValueProvider = { provide: 'ChartsAreaSeries', useValue: AreaSeries};\nexport const /** @type {?} */ ScrollBarService: ValueProvider = { provide: 'ChartsScrollBar', useValue: ScrollBar};\nexport const /** @type {?} */ StepLineSeriesService: ValueProvider = { provide: 'ChartsStepLineSeries', useValue: StepLineSeries};\nexport const /** @type {?} */ StepAreaSeriesService: ValueProvider = { provide: 'ChartsStepAreaSeries', useValue: StepAreaSeries};\nexport const /** @type {?} */ StackingColumnSeriesService: ValueProvider = { provide: 'ChartsStackingColumnSeries', useValue: StackingColumnSeries};\nexport const /** @type {?} */ StackingLineSeriesService: ValueProvider = { provide: 'ChartsStackingLineSeries', useValue: StackingLineSeries};\nexport const /** @type {?} */ StackingAreaSeriesService: ValueProvider = { provide: 'ChartsStackingAreaSeries', useValue: StackingAreaSeries};\nexport const /** @type {?} */ BarSeriesService: ValueProvider = { provide: 'ChartsBarSeries', useValue: BarSeries};\nexport const /** @type {?} */ StackingBarSeriesService: ValueProvider = { provide: 'ChartsStackingBarSeries', useValue: StackingBarSeries};\nexport const /** @type {?} */ RangeColumnSeriesService: ValueProvider = { provide: 'ChartsRangeColumnSeries', useValue: RangeColumnSeries};\nexport const /** @type {?} */ BubbleSeriesService: ValueProvider = { provide: 'ChartsBubbleSeries', useValue: BubbleSeries};\nexport const /** @type {?} */ TooltipService: ValueProvider = { provide: 'ChartsTooltip', useValue: Tooltip};\nexport const /** @type {?} */ CrosshairService: ValueProvider = { provide: 'ChartsCrosshair', useValue: Crosshair};\nexport const /** @type {?} */ CategoryService: ValueProvider = { provide: 'ChartsCategory', useValue: Category};\nexport const /** @type {?} */ DateTimeService: ValueProvider = { provide: 'ChartsDateTime', useValue: DateTime};\nexport const /** @type {?} */ LogarithmicService: ValueProvider = { provide: 'ChartsLogarithmic', useValue: Logarithmic};\nexport const /** @type {?} */ LegendService: ValueProvider = { provide: 'ChartsLegend', useValue: Legend};\nexport const /** @type {?} */ ZoomService: ValueProvider = { provide: 'ChartsZoom', useValue: Zoom};\nexport const /** @type {?} */ DataLabelService: ValueProvider = { provide: 'ChartsDataLabel', useValue: DataLabel};\nexport const /** @type {?} */ SelectionService: ValueProvider = { provide: 'ChartsSelection', useValue: Selection};\nexport const /** @type {?} */ ChartAnnotationService: ValueProvider = { provide: 'ChartsChartAnnotation', useValue: ChartAnnotation};\nexport const /** @type {?} */ HiloSeriesService: ValueProvider = { provide: 'ChartsHiloSeries', useValue: HiloSeries};\nexport const /** @type {?} */ HiloOpenCloseSeriesService: ValueProvider = { provide: 'ChartsHiloOpenCloseSeries', useValue: HiloOpenCloseSeries};\nexport const /** @type {?} */ WaterfallSeriesService: ValueProvider = { provide: 'ChartsWaterfallSeries', useValue: WaterfallSeries};\nexport const /** @type {?} */ RangeAreaSeriesService: ValueProvider = { provide: 'ChartsRangeAreaSeries', useValue: RangeAreaSeries};\nexport const /** @type {?} */ CandleSeriesService: ValueProvider = { provide: 'ChartsCandleSeries', useValue: CandleSeries};\nexport const /** @type {?} */ PolarSeriesService: ValueProvider = { provide: 'ChartsPolarSeries', useValue: PolarSeries};\nexport const /** @type {?} */ RadarSeriesService: ValueProvider = { provide: 'ChartsRadarSeries', useValue: RadarSeries};\nexport const /** @type {?} */ SmaIndicatorService: ValueProvider = { provide: 'ChartsSmaIndicator', useValue: SmaIndicator};\nexport const /** @type {?} */ TmaIndicatorService: ValueProvider = { provide: 'ChartsTmaIndicator', useValue: TmaIndicator};\nexport const /** @type {?} */ EmaIndicatorService: ValueProvider = { provide: 'ChartsEmaIndicator', useValue: EmaIndicator};\nexport const /** @type {?} */ AccumulationDistributionIndicatorService: ValueProvider = { provide: 'ChartsAccumulationDistributionIndicator', useValue: AccumulationDistributionIndicator};\nexport const /** @type {?} */ MacdIndicatorService: ValueProvider = { provide: 'ChartsMacdIndicator', useValue: MacdIndicator};\nexport const /** @type {?} */ AtrIndicatorService: ValueProvider = { provide: 'ChartsAtrIndicator', useValue: AtrIndicator};\nexport const /** @type {?} */ RsiIndicatorService: ValueProvider = { provide: 'ChartsRsiIndicator', useValue: RsiIndicator};\nexport const /** @type {?} */ MomentumIndicatorService: ValueProvider = { provide: 'ChartsMomentumIndicator', useValue: MomentumIndicator};\nexport const /** @type {?} */ StochasticIndicatorService: ValueProvider = { provide: 'ChartsStochasticIndicator', useValue: StochasticIndicator};\nexport const /** @type {?} */ BollingerBandsService: ValueProvider = { provide: 'ChartsBollingerBands', useValue: BollingerBands};\nexport const /** @type {?} */ BoxAndWhiskerSeriesService: ValueProvider = { provide: 'ChartsBoxAndWhiskerSeries', useValue: BoxAndWhiskerSeries};\nexport const /** @type {?} */ HistogramSeriesService: ValueProvider = { provide: 'ChartsHistogramSeries', useValue: HistogramSeries};\nexport const /** @type {?} */ ErrorBarService: ValueProvider = { provide: 'ChartsErrorBar', useValue: ErrorBar};\nexport const /** @type {?} */ TrendlinesService: ValueProvider = { provide: 'ChartsTrendlines', useValue: Trendlines};\nexport const /** @type {?} */ DateTimeCategoryService: ValueProvider = { provide: 'ChartsDateTimeCategory', useValue: DateTimeCategory};\nexport const /** @type {?} */ MultiColoredLineSeriesService: ValueProvider = { provide: 'ChartsMultiColoredLineSeries', useValue: MultiColoredLineSeries};\nexport const /** @type {?} */ MultiColoredAreaSeriesService: ValueProvider = { provide: 'ChartsMultiColoredAreaSeries', useValue: MultiColoredAreaSeries};\nexport const /** @type {?} */ MultiLevelLabelService: ValueProvider = { provide: 'ChartsMultiLevelLabel', useValue: MultiLevelLabel};\nexport const /** @type {?} */ ParetoSeriesService: ValueProvider = { provide: 'ChartsParetoSeries', useValue: ParetoSeries};\nexport const /** @type {?} */ ExportService: ValueProvider = { provide: 'ChartsExport', useValue: Export};\nexport const /** @type {?} */ DataEditingService: ValueProvider = { provide: 'ChartsDataEditing', useValue: DataEditing};\n/**\n * NgModule definition for the Chart component with providers.\n */\nexport class ChartAllModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule, ChartModule],\n    exports: [\n        ChartModule\n    ],\n    providers:[\n        LineSeriesService,\n        ScatterSeriesService,\n        ColumnSeriesService,\n        SplineSeriesService,\n        SplineAreaSeriesService,\n        StripLineService,\n        AreaSeriesService,\n        ScrollBarService,\n        StepLineSeriesService,\n        StepAreaSeriesService,\n        StackingColumnSeriesService,\n        StackingLineSeriesService,\n        StackingAreaSeriesService,\n        BarSeriesService,\n        StackingBarSeriesService,\n        RangeColumnSeriesService,\n        BubbleSeriesService,\n        TooltipService,\n        CrosshairService,\n        CategoryService,\n        DateTimeService,\n        LogarithmicService,\n        LegendService,\n        ZoomService,\n        DataLabelService,\n        SelectionService,\n        ChartAnnotationService,\n        HiloSeriesService,\n        HiloOpenCloseSeriesService,\n        WaterfallSeriesService,\n        RangeAreaSeriesService,\n        CandleSeriesService,\n        PolarSeriesService,\n        RadarSeriesService,\n        SmaIndicatorService,\n        TmaIndicatorService,\n        EmaIndicatorService,\n        AccumulationDistributionIndicatorService,\n        MacdIndicatorService,\n        AtrIndicatorService,\n        RsiIndicatorService,\n        MomentumIndicatorService,\n        StochasticIndicatorService,\n        BollingerBandsService,\n        BoxAndWhiskerSeriesService,\n        HistogramSeriesService,\n        ErrorBarService,\n        TrendlinesService,\n        DateTimeCategoryService,\n        MultiColoredLineSeriesService,\n        MultiColoredAreaSeriesService,\n        MultiLevelLabelService,\n        ParetoSeriesService,\n        ExportService,\n        DataEditingService\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ChartAllModule_tsickle_Closure_declarations() {\n/** @type {?} */\nChartAllModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nChartAllModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren, ContentChild } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\nimport { Template } from '@syncfusion/ej2-angular-base';\n\n\nlet /** @type {?} */ input: string[] = ['animation', 'border', 'dataLabel', 'dataSource', 'emptyPointSettings', 'enableTooltip', 'endAngle', 'explode', 'explodeAll', 'explodeIndex', 'explodeOffset', 'gapRatio', 'groupMode', 'groupTo', 'height', 'innerRadius', 'legendShape', 'name', 'neckHeight', 'neckWidth', 'opacity', 'palettes', 'pointColorMapping', 'pyramidMode', 'query', 'radius', 'selectionStyle', 'startAngle', 'tooltipMappingName', 'type', 'visible', 'width', 'xName', 'yName'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * AccumulationSeries Directive\n * ```html\n * <e-accumulation-series-collection>\n * <e-accumulation-series></e-accumulation-series>\n * </e-accumulation-series-collection>\n * ```\n */\nexport class AccumulationSeriesDirective extends ComplexBase<AccumulationSeriesDirective> {\n/**\n * Specify the type of the series in accumulation chart.\n */\npublic type: any;\n/**\n * Options for customizing the animation for series.\n */\npublic animation: any;\n/**\n * Options for customizing the border of the series.\n */\npublic border: any;\n/**\n * The data label for the series.\n */\npublic dataLabel: any;\n/**\n * Specifies the dataSource for the series. It can be an array of JSON objects or an instance of DataManager. \n * \n */\npublic dataSource: any;\n/**\n * options to customize the empty points in series\n */\npublic emptyPointSettings: any;\n/**\n * To enable or disable tooltip for a series.\n */\npublic enableTooltip: any;\n/**\n * End angle for a series.\n */\npublic endAngle: any;\n/**\n * If set true, series points will be exploded on mouse click or touch.\n */\npublic explode: any;\n/**\n * If set true, all the points in the series will get exploded on load.\n */\npublic explodeAll: any;\n/**\n * Index of the point, to be exploded on load.\n */\npublic explodeIndex: any;\n/**\n * Distance of the point from the center, which takes values in both pixels and percentage.\n */\npublic explodeOffset: any;\n/**\n * Defines the distance between the segments of a funnel/pyramid series. The range will be from 0 to 1\n */\npublic gapRatio: any;\n/**\n * AccumulationSeries y values less than groupMode are combined into single slice named others\n */\npublic groupMode: any;\n/**\n * AccumulationSeries y values less than groupTo are combined into single slice named others\n */\npublic groupTo: any;\n/**\n * Defines the height of the funnel/pyramid with respect to the chart area\n */\npublic height: any;\n/**\n * When the innerRadius value is greater than 0 percentage, a donut will appear in pie series. It takes values only in percentage.\n */\npublic innerRadius: any;\n/**\n * The shape of the legend. Each series has its own legend shape. They are \n * * Circle - Renders a circle. \n * * Rectangle - Renders a rectangle. \n * * Triangle - Renders a triangle. \n * * Diamond - Renders a diamond. \n * * Cross - Renders a cross. \n * * HorizontalLine - Renders a horizontalLine. \n * * VerticalLine - Renders a verticalLine. \n * * Pentagon - Renders a pentagon. \n * * InvertedTriangle - Renders a invertedTriangle. \n * * SeriesType -Render a legend shape based on series type.\n */\npublic legendShape: any;\n/**\n * Specifies the series name\n */\npublic name: any;\n/**\n * Defines the height of the funnel neck with respect to the chart area\n */\npublic neckHeight: any;\n/**\n * Defines the width of the funnel neck with respect to the chart area\n */\npublic neckWidth: any;\n/**\n * The opacity of the series.\n */\npublic opacity: any;\n/**\n * Palette for series points.\n */\npublic palettes: any;\n/**\n * The DataSource field that contains the color value of point \n * It is applicable for series\n */\npublic pointColorMapping: any;\n/**\n * Defines how the values have to be reflected, whether through height/surface of the segments\n */\npublic pyramidMode: any;\n/**\n * Specifies Query to select data from dataSource. This property is applicable only when the dataSource is `ej.DataManager`.\n */\npublic query: any;\n/**\n * Radius of the pie series and its values in percentage.\n */\npublic radius: any;\n/**\n * Custom style for the selected series or points.\n */\npublic selectionStyle: any;\n/**\n * Start angle for a series.\n */\npublic startAngle: any;\n/**\n * The provided value will be considered as a Tooltip Mapping name\n */\npublic tooltipMappingName: any;\n/**\n * Specifies the series visibility.\n */\npublic visible: any;\n/**\n * Defines the width of the funnel/pyramid with respect to the chart area\n */\npublic width: any;\n/**\n * The DataSource field which contains the x value.\n */\npublic xName: any;\n/**\n * The DataSource field which contains the y value.\n */\npublic yName: any;\n    \n    @Template()\npublic dataLabel_template: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-accumulation-series-collection>e-accumulation-series',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'dataLabel_template': [{ type: ContentChild, args: ['dataLabelTemplate', ] },],\n};\n}\n\nfunction AccumulationSeriesDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nAccumulationSeriesDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAccumulationSeriesDirective.ctorParameters;\n/** @type {?} */\nAccumulationSeriesDirective.propDecorators;\n/**\n * Specify the type of the series in accumulation chart.\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.type;\n/**\n * Options for customizing the animation for series.\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.animation;\n/**\n * Options for customizing the border of the series.\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.border;\n/**\n * The data label for the series.\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.dataLabel;\n/**\n * Specifies the dataSource for the series. It can be an array of JSON objects or an instance of DataManager. \n * \n * @type {?}\n */\nAccumulationSeriesDirective.prototype.dataSource;\n/**\n * options to customize the empty points in series\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.emptyPointSettings;\n/**\n * To enable or disable tooltip for a series.\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.enableTooltip;\n/**\n * End angle for a series.\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.endAngle;\n/**\n * If set true, series points will be exploded on mouse click or touch.\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.explode;\n/**\n * If set true, all the points in the series will get exploded on load.\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.explodeAll;\n/**\n * Index of the point, to be exploded on load.\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.explodeIndex;\n/**\n * Distance of the point from the center, which takes values in both pixels and percentage.\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.explodeOffset;\n/**\n * Defines the distance between the segments of a funnel/pyramid series. The range will be from 0 to 1\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.gapRatio;\n/**\n * AccumulationSeries y values less than groupMode are combined into single slice named others\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.groupMode;\n/**\n * AccumulationSeries y values less than groupTo are combined into single slice named others\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.groupTo;\n/**\n * Defines the height of the funnel/pyramid with respect to the chart area\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.height;\n/**\n * When the innerRadius value is greater than 0 percentage, a donut will appear in pie series. It takes values only in percentage.\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.innerRadius;\n/**\n * The shape of the legend. Each series has its own legend shape. They are \n * * Circle - Renders a circle. \n * * Rectangle - Renders a rectangle. \n * * Triangle - Renders a triangle. \n * * Diamond - Renders a diamond. \n * * Cross - Renders a cross. \n * * HorizontalLine - Renders a horizontalLine. \n * * VerticalLine - Renders a verticalLine. \n * * Pentagon - Renders a pentagon. \n * * InvertedTriangle - Renders a invertedTriangle. \n * * SeriesType -Render a legend shape based on series type.\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.legendShape;\n/**\n * Specifies the series name\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.name;\n/**\n * Defines the height of the funnel neck with respect to the chart area\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.neckHeight;\n/**\n * Defines the width of the funnel neck with respect to the chart area\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.neckWidth;\n/**\n * The opacity of the series.\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.opacity;\n/**\n * Palette for series points.\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.palettes;\n/**\n * The DataSource field that contains the color value of point \n * It is applicable for series\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.pointColorMapping;\n/**\n * Defines how the values have to be reflected, whether through height/surface of the segments\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.pyramidMode;\n/**\n * Specifies Query to select data from dataSource. This property is applicable only when the dataSource is `ej.DataManager`.\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.query;\n/**\n * Radius of the pie series and its values in percentage.\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.radius;\n/**\n * Custom style for the selected series or points.\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.selectionStyle;\n/**\n * Start angle for a series.\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.startAngle;\n/**\n * The provided value will be considered as a Tooltip Mapping name\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.tooltipMappingName;\n/**\n * Specifies the series visibility.\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.visible;\n/**\n * Defines the width of the funnel/pyramid with respect to the chart area\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.width;\n/**\n * The DataSource field which contains the x value.\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.xName;\n/**\n * The DataSource field which contains the y value.\n * @type {?}\n */\nAccumulationSeriesDirective.prototype.yName;\n/** @type {?} */\nAccumulationSeriesDirective.prototype.dataLabel_template;\n/** @type {?} */\nAccumulationSeriesDirective.prototype.viewContainerRef;\n}\n\n/**\n * AccumulationSeries Array Directive\n */\nexport class AccumulationSeriesCollectionDirective extends ArrayBase<AccumulationSeriesCollectionDirective> {\nconstructor() {\n        super('series');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ej-accumulationchart>e-accumulation-series-collection',\n    queries: {\n        children: new ContentChildren(AccumulationSeriesDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction AccumulationSeriesCollectionDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nAccumulationSeriesCollectionDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAccumulationSeriesCollectionDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren, ContentChild } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\nimport { Template } from '@syncfusion/ej2-angular-base';\n\n\nlet /** @type {?} */ input: string[] = ['content', 'coordinateUnits', 'description', 'horizontalAlignment', 'region', 'verticalAlignment', 'x', 'y'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * AccumulationAnnotations Directive\n * ```html\n * <e-accumulation-annotations>\n * <e-accumulation-annotation></e-accumulation-annotation>\n * </e-accumulation-annotations>\n * ```\n */\nexport class AccumulationAnnotationDirective extends ComplexBase<AccumulationAnnotationDirective> {\n/**\n * Specifies the coordinate units of the annotation. They are \n * * Pixel - Annotation renders based on x and y pixel value. \n * * Point - Annotation renders based on x and y axis value.\n */\npublic coordinateUnits: any;\n/**\n * Information about annotation for assistive technology.\n */\npublic description: any;\n/**\n * Specifies the alignment of the annotation. They are \n * * Near - Align the annotation element as top side. \n * * Far - Align the annotation element as bottom side. \n * * Center - Align the annotation element as mid point.\n */\npublic horizontalAlignment: any;\n/**\n * Specifies the regions of the annotation. They are \n * * Chart - Annotation renders based on chart coordinates. \n * * Series - Annotation renders based on series coordinates.\n */\npublic region: any;\n/**\n * Specifies the position of the annotation. They are \n * * Top - Align the annotation element as top side. \n * * Bottom - Align the annotation element as bottom side. \n * * Middle - Align the annotation element as mid point.\n */\npublic verticalAlignment: any;\n/**\n * if set coordinateUnit as `Pixel` X specifies the axis value \n * else is specifies pixel or percentage of coordinate\n */\npublic x: any;\n/**\n * if set coordinateUnit as `Pixel` Y specifies the axis value \n * else is specifies pixel or percentage of coordinate\n */\npublic y: any;\n/**\n * Content of the annotation, which accepts the id of the custom element.\n */\n@Template()\n    public content: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-accumulation-annotations>e-accumulation-annotation',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'content': [{ type: ContentChild, args: ['content', ] },],\n};\n}\n\nfunction AccumulationAnnotationDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nAccumulationAnnotationDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAccumulationAnnotationDirective.ctorParameters;\n/** @type {?} */\nAccumulationAnnotationDirective.propDecorators;\n/**\n * Specifies the coordinate units of the annotation. They are \n * * Pixel - Annotation renders based on x and y pixel value. \n * * Point - Annotation renders based on x and y axis value.\n * @type {?}\n */\nAccumulationAnnotationDirective.prototype.coordinateUnits;\n/**\n * Information about annotation for assistive technology.\n * @type {?}\n */\nAccumulationAnnotationDirective.prototype.description;\n/**\n * Specifies the alignment of the annotation. They are \n * * Near - Align the annotation element as top side. \n * * Far - Align the annotation element as bottom side. \n * * Center - Align the annotation element as mid point.\n * @type {?}\n */\nAccumulationAnnotationDirective.prototype.horizontalAlignment;\n/**\n * Specifies the regions of the annotation. They are \n * * Chart - Annotation renders based on chart coordinates. \n * * Series - Annotation renders based on series coordinates.\n * @type {?}\n */\nAccumulationAnnotationDirective.prototype.region;\n/**\n * Specifies the position of the annotation. They are \n * * Top - Align the annotation element as top side. \n * * Bottom - Align the annotation element as bottom side. \n * * Middle - Align the annotation element as mid point.\n * @type {?}\n */\nAccumulationAnnotationDirective.prototype.verticalAlignment;\n/**\n * if set coordinateUnit as `Pixel` X specifies the axis value \n * else is specifies pixel or percentage of coordinate\n * @type {?}\n */\nAccumulationAnnotationDirective.prototype.x;\n/**\n * if set coordinateUnit as `Pixel` Y specifies the axis value \n * else is specifies pixel or percentage of coordinate\n * @type {?}\n */\nAccumulationAnnotationDirective.prototype.y;\n/**\n * Content of the annotation, which accepts the id of the custom element.\n * @type {?}\n */\nAccumulationAnnotationDirective.prototype.content;\n/** @type {?} */\nAccumulationAnnotationDirective.prototype.viewContainerRef;\n}\n\n/**\n * AccumulationAnnotation Array Directive\n */\nexport class AccumulationAnnotationsDirective extends ArrayBase<AccumulationAnnotationsDirective> {\nconstructor() {\n        super('annotations');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ej-accumulationchart>e-accumulation-annotations',\n    queries: {\n        children: new ContentChildren(AccumulationAnnotationDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction AccumulationAnnotationsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nAccumulationAnnotationsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAccumulationAnnotationsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ElementRef, ViewContainerRef, ChangeDetectionStrategy, Renderer2, Injector, ValueProvider, ContentChild } from '@angular/core';\nimport { ComponentBase, IComponentBase, applyMixins, ComponentMixins, PropertyCollectionInfo, setValue } from '@syncfusion/ej2-angular-base';\nimport { AccumulationChart } from '@syncfusion/ej2-charts';\nimport { Template } from '@syncfusion/ej2-angular-base';\nimport { AccumulationSeriesCollectionDirective } from './series.directive';\nimport { AccumulationAnnotationsDirective } from './annotations.directive';\n\nexport const /** @type {?} */ inputs: string[] = ['annotations','backGroundImageUrl','background','border','center','currencyCode','dataSource','enableAnimation','enableExport','enablePersistence','enableRtl','enableSmartLabels','height','isMultiSelect','legendSettings','locale','margin','selectedDataIndexes','selectionMode','series','subTitle','subTitleStyle','theme','title','titleStyle','tooltip','useGroupingSeparator','width'];\nexport const /** @type {?} */ outputs: string[] = ['animationComplete','annotationRender','beforePrint','chartMouseClick','chartMouseDown','chartMouseLeave','chartMouseMove','chartMouseUp','legendRender','load','loaded','pointClick','pointMove','pointRender','resized','seriesRender','textRender','tooltipRender','dataSourceChange'];\nexport const /** @type {?} */ twoWays: string[] = ['dataSource'];\n/**\n * AccumulationChart Component\n * ```html\n * <ejs-accumulationchart></ejs-accumulationchart>\n * ```\n */\n@ComponentMixins([ComponentBase])\nexport class AccumulationChartComponent extends AccumulationChart implements IComponentBase {\npublic childSeries: any;\npublic childAnnotations: any;\npublic tags: string[] = ['series', 'annotations'];\npublic dataSourceChange: any;\n    \n    @Template()\npublic tooltip_template: any;\n/**\n * @param {?} ngEle\n * @param {?} srenderer\n * @param {?} viewContainerRef\n * @param {?} injector\n */\nconstructor(private ngEle: ElementRef,\nprivate srenderer: Renderer2,\nprivate viewContainerRef:ViewContainerRef,\nprivate injector: Injector) {\n        super();\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n        try {\n                let mod = this.injector.get('ChartsPieSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsFunnelSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsPyramidSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsAccumulationTooltip');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsAccumulationLegend');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsAccumulationSelection');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsAccumulationDataLabel');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsAccumulationAnnotation');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsExport');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n\n        this.registerEvents(outputs);\n        this.addTwoWay.call(this, twoWays);\n        setValue('currentInstance', this, this.viewContainerRef);\n    }\n/**\n * @return {?}\n */\npublic ngOnInit() {\n    }\n/**\n * @return {?}\n */\npublic ngAfterViewInit(): void {\n    }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\n    }\n/**\n * @return {?}\n */\npublic ngAfterContentChecked(): void {\n    }\npublic registerEvents: (eventList: string[]) => void;\npublic addTwoWay: (propList: string[]) => void;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'ejs-accumulationchart',\n    inputs: inputs,\n    outputs: outputs,\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    queries: {\n        childSeries: new ContentChild(AccumulationSeriesCollectionDirective), \n        childAnnotations: new ContentChild(AccumulationAnnotationsDirective)\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ViewContainerRef, },\n{type: Injector, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'tooltip_template': [{ type: ContentChild, args: ['tooltipTemplate', ] },],\n};\n}\n\nfunction AccumulationChartComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nAccumulationChartComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAccumulationChartComponent.ctorParameters;\n/** @type {?} */\nAccumulationChartComponent.propDecorators;\n/** @type {?} */\nAccumulationChartComponent.prototype.childSeries;\n/** @type {?} */\nAccumulationChartComponent.prototype.childAnnotations;\n/** @type {?} */\nAccumulationChartComponent.prototype.tags;\n/** @type {?} */\nAccumulationChartComponent.prototype.dataSourceChange;\n/** @type {?} */\nAccumulationChartComponent.prototype.tooltip_template;\n/** @type {?} */\nAccumulationChartComponent.prototype.registerEvents;\n/** @type {?} */\nAccumulationChartComponent.prototype.addTwoWay;\n/** @type {?} */\nAccumulationChartComponent.prototype.ngEle;\n/** @type {?} */\nAccumulationChartComponent.prototype.srenderer;\n/** @type {?} */\nAccumulationChartComponent.prototype.viewContainerRef;\n/** @type {?} */\nAccumulationChartComponent.prototype.injector;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AccumulationSeriesDirective, AccumulationSeriesCollectionDirective } from './series.directive';\nimport { AccumulationAnnotationDirective, AccumulationAnnotationsDirective } from './annotations.directive';\nimport { AccumulationChartComponent } from './accumulationchart.component';\n/**\n * NgModule definition for the AccumulationChart component.\n */\nexport class AccumulationChartModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule],\n    declarations: [\n        AccumulationChartComponent,\n        AccumulationSeriesDirective,\n        AccumulationSeriesCollectionDirective,\n        AccumulationAnnotationDirective,\n        AccumulationAnnotationsDirective\n    ],\n    exports: [\n        AccumulationChartComponent,\n        AccumulationSeriesDirective,\n        AccumulationSeriesCollectionDirective,\n        AccumulationAnnotationDirective,\n        AccumulationAnnotationsDirective\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction AccumulationChartModule_tsickle_Closure_declarations() {\n/** @type {?} */\nAccumulationChartModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAccumulationChartModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ValueProvider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AccumulationSeriesDirective, AccumulationSeriesCollectionDirective } from './series.directive';\nimport { AccumulationAnnotationDirective, AccumulationAnnotationsDirective } from './annotations.directive';\nimport { AccumulationChartComponent } from './accumulationchart.component';\nimport { AccumulationChartModule } from './accumulationchart.module';\nimport {PieSeries, FunnelSeries, PyramidSeries, AccumulationTooltip, AccumulationLegend, AccumulationSelection, AccumulationDataLabel, AccumulationAnnotation} from '@syncfusion/ej2-charts';\n\n\nexport const /** @type {?} */ PieSeriesService: ValueProvider = { provide: 'ChartsPieSeries', useValue: PieSeries};\nexport const /** @type {?} */ FunnelSeriesService: ValueProvider = { provide: 'ChartsFunnelSeries', useValue: FunnelSeries};\nexport const /** @type {?} */ PyramidSeriesService: ValueProvider = { provide: 'ChartsPyramidSeries', useValue: PyramidSeries};\nexport const /** @type {?} */ AccumulationTooltipService: ValueProvider = { provide: 'ChartsAccumulationTooltip', useValue: AccumulationTooltip};\nexport const /** @type {?} */ AccumulationLegendService: ValueProvider = { provide: 'ChartsAccumulationLegend', useValue: AccumulationLegend};\nexport const /** @type {?} */ AccumulationSelectionService: ValueProvider = { provide: 'ChartsAccumulationSelection', useValue: AccumulationSelection};\nexport const /** @type {?} */ AccumulationDataLabelService: ValueProvider = { provide: 'ChartsAccumulationDataLabel', useValue: AccumulationDataLabel};\nexport const /** @type {?} */ AccumulationAnnotationService: ValueProvider = { provide: 'ChartsAccumulationAnnotation', useValue: AccumulationAnnotation};\n/**\n * NgModule definition for the AccumulationChart component with providers.\n */\nexport class AccumulationChartAllModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule, AccumulationChartModule],\n    exports: [\n        AccumulationChartModule\n    ],\n    providers:[\n        PieSeriesService,\n        FunnelSeriesService,\n        PyramidSeriesService,\n        AccumulationTooltipService,\n        AccumulationLegendService,\n        AccumulationSelectionService,\n        AccumulationDataLabelService,\n        AccumulationAnnotationService\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction AccumulationChartAllModule_tsickle_Closure_declarations() {\n/** @type {?} */\nAccumulationChartAllModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAccumulationChartAllModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['animation', 'border', 'dashArray', 'dataSource', 'fill', 'opacity', 'query', 'type', 'width', 'xName', 'yName'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * RangenavigatorSeries Directive\n * ```html\n * <e-rangenavigator-series-collection>\n * <e-rangenavigator-series></e-rangenavigator-series>\n * </e-rangenavigator-series-collection>\n * ```\n */\nexport class RangenavigatorSeriesDirective extends ComplexBase<RangenavigatorSeriesDirective> {\n/**\n * It defines the series type of the range navigator\n */\npublic type: any;\n/**\n * Options to customizing animation for the series.\n */\npublic animation: any;\n/**\n * Options for customizing the color and width of the series border.\n */\npublic border: any;\n/**\n * Defines the pattern of dashes and gaps to stroke the lines in `Line` type series.\n */\npublic dashArray: any;\n/**\n * It defines the data source for a series.\n */\npublic dataSource: any;\n/**\n * The fill color for the series that accepts value in hex and rgba as a valid CSS color string. \n * It also represents the color of the signal lines in technical indicators. \n * For technical indicators, the default value is 'blue' and for series, it has null.\n */\npublic fill: any;\n/**\n * The opacity for the background.\n */\npublic opacity: any;\n/**\n * It defines the query for the data source\n */\npublic query: any;\n/**\n * The stroke width for the series that is applicable only for `Line` type series. \n * It also represents the stroke width of the signal lines in technical indicators.\n */\npublic width: any;\n/**\n * It defines the xName for the series\n */\npublic xName: any;\n/**\n * It defines the yName for the series\n */\npublic yName: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-rangenavigator-series-collection>e-rangenavigator-series',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction RangenavigatorSeriesDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nRangenavigatorSeriesDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRangenavigatorSeriesDirective.ctorParameters;\n/**\n * It defines the series type of the range navigator\n * @type {?}\n */\nRangenavigatorSeriesDirective.prototype.type;\n/**\n * Options to customizing animation for the series.\n * @type {?}\n */\nRangenavigatorSeriesDirective.prototype.animation;\n/**\n * Options for customizing the color and width of the series border.\n * @type {?}\n */\nRangenavigatorSeriesDirective.prototype.border;\n/**\n * Defines the pattern of dashes and gaps to stroke the lines in `Line` type series.\n * @type {?}\n */\nRangenavigatorSeriesDirective.prototype.dashArray;\n/**\n * It defines the data source for a series.\n * @type {?}\n */\nRangenavigatorSeriesDirective.prototype.dataSource;\n/**\n * The fill color for the series that accepts value in hex and rgba as a valid CSS color string. \n * It also represents the color of the signal lines in technical indicators. \n * For technical indicators, the default value is 'blue' and for series, it has null.\n * @type {?}\n */\nRangenavigatorSeriesDirective.prototype.fill;\n/**\n * The opacity for the background.\n * @type {?}\n */\nRangenavigatorSeriesDirective.prototype.opacity;\n/**\n * It defines the query for the data source\n * @type {?}\n */\nRangenavigatorSeriesDirective.prototype.query;\n/**\n * The stroke width for the series that is applicable only for `Line` type series. \n * It also represents the stroke width of the signal lines in technical indicators.\n * @type {?}\n */\nRangenavigatorSeriesDirective.prototype.width;\n/**\n * It defines the xName for the series\n * @type {?}\n */\nRangenavigatorSeriesDirective.prototype.xName;\n/**\n * It defines the yName for the series\n * @type {?}\n */\nRangenavigatorSeriesDirective.prototype.yName;\n/** @type {?} */\nRangenavigatorSeriesDirective.prototype.viewContainerRef;\n}\n\n/**\n * RangenavigatorSeries Array Directive\n */\nexport class RangenavigatorSeriesCollectionDirective extends ArrayBase<RangenavigatorSeriesCollectionDirective> {\nconstructor() {\n        super('series');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ej-rangenavigator>e-rangenavigator-series-collection',\n    queries: {\n        children: new ContentChildren(RangenavigatorSeriesDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction RangenavigatorSeriesCollectionDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nRangenavigatorSeriesCollectionDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRangenavigatorSeriesCollectionDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ElementRef, ViewContainerRef, ChangeDetectionStrategy, Renderer2, Injector, ValueProvider, ContentChild } from '@angular/core';\nimport { ComponentBase, IComponentBase, applyMixins, ComponentMixins, PropertyCollectionInfo, setValue } from '@syncfusion/ej2-angular-base';\nimport { RangeNavigator } from '@syncfusion/ej2-charts';\nimport { Template } from '@syncfusion/ej2-angular-base';\nimport { RangenavigatorSeriesCollectionDirective } from './series.directive';\n\nexport const /** @type {?} */ inputs: string[] = ['allowSnapping','animationDuration','dataSource','disableRangeSelector','enableDeferredUpdate','enableGrouping','enablePersistence','enableRtl','groupBy','height','interval','intervalType','labelFormat','labelIntersectAction','labelPosition','labelStyle','locale','logBase','majorGridLines','majorTickLines','margin','maximum','minimum','navigatorBorder','navigatorStyleSettings','periodSelectorSettings','query','secondaryLabelAlignment','series','skeleton','skeletonType','theme','tickPosition','tooltip','useGroupingSeparator','value','valueType','width','xName','yName'];\nexport const /** @type {?} */ outputs: string[] = ['beforePrint','changed','labelRender','load','loaded','resized','selectorRender','tooltipRender','dataSourceChange'];\nexport const /** @type {?} */ twoWays: string[] = ['dataSource'];\n/**\n * RangeNavigator Component\n * ```html\n * <ejs-rangenavigator></ejs-rangenavigator>\n * ```\n */\n@ComponentMixins([ComponentBase])\nexport class RangeNavigatorComponent extends RangeNavigator implements IComponentBase {\npublic childSeries: any;\npublic tags: string[] = ['series'];\npublic dataSourceChange: any;\n    \n    @Template()\npublic tooltip_template: any;\n/**\n * @param {?} ngEle\n * @param {?} srenderer\n * @param {?} viewContainerRef\n * @param {?} injector\n */\nconstructor(private ngEle: ElementRef,\nprivate srenderer: Renderer2,\nprivate viewContainerRef:ViewContainerRef,\nprivate injector: Injector) {\n        super();\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n        try {\n                let mod = this.injector.get('ChartsRangeTooltip');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsPeriodSelector');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsAreaSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsStepLineSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsDateTime');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsLogarithmic');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsExport');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n\n        this.registerEvents(outputs);\n        this.addTwoWay.call(this, twoWays);\n        setValue('currentInstance', this, this.viewContainerRef);\n    }\n/**\n * @return {?}\n */\npublic ngOnInit() {\n    }\n/**\n * @return {?}\n */\npublic ngAfterViewInit(): void {\n    }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\n    }\n/**\n * @return {?}\n */\npublic ngAfterContentChecked(): void {\n    }\npublic registerEvents: (eventList: string[]) => void;\npublic addTwoWay: (propList: string[]) => void;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'ejs-rangenavigator',\n    inputs: inputs,\n    outputs: outputs,\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    queries: {\n        childSeries: new ContentChild(RangenavigatorSeriesCollectionDirective)\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ViewContainerRef, },\n{type: Injector, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'tooltip_template': [{ type: ContentChild, args: ['tooltipTemplate', ] },],\n};\n}\n\nfunction RangeNavigatorComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nRangeNavigatorComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRangeNavigatorComponent.ctorParameters;\n/** @type {?} */\nRangeNavigatorComponent.propDecorators;\n/** @type {?} */\nRangeNavigatorComponent.prototype.childSeries;\n/** @type {?} */\nRangeNavigatorComponent.prototype.tags;\n/** @type {?} */\nRangeNavigatorComponent.prototype.dataSourceChange;\n/** @type {?} */\nRangeNavigatorComponent.prototype.tooltip_template;\n/** @type {?} */\nRangeNavigatorComponent.prototype.registerEvents;\n/** @type {?} */\nRangeNavigatorComponent.prototype.addTwoWay;\n/** @type {?} */\nRangeNavigatorComponent.prototype.ngEle;\n/** @type {?} */\nRangeNavigatorComponent.prototype.srenderer;\n/** @type {?} */\nRangeNavigatorComponent.prototype.viewContainerRef;\n/** @type {?} */\nRangeNavigatorComponent.prototype.injector;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RangenavigatorSeriesDirective, RangenavigatorSeriesCollectionDirective } from './series.directive';\nimport { RangeNavigatorComponent } from './rangenavigator.component';\n/**\n * NgModule definition for the RangeNavigator component.\n */\nexport class RangeNavigatorModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule],\n    declarations: [\n        RangeNavigatorComponent,\n        RangenavigatorSeriesDirective,\n        RangenavigatorSeriesCollectionDirective\n    ],\n    exports: [\n        RangeNavigatorComponent,\n        RangenavigatorSeriesDirective,\n        RangenavigatorSeriesCollectionDirective\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction RangeNavigatorModule_tsickle_Closure_declarations() {\n/** @type {?} */\nRangeNavigatorModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRangeNavigatorModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ValueProvider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RangenavigatorSeriesDirective, RangenavigatorSeriesCollectionDirective } from './series.directive';\nimport { RangeNavigatorComponent } from './rangenavigator.component';\nimport { RangeNavigatorModule } from './rangenavigator.module';\nimport {RangeTooltip, PeriodSelector} from '@syncfusion/ej2-charts';\n\n\nexport const /** @type {?} */ RangeTooltipService: ValueProvider = { provide: 'ChartsRangeTooltip', useValue: RangeTooltip};\nexport const /** @type {?} */ PeriodSelectorService: ValueProvider = { provide: 'ChartsPeriodSelector', useValue: PeriodSelector};\n/**\n * NgModule definition for the RangeNavigator component with providers.\n */\nexport class RangeNavigatorAllModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule, RangeNavigatorModule],\n    exports: [\n        RangeNavigatorModule\n    ],\n    providers:[\n        RangeTooltipService,\n        PeriodSelectorService\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction RangeNavigatorAllModule_tsickle_Closure_declarations() {\n/** @type {?} */\nRangeNavigatorAllModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRangeNavigatorAllModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['color', 'endRange', 'opacity', 'startRange'];\nlet /** @type {?} */ outputs: string[] = [];\nexport class RangeBandSettingDirective extends ComplexBase<RangeBandSettingDirective> {\n/**\n * To configure sparkline rangeband color\n */\npublic color: any;\n/**\n * To configure sparkline end range\n */\npublic endRange: any;\n/**\n * To configure sparkline rangeband opacity\n */\npublic opacity: any;\n/**\n * To configure sparkline start range\n */\npublic startRange: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-rangeBandSettings>e-rangeBandSetting',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction RangeBandSettingDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nRangeBandSettingDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRangeBandSettingDirective.ctorParameters;\n/**\n * To configure sparkline rangeband color\n * @type {?}\n */\nRangeBandSettingDirective.prototype.color;\n/**\n * To configure sparkline end range\n * @type {?}\n */\nRangeBandSettingDirective.prototype.endRange;\n/**\n * To configure sparkline rangeband opacity\n * @type {?}\n */\nRangeBandSettingDirective.prototype.opacity;\n/**\n * To configure sparkline start range\n * @type {?}\n */\nRangeBandSettingDirective.prototype.startRange;\n/** @type {?} */\nRangeBandSettingDirective.prototype.viewContainerRef;\n}\n\n/**\n * RangeBandSetting Array Directive\n */\nexport class RangeBandSettingsDirective extends ArrayBase<RangeBandSettingsDirective> {\nconstructor() {\n        super('rangebandsettings');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-sparkline>e-rangeBandSettings',\n    queries: {\n        children: new ContentChildren(RangeBandSettingDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction RangeBandSettingsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nRangeBandSettingsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRangeBandSettingsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ElementRef, ViewContainerRef, ChangeDetectionStrategy, Renderer2, Injector, ValueProvider, ContentChild } from '@angular/core';\nimport { ComponentBase, IComponentBase, applyMixins, ComponentMixins, PropertyCollectionInfo, setValue } from '@syncfusion/ej2-angular-base';\nimport { Sparkline } from '@syncfusion/ej2-charts';\n\nimport { RangeBandSettingsDirective } from './rangebandsettings.directive';\n\nexport const /** @type {?} */ inputs: string[] = ['axisSettings','border','containerArea','dataLabelSettings','dataSource','enablePersistence','enableRtl','endPointColor','fill','format','height','highPointColor','lineWidth','locale','lowPointColor','markerSettings','negativePointColor','opacity','padding','palette','query','rangeBandSettings','startPointColor','theme','tiePointColor','tooltipSettings','type','useGroupingSeparator','valueType','width','xName','yName'];\nexport const /** @type {?} */ outputs: string[] = ['axisRendering','dataLabelRendering','load','loaded','markerRendering','pointRegionMouseClick','pointRegionMouseMove','pointRendering','resize','seriesRendering','sparklineMouseClick','sparklineMouseMove','tooltipInitialize'];\nexport const /** @type {?} */ twoWays: string[] = [''];\n/**\n * Sparkline Component\n * ```html\n * <ejs-sparkline></ejs-sparkline>\n * ```\n */\n@ComponentMixins([ComponentBase])\nexport class SparklineComponent extends Sparkline implements IComponentBase {\npublic childRangeBandSettings: any;\npublic tags: string[] = ['rangeBandSettings'];\n/**\n * @param {?} ngEle\n * @param {?} srenderer\n * @param {?} viewContainerRef\n * @param {?} injector\n */\nconstructor(private ngEle: ElementRef,\nprivate srenderer: Renderer2,\nprivate viewContainerRef:ViewContainerRef,\nprivate injector: Injector) {\n        super();\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n        try {\n                let mod = this.injector.get('ChartsSparklineTooltip');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n\n        this.registerEvents(outputs);\n        this.addTwoWay.call(this, twoWays);\n        setValue('currentInstance', this, this.viewContainerRef);\n    }\n/**\n * @return {?}\n */\npublic ngOnInit() {\n    }\n/**\n * @return {?}\n */\npublic ngAfterViewInit(): void {\n    }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\n    }\n/**\n * @return {?}\n */\npublic ngAfterContentChecked(): void {\n    }\npublic registerEvents: (eventList: string[]) => void;\npublic addTwoWay: (propList: string[]) => void;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'ejs-sparkline',\n    inputs: inputs,\n    outputs: outputs,\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    queries: {\n        childRangeBandSettings: new ContentChild(RangeBandSettingsDirective)\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ViewContainerRef, },\n{type: Injector, },\n];\n}\n\nfunction SparklineComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nSparklineComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSparklineComponent.ctorParameters;\n/** @type {?} */\nSparklineComponent.prototype.childRangeBandSettings;\n/** @type {?} */\nSparklineComponent.prototype.tags;\n/** @type {?} */\nSparklineComponent.prototype.registerEvents;\n/** @type {?} */\nSparklineComponent.prototype.addTwoWay;\n/** @type {?} */\nSparklineComponent.prototype.ngEle;\n/** @type {?} */\nSparklineComponent.prototype.srenderer;\n/** @type {?} */\nSparklineComponent.prototype.viewContainerRef;\n/** @type {?} */\nSparklineComponent.prototype.injector;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RangeBandSettingDirective, RangeBandSettingsDirective } from './rangebandsettings.directive';\nimport { SparklineComponent } from './sparkline.component';\n/**\n * NgModule definition for the Sparkline component.\n */\nexport class SparklineModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule],\n    declarations: [\n        SparklineComponent,\n        RangeBandSettingDirective,\n        RangeBandSettingsDirective\n    ],\n    exports: [\n        SparklineComponent,\n        RangeBandSettingDirective,\n        RangeBandSettingsDirective\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SparklineModule_tsickle_Closure_declarations() {\n/** @type {?} */\nSparklineModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSparklineModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ValueProvider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RangeBandSettingDirective, RangeBandSettingsDirective } from './rangebandsettings.directive';\nimport { SparklineComponent } from './sparkline.component';\nimport { SparklineModule } from './sparkline.module';\nimport {SparklineTooltip} from '@syncfusion/ej2-charts';\n\n\nexport const /** @type {?} */ SparklineTooltipService: ValueProvider = { provide: 'ChartsSparklineTooltip', useValue: SparklineTooltip};\n/**\n * NgModule definition for the Sparkline component with providers.\n */\nexport class SparklineAllModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule, SparklineModule],\n    exports: [\n        SparklineModule\n    ],\n    providers:[\n        SparklineTooltipService\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SparklineAllModule_tsickle_Closure_declarations() {\n/** @type {?} */\nSparklineAllModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSparklineAllModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['animationDuration', 'dataSource', 'enableAnimation', 'enableSmartLabels', 'fill', 'marker', 'name', 'opacity', 'points', 'reactance', 'resistance', 'tooltip', 'visibility', 'width'];\nlet /** @type {?} */ outputs: string[] = [];\nexport class SmithchartSeriesDirective extends ComplexBase<SmithchartSeriesDirective> {\n/**\n * perform animation of series based on animation duration.\n */\npublic animationDuration: any;\n/**\n *  Specifies the dataSource\n */\npublic dataSource: any;\n/**\n * enable or disable the animation of series.\n */\npublic enableAnimation: any;\n/**\n * avoid the overlap of dataLabels.\n */\npublic enableSmartLabels: any;\n/**\n * color for series.\n */\npublic fill: any;\n/**\n *  options for customizing marker\n */\npublic marker: any;\n/**\n * The name of the series visible in legend.\n */\npublic name: any;\n/**\n * opacity for series.\n */\npublic opacity: any;\n/**\n * points for series.\n */\npublic points: any;\n/**\n * reactance name for dataSource\n */\npublic reactance: any;\n/**\n * resistance name for dataSource\n */\npublic resistance: any;\n/**\n *  options for customizing tooltip\n */\npublic tooltip: any;\n/**\n * visibility for series.\n */\npublic visibility: any;\n/**\n * width for series.\n */\npublic width: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-seriesCollection>e-series',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction SmithchartSeriesDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nSmithchartSeriesDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSmithchartSeriesDirective.ctorParameters;\n/**\n * perform animation of series based on animation duration.\n * @type {?}\n */\nSmithchartSeriesDirective.prototype.animationDuration;\n/**\n *  Specifies the dataSource\n * @type {?}\n */\nSmithchartSeriesDirective.prototype.dataSource;\n/**\n * enable or disable the animation of series.\n * @type {?}\n */\nSmithchartSeriesDirective.prototype.enableAnimation;\n/**\n * avoid the overlap of dataLabels.\n * @type {?}\n */\nSmithchartSeriesDirective.prototype.enableSmartLabels;\n/**\n * color for series.\n * @type {?}\n */\nSmithchartSeriesDirective.prototype.fill;\n/**\n *  options for customizing marker\n * @type {?}\n */\nSmithchartSeriesDirective.prototype.marker;\n/**\n * The name of the series visible in legend.\n * @type {?}\n */\nSmithchartSeriesDirective.prototype.name;\n/**\n * opacity for series.\n * @type {?}\n */\nSmithchartSeriesDirective.prototype.opacity;\n/**\n * points for series.\n * @type {?}\n */\nSmithchartSeriesDirective.prototype.points;\n/**\n * reactance name for dataSource\n * @type {?}\n */\nSmithchartSeriesDirective.prototype.reactance;\n/**\n * resistance name for dataSource\n * @type {?}\n */\nSmithchartSeriesDirective.prototype.resistance;\n/**\n *  options for customizing tooltip\n * @type {?}\n */\nSmithchartSeriesDirective.prototype.tooltip;\n/**\n * visibility for series.\n * @type {?}\n */\nSmithchartSeriesDirective.prototype.visibility;\n/**\n * width for series.\n * @type {?}\n */\nSmithchartSeriesDirective.prototype.width;\n/** @type {?} */\nSmithchartSeriesDirective.prototype.viewContainerRef;\n}\n\n/**\n * SmithchartSeries Array Directive\n */\nexport class SmithchartSeriesCollectionDirective extends ArrayBase<SmithchartSeriesCollectionDirective> {\nconstructor() {\n        super('series');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-smithchart>e-seriesCollection',\n    queries: {\n        children: new ContentChildren(SmithchartSeriesDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SmithchartSeriesCollectionDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nSmithchartSeriesCollectionDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSmithchartSeriesCollectionDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ElementRef, ViewContainerRef, ChangeDetectionStrategy, Renderer2, Injector, ValueProvider, ContentChild } from '@angular/core';\nimport { ComponentBase, IComponentBase, applyMixins, ComponentMixins, PropertyCollectionInfo, setValue } from '@syncfusion/ej2-angular-base';\nimport { Smithchart } from '@syncfusion/ej2-charts';\n\nimport { SmithchartSeriesCollectionDirective } from './series.directive';\n\nexport const /** @type {?} */ inputs: string[] = ['background','border','elementSpacing','enablePersistence','enableRtl','font','height','horizontalAxis','legendSettings','locale','margin','radialAxis','radius','renderType','series','theme','title','width'];\nexport const /** @type {?} */ outputs: string[] = ['animationComplete','axisLabelRender','beforePrint','legendRender','load','loaded','seriesRender','subtitleRender','textRender','titleRender'];\nexport const /** @type {?} */ twoWays: string[] = [''];\n/**\n * Smithchart Component\n * ```html\n * <ejs-smithchart></ejs-smithchart>\n * ```\n */\n@ComponentMixins([ComponentBase])\nexport class SmithchartComponent extends Smithchart implements IComponentBase {\npublic childSeries: any;\npublic tags: string[] = ['series'];\n/**\n * @param {?} ngEle\n * @param {?} srenderer\n * @param {?} viewContainerRef\n * @param {?} injector\n */\nconstructor(private ngEle: ElementRef,\nprivate srenderer: Renderer2,\nprivate viewContainerRef:ViewContainerRef,\nprivate injector: Injector) {\n        super();\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n        try {\n                let mod = this.injector.get('ChartsSmithchartLegend');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsTooltipRender');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n\n        this.registerEvents(outputs);\n        this.addTwoWay.call(this, twoWays);\n        setValue('currentInstance', this, this.viewContainerRef);\n    }\n/**\n * @return {?}\n */\npublic ngOnInit() {\n    }\n/**\n * @return {?}\n */\npublic ngAfterViewInit(): void {\n    }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\n    }\n/**\n * @return {?}\n */\npublic ngAfterContentChecked(): void {\n    }\npublic registerEvents: (eventList: string[]) => void;\npublic addTwoWay: (propList: string[]) => void;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'ejs-smithchart',\n    inputs: inputs,\n    outputs: outputs,\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    queries: {\n        childSeries: new ContentChild(SmithchartSeriesCollectionDirective)\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ViewContainerRef, },\n{type: Injector, },\n];\n}\n\nfunction SmithchartComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nSmithchartComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSmithchartComponent.ctorParameters;\n/** @type {?} */\nSmithchartComponent.prototype.childSeries;\n/** @type {?} */\nSmithchartComponent.prototype.tags;\n/** @type {?} */\nSmithchartComponent.prototype.registerEvents;\n/** @type {?} */\nSmithchartComponent.prototype.addTwoWay;\n/** @type {?} */\nSmithchartComponent.prototype.ngEle;\n/** @type {?} */\nSmithchartComponent.prototype.srenderer;\n/** @type {?} */\nSmithchartComponent.prototype.viewContainerRef;\n/** @type {?} */\nSmithchartComponent.prototype.injector;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SmithchartSeriesDirective, SmithchartSeriesCollectionDirective } from './series.directive';\nimport { SmithchartComponent } from './smithchart.component';\n/**\n * NgModule definition for the Smithchart component.\n */\nexport class SmithchartModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule],\n    declarations: [\n        SmithchartComponent,\n        SmithchartSeriesDirective,\n        SmithchartSeriesCollectionDirective\n    ],\n    exports: [\n        SmithchartComponent,\n        SmithchartSeriesDirective,\n        SmithchartSeriesCollectionDirective\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SmithchartModule_tsickle_Closure_declarations() {\n/** @type {?} */\nSmithchartModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSmithchartModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ValueProvider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SmithchartSeriesDirective, SmithchartSeriesCollectionDirective } from './series.directive';\nimport { SmithchartComponent } from './smithchart.component';\nimport { SmithchartModule } from './smithchart.module';\nimport {SmithchartLegend, TooltipRender} from '@syncfusion/ej2-charts';\n\n\nexport const /** @type {?} */ SmithchartLegendService: ValueProvider = { provide: 'ChartsSmithchartLegend', useValue: SmithchartLegend};\nexport const /** @type {?} */ TooltipRenderService: ValueProvider = { provide: 'ChartsTooltipRender', useValue: TooltipRender};\n/**\n * NgModule definition for the Smithchart component with providers.\n */\nexport class SmithchartAllModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule, SmithchartModule],\n    exports: [\n        SmithchartModule\n    ],\n    providers:[\n        SmithchartLegendService,\n        TooltipRenderService\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SmithchartAllModule_tsickle_Closure_declarations() {\n/** @type {?} */\nSmithchartAllModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSmithchartAllModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['animation', 'backwardForecast', 'dashArray', 'enableTooltip', 'fill', 'forwardForecast', 'intercept', 'legendShape', 'marker', 'name', 'period', 'polynomialOrder', 'type', 'visible', 'width'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Series Directive\n * ```html\n * <e-stockchart-series-collection>\n * <e-stockchart-series>\n * <e-trendlines>\n * </e-trendline>\n * <e-trendline>\n * </e-trendlines>\n * </e-stockchart-series>\n * </e-stockchart-series-collection>\n * ```\n */\nexport class StockChartTrendlineDirective extends ComplexBase<StockChartTrendlineDirective> {\n/**\n * Defines the type of the trendline\n */\npublic type: any;\n/**\n * Options to customize the animation for trendlines\n */\npublic animation: any;\n/**\n * Defines the period, by which the trend has to backward forecast\n */\npublic backwardForecast: any;\n/**\n * Defines the pattern of dashes and gaps to stroke.\n */\npublic dashArray: any;\n/**\n * Enables/disables tooltip for trendlines\n */\npublic enableTooltip: any;\n/**\n * Defines the fill color of trendline\n */\npublic fill: any;\n/**\n * Defines the period, by which the trend has to forward forecast\n */\npublic forwardForecast: any;\n/**\n * Defines the intercept of the trendline\n */\npublic intercept: any;\n/**\n * Sets the legend shape of the trendline\n */\npublic legendShape: any;\n/**\n * Options to customize the marker for trendlines\n */\npublic marker: any;\n/**\n * Defines the name of trendline\n */\npublic name: any;\n/**\n * Defines the period, the price changes over which will be considered to predict moving average trend line\n */\npublic period: any;\n/**\n * Defines the polynomial order of the polynomial trendline\n */\npublic polynomialOrder: any;\n/**\n * Specifies the visibility of trendline.\n */\npublic visible: any;\n/**\n * Defines the width of the trendline\n */\npublic width: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-stockchart-series>e-trendlines>e-trendline',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction StockChartTrendlineDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nStockChartTrendlineDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStockChartTrendlineDirective.ctorParameters;\n/**\n * Defines the type of the trendline\n * @type {?}\n */\nStockChartTrendlineDirective.prototype.type;\n/**\n * Options to customize the animation for trendlines\n * @type {?}\n */\nStockChartTrendlineDirective.prototype.animation;\n/**\n * Defines the period, by which the trend has to backward forecast\n * @type {?}\n */\nStockChartTrendlineDirective.prototype.backwardForecast;\n/**\n * Defines the pattern of dashes and gaps to stroke.\n * @type {?}\n */\nStockChartTrendlineDirective.prototype.dashArray;\n/**\n * Enables/disables tooltip for trendlines\n * @type {?}\n */\nStockChartTrendlineDirective.prototype.enableTooltip;\n/**\n * Defines the fill color of trendline\n * @type {?}\n */\nStockChartTrendlineDirective.prototype.fill;\n/**\n * Defines the period, by which the trend has to forward forecast\n * @type {?}\n */\nStockChartTrendlineDirective.prototype.forwardForecast;\n/**\n * Defines the intercept of the trendline\n * @type {?}\n */\nStockChartTrendlineDirective.prototype.intercept;\n/**\n * Sets the legend shape of the trendline\n * @type {?}\n */\nStockChartTrendlineDirective.prototype.legendShape;\n/**\n * Options to customize the marker for trendlines\n * @type {?}\n */\nStockChartTrendlineDirective.prototype.marker;\n/**\n * Defines the name of trendline\n * @type {?}\n */\nStockChartTrendlineDirective.prototype.name;\n/**\n * Defines the period, the price changes over which will be considered to predict moving average trend line\n * @type {?}\n */\nStockChartTrendlineDirective.prototype.period;\n/**\n * Defines the polynomial order of the polynomial trendline\n * @type {?}\n */\nStockChartTrendlineDirective.prototype.polynomialOrder;\n/**\n * Specifies the visibility of trendline.\n * @type {?}\n */\nStockChartTrendlineDirective.prototype.visible;\n/**\n * Defines the width of the trendline\n * @type {?}\n */\nStockChartTrendlineDirective.prototype.width;\n/** @type {?} */\nStockChartTrendlineDirective.prototype.viewContainerRef;\n}\n\n/**\n * StockChartTrendline Array Directive\n */\nexport class StockChartTrendlinesDirective extends ArrayBase<StockChartTrendlinesDirective> {\nconstructor() {\n        super('trendlines');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-stockchart-series>e-trendlines',\n    queries: {\n        children: new ContentChildren(StockChartTrendlineDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction StockChartTrendlinesDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nStockChartTrendlinesDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStockChartTrendlinesDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren, ContentChild } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\nimport { StockChartTrendlinesDirective } from './trendlines.directive';\n\nlet /** @type {?} */ input: string[] = ['animation', 'bearFillColor', 'border', 'bullFillColor', 'cardinalSplineTension', 'close', 'columnSpacing', 'columnWidth', 'cornerRadius', 'dashArray', 'dataSource', 'emptyPointSettings', 'enableSolidCandles', 'enableTooltip', 'fill', 'high', 'low', 'marker', 'name', 'opacity', 'open', 'pointColorMapping', 'query', 'selectionStyle', 'tooltipMappingName', 'trendlines', 'type', 'visible', 'volume', 'width', 'xAxisName', 'xName', 'yAxisName', 'yName'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Series Directive\n * ```html\n * <e-stockchart-series-collection>\n * <e-stockchart-series></e-stockchart-series>\n * </e-stockchart-series-collection>\n * ```\n */\nexport class StockChartSeriesDirective extends ComplexBase<StockChartSeriesDirective> {\npublic childTrendlines: any;\npublic tags: string[] = ['trendlines'];\n/**\n * The type of the series are \n * * Line \n * * Column \n * * Area \n * * Spline \n * * Hilo \n * * HiloOpenClose \n * * Candle\n */\npublic type: any;\n/**\n * Options to customizing animation for the series.\n */\npublic animation: any;\n/**\n * This property is used in stock charts to visualize the price movements in stock. \n * It defines the color of the candle/point, when the opening price is less than the closing price.\n */\npublic bearFillColor: any;\n/**\n * Options to customizing the border of the series. This is applicable only for `Column` and `Bar` type series.\n */\npublic border: any;\n/**\n * This property is used in financial charts to visualize the price movements in stock. \n * It defines the color of the candle/point, when the opening price is higher than the closing price.\n */\npublic bullFillColor: any;\n/**\n * It defines tension of cardinal spline types\n */\npublic cardinalSplineTension: any;\n/**\n * The DataSource field that contains the close value of y \n * It is applicable for series and technical indicators\n */\npublic close: any;\n/**\n * To render the column series points with particular column spacing. It takes value from 0 - 1.\n */\npublic columnSpacing: any;\n/**\n * To render the column series points with particular column width. If the series type is histogram the \n * default value is 1 otherwise 0.7.\n */\npublic columnWidth: any;\n/**\n * To render the column series points with particular rounded corner.\n */\npublic cornerRadius: any;\n/**\n * Defines the pattern of dashes and gaps to stroke the lines in `Line` type series.\n */\npublic dashArray: any;\n/**\n * Specifies the DataSource for the series. It can be an array of JSON objects or an instance of DataManager.\n */\npublic dataSource: any;\n/**\n * options to customize the empty points in series\n */\npublic emptyPointSettings: any;\n/**\n * This property is applicable for candle series. \n * It enables/disables to visually compare the current values with the previous values in stock.\n */\npublic enableSolidCandles: any;\n/**\n * If set true, the Tooltip for series will be visible.\n */\npublic enableTooltip: any;\n/**\n * The fill color for the series that accepts value in hex and rgba as a valid CSS color string. \n * It also represents the color of the signal lines in technical indicators. \n * For technical indicators, the default value is 'blue' and for series, it has null.\n */\npublic fill: any;\n/**\n * The DataSource field that contains the high value of y \n * It is applicable for series and technical indicators\n */\npublic high: any;\n/**\n * The DataSource field that contains the low value of y \n * It is applicable for series and technical indicators\n */\npublic low: any;\n/**\n * Options for displaying and customizing markers for individual points in a series.\n */\npublic marker: any;\n/**\n * The name of the series visible in legend.\n */\npublic name: any;\n/**\n * The opacity of the series.\n */\npublic opacity: any;\n/**\n * The DataSource field that contains the open value of y \n * It is applicable for series and technical indicators\n */\npublic open: any;\n/**\n * The DataSource field that contains the color value of point \n * It is applicable for series\n */\npublic pointColorMapping: any;\n/**\n * Specifies query to select data from DataSource. This property is applicable only when the DataSource is `ej.DataManager`.\n */\npublic query: any;\n/**\n * Custom style for the selected series or points.\n */\npublic selectionStyle: any;\n/**\n * The provided value will be considered as a Tooltip name\n */\npublic tooltipMappingName: any;\n/**\n * Defines the collection of trendlines that are used to predict the trend\n */\npublic trendlines: any;\n/**\n * Specifies the visibility of series.\n */\npublic visible: any;\n/**\n * Defines the data source field that contains the volume value in candle charts \n * It is applicable for financial series and technical indicators\n */\npublic volume: any;\n/**\n * The stroke width for the series that is applicable only for `Line` type series. \n * It also represents the stroke width of the signal lines in technical indicators.\n */\npublic width: any;\n/**\n * The name of the horizontal axis associated with the series. It requires `axes` of the chart. \n * It is applicable for series and technical indicators\n */\npublic xAxisName: any;\n/**\n * The DataSource field that contains the x value. \n * It is applicable for series and technical indicators\n */\npublic xName: any;\n/**\n * The name of the vertical axis associated with the series. It requires `axes` of the chart. \n * It is applicable for series and technical indicators\n */\npublic yAxisName: any;\n/**\n * The DataSource field that contains the y value.\n */\npublic yName: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-stockchart-series-collection>e-stockchart-series',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n        childTrendlines: new ContentChild(StockChartTrendlinesDirective)\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction StockChartSeriesDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nStockChartSeriesDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStockChartSeriesDirective.ctorParameters;\n/** @type {?} */\nStockChartSeriesDirective.prototype.childTrendlines;\n/** @type {?} */\nStockChartSeriesDirective.prototype.tags;\n/**\n * The type of the series are \n * * Line \n * * Column \n * * Area \n * * Spline \n * * Hilo \n * * HiloOpenClose \n * * Candle\n * @type {?}\n */\nStockChartSeriesDirective.prototype.type;\n/**\n * Options to customizing animation for the series.\n * @type {?}\n */\nStockChartSeriesDirective.prototype.animation;\n/**\n * This property is used in stock charts to visualize the price movements in stock. \n * It defines the color of the candle/point, when the opening price is less than the closing price.\n * @type {?}\n */\nStockChartSeriesDirective.prototype.bearFillColor;\n/**\n * Options to customizing the border of the series. This is applicable only for `Column` and `Bar` type series.\n * @type {?}\n */\nStockChartSeriesDirective.prototype.border;\n/**\n * This property is used in financial charts to visualize the price movements in stock. \n * It defines the color of the candle/point, when the opening price is higher than the closing price.\n * @type {?}\n */\nStockChartSeriesDirective.prototype.bullFillColor;\n/**\n * It defines tension of cardinal spline types\n * @type {?}\n */\nStockChartSeriesDirective.prototype.cardinalSplineTension;\n/**\n * The DataSource field that contains the close value of y \n * It is applicable for series and technical indicators\n * @type {?}\n */\nStockChartSeriesDirective.prototype.close;\n/**\n * To render the column series points with particular column spacing. It takes value from 0 - 1.\n * @type {?}\n */\nStockChartSeriesDirective.prototype.columnSpacing;\n/**\n * To render the column series points with particular column width. If the series type is histogram the \n * default value is 1 otherwise 0.7.\n * @type {?}\n */\nStockChartSeriesDirective.prototype.columnWidth;\n/**\n * To render the column series points with particular rounded corner.\n * @type {?}\n */\nStockChartSeriesDirective.prototype.cornerRadius;\n/**\n * Defines the pattern of dashes and gaps to stroke the lines in `Line` type series.\n * @type {?}\n */\nStockChartSeriesDirective.prototype.dashArray;\n/**\n * Specifies the DataSource for the series. It can be an array of JSON objects or an instance of DataManager.\n * @type {?}\n */\nStockChartSeriesDirective.prototype.dataSource;\n/**\n * options to customize the empty points in series\n * @type {?}\n */\nStockChartSeriesDirective.prototype.emptyPointSettings;\n/**\n * This property is applicable for candle series. \n * It enables/disables to visually compare the current values with the previous values in stock.\n * @type {?}\n */\nStockChartSeriesDirective.prototype.enableSolidCandles;\n/**\n * If set true, the Tooltip for series will be visible.\n * @type {?}\n */\nStockChartSeriesDirective.prototype.enableTooltip;\n/**\n * The fill color for the series that accepts value in hex and rgba as a valid CSS color string. \n * It also represents the color of the signal lines in technical indicators. \n * For technical indicators, the default value is 'blue' and for series, it has null.\n * @type {?}\n */\nStockChartSeriesDirective.prototype.fill;\n/**\n * The DataSource field that contains the high value of y \n * It is applicable for series and technical indicators\n * @type {?}\n */\nStockChartSeriesDirective.prototype.high;\n/**\n * The DataSource field that contains the low value of y \n * It is applicable for series and technical indicators\n * @type {?}\n */\nStockChartSeriesDirective.prototype.low;\n/**\n * Options for displaying and customizing markers for individual points in a series.\n * @type {?}\n */\nStockChartSeriesDirective.prototype.marker;\n/**\n * The name of the series visible in legend.\n * @type {?}\n */\nStockChartSeriesDirective.prototype.name;\n/**\n * The opacity of the series.\n * @type {?}\n */\nStockChartSeriesDirective.prototype.opacity;\n/**\n * The DataSource field that contains the open value of y \n * It is applicable for series and technical indicators\n * @type {?}\n */\nStockChartSeriesDirective.prototype.open;\n/**\n * The DataSource field that contains the color value of point \n * It is applicable for series\n * @type {?}\n */\nStockChartSeriesDirective.prototype.pointColorMapping;\n/**\n * Specifies query to select data from DataSource. This property is applicable only when the DataSource is `ej.DataManager`.\n * @type {?}\n */\nStockChartSeriesDirective.prototype.query;\n/**\n * Custom style for the selected series or points.\n * @type {?}\n */\nStockChartSeriesDirective.prototype.selectionStyle;\n/**\n * The provided value will be considered as a Tooltip name\n * @type {?}\n */\nStockChartSeriesDirective.prototype.tooltipMappingName;\n/**\n * Defines the collection of trendlines that are used to predict the trend\n * @type {?}\n */\nStockChartSeriesDirective.prototype.trendlines;\n/**\n * Specifies the visibility of series.\n * @type {?}\n */\nStockChartSeriesDirective.prototype.visible;\n/**\n * Defines the data source field that contains the volume value in candle charts \n * It is applicable for financial series and technical indicators\n * @type {?}\n */\nStockChartSeriesDirective.prototype.volume;\n/**\n * The stroke width for the series that is applicable only for `Line` type series. \n * It also represents the stroke width of the signal lines in technical indicators.\n * @type {?}\n */\nStockChartSeriesDirective.prototype.width;\n/**\n * The name of the horizontal axis associated with the series. It requires `axes` of the chart. \n * It is applicable for series and technical indicators\n * @type {?}\n */\nStockChartSeriesDirective.prototype.xAxisName;\n/**\n * The DataSource field that contains the x value. \n * It is applicable for series and technical indicators\n * @type {?}\n */\nStockChartSeriesDirective.prototype.xName;\n/**\n * The name of the vertical axis associated with the series. It requires `axes` of the chart. \n * It is applicable for series and technical indicators\n * @type {?}\n */\nStockChartSeriesDirective.prototype.yAxisName;\n/**\n * The DataSource field that contains the y value.\n * @type {?}\n */\nStockChartSeriesDirective.prototype.yName;\n/** @type {?} */\nStockChartSeriesDirective.prototype.viewContainerRef;\n}\n\n/**\n * StockChartSeries Array Directive\n */\nexport class StockChartSeriesCollectionDirective extends ArrayBase<StockChartSeriesCollectionDirective> {\nconstructor() {\n        super('series');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-stockchart>e-stockchart-series-collection',\n    queries: {\n        children: new ContentChildren(StockChartSeriesDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction StockChartSeriesCollectionDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nStockChartSeriesCollectionDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStockChartSeriesCollectionDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['border', 'color', 'dashArray', 'delay', 'duration', 'enable', 'end', 'horizontalAlignment', 'isRepeat', 'isSegmented', 'opacity', 'repeatEvery', 'repeatUntil', 'rotation', 'segmentAxisName', 'segmentEnd', 'segmentStart', 'size', 'sizeType', 'start', 'startFromAxis', 'text', 'textStyle', 'verticalAlignment', 'visible', 'zIndex'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * StripLine Directive\n * ```html\n * <e-stockchart-axis>\n * <e-striplines>\n * <e-stripline></e-stripline>\n * </e-striplines>\n * </e-stock-chart-axis>\n * ```\n */\nexport class StockChartStripLineDirective extends ComplexBase<StockChartStripLineDirective> {\n/**\n * Border of the strip line.\n */\npublic border: any;\n/**\n * Color of the strip line.\n */\npublic color: any;\n/**\n * Dash Array of the strip line.\n */\npublic dashArray: any;\n/**\n * The option to delay animation of the series.\n */\npublic delay: any;\n/**\n * The duration of animation in milliseconds.\n */\npublic duration: any;\n/**\n * If set to true, series gets animated on initial loading.\n */\npublic enable: any;\n/**\n * End value of the strip line.\n */\npublic end: any;\n/**\n * Defines the position of the strip line text horizontally. They are, \n * * Start: Places the strip line text at the start. \n * * Middle: Places the strip line text in the middle. \n * * End: Places the strip line text at the end.\n */\npublic horizontalAlignment: any;\n/**\n * isRepeat value of the strip line.\n */\npublic isRepeat: any;\n/**\n * isSegmented value of the strip line\n */\npublic isSegmented: any;\n/**\n * Strip line Opacity\n */\npublic opacity: any;\n/**\n * repeatEvery value of the strip line.\n */\npublic repeatEvery: any;\n/**\n * repeatUntil value of the strip line.\n */\npublic repeatUntil: any;\n/**\n * The angle to which the strip line text gets rotated.\n */\npublic rotation: any;\n/**\n * segmentAxisName of the strip line.\n */\npublic segmentAxisName: any;\n/**\n * segmentEnd value of the strip line.\n */\npublic segmentEnd: any;\n/**\n * segmentStart value of the strip line.\n */\npublic segmentStart: any;\n/**\n * Size of the strip line, when it starts from the origin.\n */\npublic size: any;\n/**\n * Size type of the strip line\n */\npublic sizeType: any;\n/**\n * Start value of the strip line.\n */\npublic start: any;\n/**\n *  If set true, strip line get render from axis origin.\n */\npublic startFromAxis: any;\n/**\n * Strip line text.\n */\npublic text: any;\n/**\n * Options to customize the strip line text.\n */\npublic textStyle: any;\n/**\n * Defines the position of the strip line text vertically. They are, \n * * Start: Places the strip line text at the start. \n * * Middle: Places the strip line text in the middle. \n * * End: Places the strip line text at the end.\n */\npublic verticalAlignment: any;\n/**\n * If set true, strip line for axis renders.\n */\npublic visible: any;\n/**\n * Specifies the order of the strip line. They are, \n * * Behind: Places the strip line behind the series elements. \n * * Over: Places the strip line over the series elements.\n */\npublic zIndex: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-stockchart-axis>e-stockchart-striplines>e-stockchart-stripline',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction StockChartStripLineDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nStockChartStripLineDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStockChartStripLineDirective.ctorParameters;\n/**\n * Border of the strip line.\n * @type {?}\n */\nStockChartStripLineDirective.prototype.border;\n/**\n * Color of the strip line.\n * @type {?}\n */\nStockChartStripLineDirective.prototype.color;\n/**\n * Dash Array of the strip line.\n * @type {?}\n */\nStockChartStripLineDirective.prototype.dashArray;\n/**\n * The option to delay animation of the series.\n * @type {?}\n */\nStockChartStripLineDirective.prototype.delay;\n/**\n * The duration of animation in milliseconds.\n * @type {?}\n */\nStockChartStripLineDirective.prototype.duration;\n/**\n * If set to true, series gets animated on initial loading.\n * @type {?}\n */\nStockChartStripLineDirective.prototype.enable;\n/**\n * End value of the strip line.\n * @type {?}\n */\nStockChartStripLineDirective.prototype.end;\n/**\n * Defines the position of the strip line text horizontally. They are, \n * * Start: Places the strip line text at the start. \n * * Middle: Places the strip line text in the middle. \n * * End: Places the strip line text at the end.\n * @type {?}\n */\nStockChartStripLineDirective.prototype.horizontalAlignment;\n/**\n * isRepeat value of the strip line.\n * @type {?}\n */\nStockChartStripLineDirective.prototype.isRepeat;\n/**\n * isSegmented value of the strip line\n * @type {?}\n */\nStockChartStripLineDirective.prototype.isSegmented;\n/**\n * Strip line Opacity\n * @type {?}\n */\nStockChartStripLineDirective.prototype.opacity;\n/**\n * repeatEvery value of the strip line.\n * @type {?}\n */\nStockChartStripLineDirective.prototype.repeatEvery;\n/**\n * repeatUntil value of the strip line.\n * @type {?}\n */\nStockChartStripLineDirective.prototype.repeatUntil;\n/**\n * The angle to which the strip line text gets rotated.\n * @type {?}\n */\nStockChartStripLineDirective.prototype.rotation;\n/**\n * segmentAxisName of the strip line.\n * @type {?}\n */\nStockChartStripLineDirective.prototype.segmentAxisName;\n/**\n * segmentEnd value of the strip line.\n * @type {?}\n */\nStockChartStripLineDirective.prototype.segmentEnd;\n/**\n * segmentStart value of the strip line.\n * @type {?}\n */\nStockChartStripLineDirective.prototype.segmentStart;\n/**\n * Size of the strip line, when it starts from the origin.\n * @type {?}\n */\nStockChartStripLineDirective.prototype.size;\n/**\n * Size type of the strip line\n * @type {?}\n */\nStockChartStripLineDirective.prototype.sizeType;\n/**\n * Start value of the strip line.\n * @type {?}\n */\nStockChartStripLineDirective.prototype.start;\n/**\n *  If set true, strip line get render from axis origin.\n * @type {?}\n */\nStockChartStripLineDirective.prototype.startFromAxis;\n/**\n * Strip line text.\n * @type {?}\n */\nStockChartStripLineDirective.prototype.text;\n/**\n * Options to customize the strip line text.\n * @type {?}\n */\nStockChartStripLineDirective.prototype.textStyle;\n/**\n * Defines the position of the strip line text vertically. They are, \n * * Start: Places the strip line text at the start. \n * * Middle: Places the strip line text in the middle. \n * * End: Places the strip line text at the end.\n * @type {?}\n */\nStockChartStripLineDirective.prototype.verticalAlignment;\n/**\n * If set true, strip line for axis renders.\n * @type {?}\n */\nStockChartStripLineDirective.prototype.visible;\n/**\n * Specifies the order of the strip line. They are, \n * * Behind: Places the strip line behind the series elements. \n * * Over: Places the strip line over the series elements.\n * @type {?}\n */\nStockChartStripLineDirective.prototype.zIndex;\n/** @type {?} */\nStockChartStripLineDirective.prototype.viewContainerRef;\n}\n\n/**\n * StockChartStripLine Array Directive\n */\nexport class StockChartStripLinesDirective extends ArrayBase<StockChartStripLinesDirective> {\nconstructor() {\n        super('striplines');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-stockchart-axis>e-stockchart-striplines',\n    queries: {\n        children: new ContentChildren(StockChartStripLineDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction StockChartStripLinesDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nStockChartStripLinesDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStockChartStripLinesDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren, ContentChild } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\nimport { StockChartStripLinesDirective } from './striplines.directive';\n\nlet /** @type {?} */ input: string[] = ['coefficient', 'crossesAt', 'crossesInAxis', 'crosshairTooltip', 'description', 'desiredIntervals', 'edgeLabelPlacement', 'enableAutoIntervalOnZooming', 'enableTrim', 'interval', 'intervalType', 'isInversed', 'labelFormat', 'labelIntersectAction', 'labelPlacement', 'labelPosition', 'labelRotation', 'labelStyle', 'lineStyle', 'logBase', 'majorGridLines', 'majorTickLines', 'maximum', 'maximumLabelWidth', 'maximumLabels', 'minimum', 'minorGridLines', 'minorTickLines', 'minorTicksPerInterval', 'name', 'opposedPosition', 'placeNextToAxisLine', 'plotOffset', 'rangePadding', 'rowIndex', 'skeleton', 'skeletonType', 'span', 'startAngle', 'stripLines', 'tabIndex', 'tickPosition', 'title', 'titleStyle', 'valueType', 'visible', 'zoomFactor', 'zoomPosition'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Axis Directive\n * ```html\n * <e-stockchart-axes><e-stockchart-axis></e-stockchart-axis></e-stockchart-axes>\n * ```\n */\nexport class StockChartAxisDirective extends ComplexBase<StockChartAxisDirective> {\npublic childStripLines: any;\npublic tags: string[] = ['stripLines'];\n/**\n * The polar radar radius position.\n */\npublic coefficient: any;\n/**\n * Specifies the value at which the axis line has to be intersect with the vertical axis or vice versa.\n */\npublic crossesAt: any;\n/**\n * Specifies axis name with which the axis line has to be crossed\n */\npublic crossesInAxis: any;\n/**\n * Options to customize the crosshair ToolTip.\n */\npublic crosshairTooltip: any;\n/**\n * Description for axis and its element.\n */\npublic description: any;\n/**\n * With this property, you can request axis to calculate intervals approximately equal to your specified interval.\n */\npublic desiredIntervals: any;\n/**\n * Specifies the position of labels at the edge of the axis.They are, \n * * None: No action will be performed. \n * * Hide: Edge label will be hidden. \n * * Shift: Shifts the edge labels.\n */\npublic edgeLabelPlacement: any;\n/**\n * If set to true, axis interval will be calculated automatically with respect to the zoomed range.\n */\npublic enableAutoIntervalOnZooming: any;\n/**\n * Specifies the Trim property for an axis.\n */\npublic enableTrim: any;\n/**\n * Specifies the interval for an axis.\n */\npublic interval: any;\n/**\n * Specifies the types like `Years`, `Months`, `Days`, `Hours`, `Minutes`, `Seconds` in date time axis.They are, \n * * Auto: Defines the interval of the axis based on data. \n * * Years: Defines the interval of the axis in years. \n * * Months: Defines the interval of the axis in months. \n * * Days: Defines the interval of the axis in days. \n * * Hours: Defines the interval of the axis in hours. \n * * Minutes: Defines the interval of the axis in minutes.\n */\npublic intervalType: any;\n/**\n * It specifies whether the axis to be rendered in inversed manner or not.\n */\npublic isInversed: any;\n/**\n * Used to format the axis label that accepts any global string format like 'C', 'n1', 'P' etc. \n * It also accepts placeholder like '{value}°C' in which value represent the axis label, e.g, 20°C.\n */\npublic labelFormat: any;\n/**\n * Specifies the actions like `Hide`, `Rotate45`, and `Rotate90` when the axis labels intersect with each other.They are, \n * * None: Shows all the labels. \n * * Hide: Hides the label when it intersects. \n * * Rotate45: Rotates the label to 45 degree when it intersects. \n * * Rotate90: Rotates the label to 90 degree when it intersects.\n */\npublic labelIntersectAction: any;\n/**\n * Specifies the placement of a label for category axis. They are, \n * * betweenTicks: Renders the label between the ticks. \n * * onTicks: Renders the label on the ticks.\n */\npublic labelPlacement: any;\n/**\n * Specifies the placement of a labels to the axis line. They are, \n * * inside: Renders the labels inside to the axis line. \n * * outside: Renders the labels outside to the axis line.\n */\npublic labelPosition: any;\n/**\n * The angle to which the axis label gets rotated.\n */\npublic labelRotation: any;\n/**\n * Options to customize the axis label.\n */\npublic labelStyle: any;\n/**\n * Options for customizing axis lines.\n */\npublic lineStyle: any;\n/**\n * The base value for logarithmic axis. It requires `valueType` to be `Logarithmic`.\n */\npublic logBase: any;\n/**\n * Options for customizing major grid lines.\n */\npublic majorGridLines: any;\n/**\n * Options for customizing major tick lines.\n */\npublic majorTickLines: any;\n/**\n * Specifies the maximum range of an axis.\n */\npublic maximum: any;\n/**\n * Specifies the maximum width of an axis label.\n */\npublic maximumLabelWidth: any;\n/**\n * The maximum number of label count per 100 pixels with respect to the axis length.\n */\npublic maximumLabels: any;\n/**\n * Specifies the minimum range of an axis.\n */\npublic minimum: any;\n/**\n * Options for customizing minor grid lines.\n */\npublic minorGridLines: any;\n/**\n * Options for customizing minor tick lines.\n */\npublic minorTickLines: any;\n/**\n * Specifies the number of minor ticks per interval.\n */\npublic minorTicksPerInterval: any;\n/**\n * Unique identifier of an axis. \n * To associate an axis with the series, set this name to the xAxisName/yAxisName properties of the series.\n */\npublic name: any;\n/**\n * If set to true, the axis will render at the opposite side of its default position.\n */\npublic opposedPosition: any;\n/**\n * Specifies whether axis elements like axis labels, axis title, etc has to be crossed with axis line\n */\npublic placeNextToAxisLine: any;\n/**\n * Left and right padding for the plot area in pixels.\n */\npublic plotOffset: any;\n/**\n * Specifies the padding for the axis range in terms of interval.They are, \n * * none: Padding cannot be applied to the axis. \n * * normal: Padding is applied to the axis based on the range calculation. \n * * additional: Interval of the axis is added as padding to the minimum and maximum values of the range. \n * * round: Axis range is rounded to the nearest possible value divided by the interval.\n */\npublic rangePadding: any;\n/**\n * Specifies the index of the row where the axis is associated, when the chart area is divided into multiple plot areas by using `rows`. \n * \n */\npublic rowIndex: any;\n/**\n * Specifies the skeleton format in which the dateTime format will process.\n */\npublic skeleton: any;\n/**\n * It specifies the type of format to be used in dateTime format process.\n */\npublic skeletonType: any;\n/**\n * Specifies the number of `columns` or `rows` an axis has to span horizontally or vertically.\n */\npublic span: any;\n/**\n * The start angle for the series.\n */\npublic startAngle: any;\n/**\n * Specifies the stripLine collection for the axis\n */\npublic stripLines: any;\n/**\n * TabIndex value for the axis.\n */\npublic tabIndex: any;\n/**\n * Specifies the placement of a ticks to the axis line. They are, \n * * inside: Renders the ticks inside to the axis line. \n * * outside: Renders the ticks outside to the axis line.\n */\npublic tickPosition: any;\n/**\n * Specifies the title of an axis.\n */\npublic title: any;\n/**\n * Options for customizing the axis title.\n */\npublic titleStyle: any;\n/**\n * Specifies the type of data the axis is handling. \n * * Double:  Renders a numeric axis. \n * * DateTime: Renders a dateTime axis. \n * * Category: Renders a category axis. \n * * Logarithmic: Renders a log axis.\n */\npublic valueType: any;\n/**\n * If set to true, axis label will be visible.\n */\npublic visible: any;\n/**\n * The axis is scaled by this factor. When zoomFactor is 0.5, the chart is scaled by 200% along this axis. Value ranges from 0 to 1.\n */\npublic zoomFactor: any;\n/**\n * Position of the zoomed axis. Value ranges from 0 to 1.\n */\npublic zoomPosition: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-stockchart-axes>e-stockchart-axis',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n        childStripLines: new ContentChild(StockChartStripLinesDirective)\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction StockChartAxisDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nStockChartAxisDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStockChartAxisDirective.ctorParameters;\n/** @type {?} */\nStockChartAxisDirective.prototype.childStripLines;\n/** @type {?} */\nStockChartAxisDirective.prototype.tags;\n/**\n * The polar radar radius position.\n * @type {?}\n */\nStockChartAxisDirective.prototype.coefficient;\n/**\n * Specifies the value at which the axis line has to be intersect with the vertical axis or vice versa.\n * @type {?}\n */\nStockChartAxisDirective.prototype.crossesAt;\n/**\n * Specifies axis name with which the axis line has to be crossed\n * @type {?}\n */\nStockChartAxisDirective.prototype.crossesInAxis;\n/**\n * Options to customize the crosshair ToolTip.\n * @type {?}\n */\nStockChartAxisDirective.prototype.crosshairTooltip;\n/**\n * Description for axis and its element.\n * @type {?}\n */\nStockChartAxisDirective.prototype.description;\n/**\n * With this property, you can request axis to calculate intervals approximately equal to your specified interval.\n * @type {?}\n */\nStockChartAxisDirective.prototype.desiredIntervals;\n/**\n * Specifies the position of labels at the edge of the axis.They are, \n * * None: No action will be performed. \n * * Hide: Edge label will be hidden. \n * * Shift: Shifts the edge labels.\n * @type {?}\n */\nStockChartAxisDirective.prototype.edgeLabelPlacement;\n/**\n * If set to true, axis interval will be calculated automatically with respect to the zoomed range.\n * @type {?}\n */\nStockChartAxisDirective.prototype.enableAutoIntervalOnZooming;\n/**\n * Specifies the Trim property for an axis.\n * @type {?}\n */\nStockChartAxisDirective.prototype.enableTrim;\n/**\n * Specifies the interval for an axis.\n * @type {?}\n */\nStockChartAxisDirective.prototype.interval;\n/**\n * Specifies the types like `Years`, `Months`, `Days`, `Hours`, `Minutes`, `Seconds` in date time axis.They are, \n * * Auto: Defines the interval of the axis based on data. \n * * Years: Defines the interval of the axis in years. \n * * Months: Defines the interval of the axis in months. \n * * Days: Defines the interval of the axis in days. \n * * Hours: Defines the interval of the axis in hours. \n * * Minutes: Defines the interval of the axis in minutes.\n * @type {?}\n */\nStockChartAxisDirective.prototype.intervalType;\n/**\n * It specifies whether the axis to be rendered in inversed manner or not.\n * @type {?}\n */\nStockChartAxisDirective.prototype.isInversed;\n/**\n * Used to format the axis label that accepts any global string format like 'C', 'n1', 'P' etc. \n * It also accepts placeholder like '{value}°C' in which value represent the axis label, e.g, 20°C.\n * @type {?}\n */\nStockChartAxisDirective.prototype.labelFormat;\n/**\n * Specifies the actions like `Hide`, `Rotate45`, and `Rotate90` when the axis labels intersect with each other.They are, \n * * None: Shows all the labels. \n * * Hide: Hides the label when it intersects. \n * * Rotate45: Rotates the label to 45 degree when it intersects. \n * * Rotate90: Rotates the label to 90 degree when it intersects.\n * @type {?}\n */\nStockChartAxisDirective.prototype.labelIntersectAction;\n/**\n * Specifies the placement of a label for category axis. They are, \n * * betweenTicks: Renders the label between the ticks. \n * * onTicks: Renders the label on the ticks.\n * @type {?}\n */\nStockChartAxisDirective.prototype.labelPlacement;\n/**\n * Specifies the placement of a labels to the axis line. They are, \n * * inside: Renders the labels inside to the axis line. \n * * outside: Renders the labels outside to the axis line.\n * @type {?}\n */\nStockChartAxisDirective.prototype.labelPosition;\n/**\n * The angle to which the axis label gets rotated.\n * @type {?}\n */\nStockChartAxisDirective.prototype.labelRotation;\n/**\n * Options to customize the axis label.\n * @type {?}\n */\nStockChartAxisDirective.prototype.labelStyle;\n/**\n * Options for customizing axis lines.\n * @type {?}\n */\nStockChartAxisDirective.prototype.lineStyle;\n/**\n * The base value for logarithmic axis. It requires `valueType` to be `Logarithmic`.\n * @type {?}\n */\nStockChartAxisDirective.prototype.logBase;\n/**\n * Options for customizing major grid lines.\n * @type {?}\n */\nStockChartAxisDirective.prototype.majorGridLines;\n/**\n * Options for customizing major tick lines.\n * @type {?}\n */\nStockChartAxisDirective.prototype.majorTickLines;\n/**\n * Specifies the maximum range of an axis.\n * @type {?}\n */\nStockChartAxisDirective.prototype.maximum;\n/**\n * Specifies the maximum width of an axis label.\n * @type {?}\n */\nStockChartAxisDirective.prototype.maximumLabelWidth;\n/**\n * The maximum number of label count per 100 pixels with respect to the axis length.\n * @type {?}\n */\nStockChartAxisDirective.prototype.maximumLabels;\n/**\n * Specifies the minimum range of an axis.\n * @type {?}\n */\nStockChartAxisDirective.prototype.minimum;\n/**\n * Options for customizing minor grid lines.\n * @type {?}\n */\nStockChartAxisDirective.prototype.minorGridLines;\n/**\n * Options for customizing minor tick lines.\n * @type {?}\n */\nStockChartAxisDirective.prototype.minorTickLines;\n/**\n * Specifies the number of minor ticks per interval.\n * @type {?}\n */\nStockChartAxisDirective.prototype.minorTicksPerInterval;\n/**\n * Unique identifier of an axis. \n * To associate an axis with the series, set this name to the xAxisName/yAxisName properties of the series.\n * @type {?}\n */\nStockChartAxisDirective.prototype.name;\n/**\n * If set to true, the axis will render at the opposite side of its default position.\n * @type {?}\n */\nStockChartAxisDirective.prototype.opposedPosition;\n/**\n * Specifies whether axis elements like axis labels, axis title, etc has to be crossed with axis line\n * @type {?}\n */\nStockChartAxisDirective.prototype.placeNextToAxisLine;\n/**\n * Left and right padding for the plot area in pixels.\n * @type {?}\n */\nStockChartAxisDirective.prototype.plotOffset;\n/**\n * Specifies the padding for the axis range in terms of interval.They are, \n * * none: Padding cannot be applied to the axis. \n * * normal: Padding is applied to the axis based on the range calculation. \n * * additional: Interval of the axis is added as padding to the minimum and maximum values of the range. \n * * round: Axis range is rounded to the nearest possible value divided by the interval.\n * @type {?}\n */\nStockChartAxisDirective.prototype.rangePadding;\n/**\n * Specifies the index of the row where the axis is associated, when the chart area is divided into multiple plot areas by using `rows`. \n * \n * @type {?}\n */\nStockChartAxisDirective.prototype.rowIndex;\n/**\n * Specifies the skeleton format in which the dateTime format will process.\n * @type {?}\n */\nStockChartAxisDirective.prototype.skeleton;\n/**\n * It specifies the type of format to be used in dateTime format process.\n * @type {?}\n */\nStockChartAxisDirective.prototype.skeletonType;\n/**\n * Specifies the number of `columns` or `rows` an axis has to span horizontally or vertically.\n * @type {?}\n */\nStockChartAxisDirective.prototype.span;\n/**\n * The start angle for the series.\n * @type {?}\n */\nStockChartAxisDirective.prototype.startAngle;\n/**\n * Specifies the stripLine collection for the axis\n * @type {?}\n */\nStockChartAxisDirective.prototype.stripLines;\n/**\n * TabIndex value for the axis.\n * @type {?}\n */\nStockChartAxisDirective.prototype.tabIndex;\n/**\n * Specifies the placement of a ticks to the axis line. They are, \n * * inside: Renders the ticks inside to the axis line. \n * * outside: Renders the ticks outside to the axis line.\n * @type {?}\n */\nStockChartAxisDirective.prototype.tickPosition;\n/**\n * Specifies the title of an axis.\n * @type {?}\n */\nStockChartAxisDirective.prototype.title;\n/**\n * Options for customizing the axis title.\n * @type {?}\n */\nStockChartAxisDirective.prototype.titleStyle;\n/**\n * Specifies the type of data the axis is handling. \n * * Double:  Renders a numeric axis. \n * * DateTime: Renders a dateTime axis. \n * * Category: Renders a category axis. \n * * Logarithmic: Renders a log axis.\n * @type {?}\n */\nStockChartAxisDirective.prototype.valueType;\n/**\n * If set to true, axis label will be visible.\n * @type {?}\n */\nStockChartAxisDirective.prototype.visible;\n/**\n * The axis is scaled by this factor. When zoomFactor is 0.5, the chart is scaled by 200% along this axis. Value ranges from 0 to 1.\n * @type {?}\n */\nStockChartAxisDirective.prototype.zoomFactor;\n/**\n * Position of the zoomed axis. Value ranges from 0 to 1.\n * @type {?}\n */\nStockChartAxisDirective.prototype.zoomPosition;\n/** @type {?} */\nStockChartAxisDirective.prototype.viewContainerRef;\n}\n\n/**\n * StockChartAxis Array Directive\n */\nexport class StockChartAxesDirective extends ArrayBase<StockChartAxesDirective> {\nconstructor() {\n        super('axes');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-stockchart>e-stockchart-axes',\n    queries: {\n        children: new ContentChildren(StockChartAxisDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction StockChartAxesDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nStockChartAxesDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStockChartAxesDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['border', 'height'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Row Directive\n * ```html\n * <e-rows><e-row></e-row><e-rows>\n * ```\n */\nexport class StockChartRowDirective extends ComplexBase<StockChartRowDirective> {\n/**\n * Options to customize the border of the rows.\n */\npublic border: any;\n/**\n * The height of the row as a string accept input both as '100px' and '100%'. \n * If specified as '100%, row renders to the full height of its chart.\n */\npublic height: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-stockchart-rows>e-striplines>e-stockchart-row',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction StockChartRowDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nStockChartRowDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStockChartRowDirective.ctorParameters;\n/**\n * Options to customize the border of the rows.\n * @type {?}\n */\nStockChartRowDirective.prototype.border;\n/**\n * The height of the row as a string accept input both as '100px' and '100%'. \n * If specified as '100%, row renders to the full height of its chart.\n * @type {?}\n */\nStockChartRowDirective.prototype.height;\n/** @type {?} */\nStockChartRowDirective.prototype.viewContainerRef;\n}\n\n/**\n * StockChartRow Array Directive\n */\nexport class StockChartRowsDirective extends ArrayBase<StockChartRowsDirective> {\nconstructor() {\n        super('rows');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-stockchart>e-stockchart-rows',\n    queries: {\n        children: new ContentChildren(StockChartRowDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction StockChartRowsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nStockChartRowsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStockChartRowsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren, ContentChild } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\nimport { Template } from '@syncfusion/ej2-angular-base';\n\n\nlet /** @type {?} */ input: string[] = ['content', 'coordinateUnits', 'description', 'horizontalAlignment', 'region', 'verticalAlignment', 'x', 'xAxisName', 'y', 'yAxisName'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Annotation Directive\n * ```html\n * <e-stockchart-annotations><e-stockchart-annotation></e-stockchart-annotation><e-stockchart-annotations>\n * ```\n */\nexport class StockChartAnnotationDirective extends ComplexBase<StockChartAnnotationDirective> {\n/**\n * Specifies the coordinate units of the annotation. They are \n * * Pixel - Annotation renders based on x and y pixel value. \n * * Point - Annotation renders based on x and y axis value.\n */\npublic coordinateUnits: any;\n/**\n * Information about annotation for assistive technology.\n */\npublic description: any;\n/**\n * Specifies the alignment of the annotation. They are \n * * Near - Align the annotation element as left side. \n * * Far - Align the annotation element as right side. \n * * Center - Align the annotation element as mid point.\n */\npublic horizontalAlignment: any;\n/**\n * Specifies the regions of the annotation. They are \n * * Chart - Annotation renders based on chart coordinates. \n * * Series - Annotation renders based on series coordinates.\n */\npublic region: any;\n/**\n * Specifies the position of the annotation. They are \n * * Top - Align the annotation element as top side. \n * * Bottom - Align the annotation element as bottom side. \n * * Middle - Align the annotation element as mid point.\n */\npublic verticalAlignment: any;\n/**\n * if set coordinateUnit as `Pixel` X specifies the axis value \n * else is specifies pixel or percentage of coordinate\n */\npublic x: any;\n/**\n * The name of horizontal axis associated with the annotation. \n * It requires `axes` of chart.\n */\npublic xAxisName: any;\n/**\n * if set coordinateUnit as `Pixel` Y specifies the axis value \n * else is specifies pixel or percentage of coordinate\n */\npublic y: any;\n/**\n * The name of vertical axis associated with the annotation. \n * It requires `axes` of chart.\n */\npublic yAxisName: any;\n/**\n * Content of the annotation, which accepts the id of the custom element.\n */\n@Template()\n    public content: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-stockchart-annotations>e-stockchart-annotation',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'content': [{ type: ContentChild, args: ['content', ] },],\n};\n}\n\nfunction StockChartAnnotationDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nStockChartAnnotationDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStockChartAnnotationDirective.ctorParameters;\n/** @type {?} */\nStockChartAnnotationDirective.propDecorators;\n/**\n * Specifies the coordinate units of the annotation. They are \n * * Pixel - Annotation renders based on x and y pixel value. \n * * Point - Annotation renders based on x and y axis value.\n * @type {?}\n */\nStockChartAnnotationDirective.prototype.coordinateUnits;\n/**\n * Information about annotation for assistive technology.\n * @type {?}\n */\nStockChartAnnotationDirective.prototype.description;\n/**\n * Specifies the alignment of the annotation. They are \n * * Near - Align the annotation element as left side. \n * * Far - Align the annotation element as right side. \n * * Center - Align the annotation element as mid point.\n * @type {?}\n */\nStockChartAnnotationDirective.prototype.horizontalAlignment;\n/**\n * Specifies the regions of the annotation. They are \n * * Chart - Annotation renders based on chart coordinates. \n * * Series - Annotation renders based on series coordinates.\n * @type {?}\n */\nStockChartAnnotationDirective.prototype.region;\n/**\n * Specifies the position of the annotation. They are \n * * Top - Align the annotation element as top side. \n * * Bottom - Align the annotation element as bottom side. \n * * Middle - Align the annotation element as mid point.\n * @type {?}\n */\nStockChartAnnotationDirective.prototype.verticalAlignment;\n/**\n * if set coordinateUnit as `Pixel` X specifies the axis value \n * else is specifies pixel or percentage of coordinate\n * @type {?}\n */\nStockChartAnnotationDirective.prototype.x;\n/**\n * The name of horizontal axis associated with the annotation. \n * It requires `axes` of chart.\n * @type {?}\n */\nStockChartAnnotationDirective.prototype.xAxisName;\n/**\n * if set coordinateUnit as `Pixel` Y specifies the axis value \n * else is specifies pixel or percentage of coordinate\n * @type {?}\n */\nStockChartAnnotationDirective.prototype.y;\n/**\n * The name of vertical axis associated with the annotation. \n * It requires `axes` of chart.\n * @type {?}\n */\nStockChartAnnotationDirective.prototype.yAxisName;\n/**\n * Content of the annotation, which accepts the id of the custom element.\n * @type {?}\n */\nStockChartAnnotationDirective.prototype.content;\n/** @type {?} */\nStockChartAnnotationDirective.prototype.viewContainerRef;\n}\n\n/**\n * StockChartAnnotation Array Directive\n */\nexport class StockChartAnnotationsDirective extends ArrayBase<StockChartAnnotationsDirective> {\nconstructor() {\n        super('annotations');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-stockchart>e-stockchart-annotations',\n    queries: {\n        children: new ContentChildren(StockChartAnnotationDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction StockChartAnnotationsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nStockChartAnnotationsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStockChartAnnotationsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['point', 'series'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Selected Data Directive\n * ```html\n * <e-selecteddataindexes><e-selecteddataindex></e-selecteddataindex><e-selecteddataindexes>\n * ```\n */\nexport class StockChartSelectedDataIndexDirective extends ComplexBase<StockChartSelectedDataIndexDirective> {\n/**\n * Specifies index of point\n */\npublic point: any;\n/**\n * Specifies index of series\n */\npublic series: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-stockchart-selectedDataIndexes>e-stockchart-selectedDataIndex',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction StockChartSelectedDataIndexDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nStockChartSelectedDataIndexDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStockChartSelectedDataIndexDirective.ctorParameters;\n/**\n * Specifies index of point\n * @type {?}\n */\nStockChartSelectedDataIndexDirective.prototype.point;\n/**\n * Specifies index of series\n * @type {?}\n */\nStockChartSelectedDataIndexDirective.prototype.series;\n/** @type {?} */\nStockChartSelectedDataIndexDirective.prototype.viewContainerRef;\n}\n\n/**\n * StockChartSelectedDataIndex Array Directive\n */\nexport class StockChartSelectedDataIndexesDirective extends ArrayBase<StockChartSelectedDataIndexesDirective> {\nconstructor() {\n        super('selecteddataindexes');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-stockchart>e-stockchart-selectedDataIndexes',\n    queries: {\n        children: new ContentChildren(StockChartSelectedDataIndexDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction StockChartSelectedDataIndexesDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nStockChartSelectedDataIndexesDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStockChartSelectedDataIndexesDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['interval', 'intervalType', 'selected', 'text'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Indicator Directive\n * ```html\n * <e-stockchart-periods>\n * <e-stockchart-period></e-stockchart-period>\n * </e-stockchart-periods>\n * ```\n */\nexport class StockChartPeriodDirective extends ComplexBase<StockChartPeriodDirective> {\n/**\n * Count value for the button\n */\npublic interval: any;\n/**\n * IntervalType of button\n */\npublic intervalType: any;\n/**\n * To select the default period\n */\npublic selected: any;\n/**\n * Text to be displayed on the button\n */\npublic text: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-stockchart-indicators>e-stockchart-period',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction StockChartPeriodDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nStockChartPeriodDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStockChartPeriodDirective.ctorParameters;\n/**\n * Count value for the button\n * @type {?}\n */\nStockChartPeriodDirective.prototype.interval;\n/**\n * IntervalType of button\n * @type {?}\n */\nStockChartPeriodDirective.prototype.intervalType;\n/**\n * To select the default period\n * @type {?}\n */\nStockChartPeriodDirective.prototype.selected;\n/**\n * Text to be displayed on the button\n * @type {?}\n */\nStockChartPeriodDirective.prototype.text;\n/** @type {?} */\nStockChartPeriodDirective.prototype.viewContainerRef;\n}\n\n/**\n * StockChartPeriod Array Directive\n */\nexport class StockChartPeriodsDirective extends ArrayBase<StockChartPeriodsDirective> {\nconstructor() {\n        super('periods');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-stockchart>e-stockchart-periods',\n    queries: {\n        children: new ContentChildren(StockChartPeriodDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction StockChartPeriodsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nStockChartPeriodsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStockChartPeriodsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['background', 'border', 'date', 'description', 'placeAt', 'showOnSeries', 'text', 'textStyle', 'type'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * StockEvents\n * ```html\n * <e-stockchart-stockevents>\n * <e-stockchart-stockevent></e-stockchart-stockevent>\n * </e-stockchart-stockevents>\n * ```\n */\nexport class StockEventDirective extends ComplexBase<StockEventDirective> {\n/**\n * Specifies type of stock events \n * * Circle \n * * Square \n * * Flag \n * * Text \n * * Sign \n * * Triangle \n * * InvertedTriangle \n * * ArrowUp \n * * ArrowDown \n * * ArrowLeft \n * * ArrowRight\n */\npublic type: any;\n/**\n * The background of the stock event that accepts value in hex and rgba as a valid CSS color string.\n */\npublic background: any;\n/**\n * Options to customize the border of the stock events.\n */\npublic border: any;\n/**\n * Date value of stock event in which stock event shows.\n */\npublic date: any;\n/**\n * Specifies the description for the chart which renders in tooltip for stock event.\n */\npublic description: any;\n/**\n * Corresponding values in which stock event placed. \n * * Close \n * * Open \n * * High \n * * Close\n */\npublic placeAt: any;\n/**\n * Enables the stock events to be render on series. If it disabled, stock event rendered on primaryXAxis.\n */\npublic showOnSeries: any;\n/**\n * Specifies the text for the stock chart text.\n */\npublic text: any;\n/**\n * Options to customize the styles for stock events text.\n */\npublic textStyle: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-stockchart-indicators>e-stockchart-stockevent',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction StockEventDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nStockEventDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStockEventDirective.ctorParameters;\n/**\n * Specifies type of stock events \n * * Circle \n * * Square \n * * Flag \n * * Text \n * * Sign \n * * Triangle \n * * InvertedTriangle \n * * ArrowUp \n * * ArrowDown \n * * ArrowLeft \n * * ArrowRight\n * @type {?}\n */\nStockEventDirective.prototype.type;\n/**\n * The background of the stock event that accepts value in hex and rgba as a valid CSS color string.\n * @type {?}\n */\nStockEventDirective.prototype.background;\n/**\n * Options to customize the border of the stock events.\n * @type {?}\n */\nStockEventDirective.prototype.border;\n/**\n * Date value of stock event in which stock event shows.\n * @type {?}\n */\nStockEventDirective.prototype.date;\n/**\n * Specifies the description for the chart which renders in tooltip for stock event.\n * @type {?}\n */\nStockEventDirective.prototype.description;\n/**\n * Corresponding values in which stock event placed. \n * * Close \n * * Open \n * * High \n * * Close\n * @type {?}\n */\nStockEventDirective.prototype.placeAt;\n/**\n * Enables the stock events to be render on series. If it disabled, stock event rendered on primaryXAxis.\n * @type {?}\n */\nStockEventDirective.prototype.showOnSeries;\n/**\n * Specifies the text for the stock chart text.\n * @type {?}\n */\nStockEventDirective.prototype.text;\n/**\n * Options to customize the styles for stock events text.\n * @type {?}\n */\nStockEventDirective.prototype.textStyle;\n/** @type {?} */\nStockEventDirective.prototype.viewContainerRef;\n}\n\n/**\n * StockEvent Array Directive\n */\nexport class StockEventsDirective extends ArrayBase<StockEventsDirective> {\nconstructor() {\n        super('stockevents');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-stockchart>e-stockchart-stockevents',\n    queries: {\n        children: new ContentChildren(StockEventDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction StockEventsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nStockEventsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStockEventsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['animation', 'bandColor', 'close', 'dPeriod', 'dashArray', 'dataSource', 'fastPeriod', 'field', 'fill', 'high', 'kPeriod', 'low', 'lowerLine', 'macdLine', 'macdNegativeColor', 'macdPositiveColor', 'macdType', 'open', 'overBought', 'overSold', 'period', 'periodLine', 'pointColorMapping', 'query', 'seriesName', 'showZones', 'slowPeriod', 'standardDeviation', 'type', 'upperLine', 'volume', 'width', 'xAxisName', 'xName', 'yAxisName'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Indicator Directive\n * ```html\n * <e-stockchart-indicators>\n * <e-stockchart-indicator></e-stockchart-indicator>\n * </e-stockchart-indicators>\n * ```\n */\nexport class StockChartIndicatorDirective extends ComplexBase<StockChartIndicatorDirective> {\n/**\n * Defines the type of the technical indicator\n */\npublic type: any;\n/**\n * Options to customizing animation for the series.\n */\npublic animation: any;\n/**\n * Options for customizing the BollingerBand in the indicator.\n */\npublic bandColor: any;\n/**\n * The DataSource field that contains the close value of y \n * It is applicable for series and technical indicators\n */\npublic close: any;\n/**\n * Defines the period, the price changes over which will define the %D value in stochastic indicators\n */\npublic dPeriod: any;\n/**\n * Defines the pattern of dashes and gaps to stroke the lines in `Line` type series.\n */\npublic dashArray: any;\n/**\n * Specifies the DataSource for the series. It can be an array of JSON objects or an instance of DataManager. \n * \n */\npublic dataSource: any;\n/**\n * Sets the fast period to define the Macd line\n */\npublic fastPeriod: any;\n/**\n * Defines the field to compare the current value with previous values\n */\npublic field: any;\n/**\n * The fill color for the series that accepts value in hex and rgba as a valid CSS color string. \n * It also represents the color of the signal lines in technical indicators. \n * For technical indicators, the default value is 'blue' and for series, it has null.\n */\npublic fill: any;\n/**\n * The DataSource field that contains the high value of y \n * It is applicable for series and technical indicators\n */\npublic high: any;\n/**\n * Defines the look back period, the price changes over which will define the %K value in stochastic indicators\n */\npublic kPeriod: any;\n/**\n * The DataSource field that contains the low value of y \n * It is applicable for series and technical indicators\n */\npublic low: any;\n/**\n * Defines the appearance of lower line in technical indicators\n */\npublic lowerLine: any;\n/**\n * Defines the appearance of the the MacdLine of Macd indicator\n */\npublic macdLine: any;\n/**\n * Defines the color of the negative bars in Macd indicators\n */\npublic macdNegativeColor: any;\n/**\n * Defines the color of the positive bars in Macd indicators\n */\npublic macdPositiveColor: any;\n/**\n * Defines the type of the Macd indicator.\n */\npublic macdType: any;\n/**\n * The DataSource field that contains the open value of y \n * It is applicable for series and technical indicators\n */\npublic open: any;\n/**\n * Defines the over-bought(threshold) values. It is applicable for RSI and stochastic indicators\n */\npublic overBought: any;\n/**\n * Defines the over-sold(threshold) values. It is applicable for RSI and stochastic indicators\n */\npublic overSold: any;\n/**\n * Defines the period, the price changes over which will be considered to predict the trend\n */\npublic period: any;\n/**\n * Defines the appearance of period line in technical indicators\n */\npublic periodLine: any;\n/**\n * The DataSource field that contains the color value of point \n * It is applicable for series\n */\npublic pointColorMapping: any;\n/**\n * Specifies query to select data from DataSource. This property is applicable only when the DataSource is `ej.DataManager`.\n */\npublic query: any;\n/**\n * Defines the name of the series, the data of which has to be depicted as indicator\n */\npublic seriesName: any;\n/**\n * Enables/Disables the over-bought and over-sold regions\n */\npublic showZones: any;\n/**\n * Sets the slow period to define the Macd line\n */\npublic slowPeriod: any;\n/**\n * Sets the standard deviation values that helps to define the upper and lower bollinger bands\n */\npublic standardDeviation: any;\n/**\n * Defines the appearance of the upper line in technical indicators\n */\npublic upperLine: any;\n/**\n * Defines the data source field that contains the volume value in candle charts \n * It is applicable for financial series and technical indicators\n */\npublic volume: any;\n/**\n * The stroke width for the series that is applicable only for `Line` type series. \n * It also represents the stroke width of the signal lines in technical indicators.\n */\npublic width: any;\n/**\n * The name of the horizontal axis associated with the series. It requires `axes` of the chart. \n * It is applicable for series and technical indicators \n * \n */\npublic xAxisName: any;\n/**\n * The DataSource field that contains the x value. \n * It is applicable for series and technical indicators\n */\npublic xName: any;\n/**\n * The name of the vertical axis associated with the series. It requires `axes` of the chart. \n * It is applicable for series and technical indicators \n * \n */\npublic yAxisName: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-stockchart-indicators>e-stockchart-indicator',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction StockChartIndicatorDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nStockChartIndicatorDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStockChartIndicatorDirective.ctorParameters;\n/**\n * Defines the type of the technical indicator\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.type;\n/**\n * Options to customizing animation for the series.\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.animation;\n/**\n * Options for customizing the BollingerBand in the indicator.\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.bandColor;\n/**\n * The DataSource field that contains the close value of y \n * It is applicable for series and technical indicators\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.close;\n/**\n * Defines the period, the price changes over which will define the %D value in stochastic indicators\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.dPeriod;\n/**\n * Defines the pattern of dashes and gaps to stroke the lines in `Line` type series.\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.dashArray;\n/**\n * Specifies the DataSource for the series. It can be an array of JSON objects or an instance of DataManager. \n * \n * @type {?}\n */\nStockChartIndicatorDirective.prototype.dataSource;\n/**\n * Sets the fast period to define the Macd line\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.fastPeriod;\n/**\n * Defines the field to compare the current value with previous values\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.field;\n/**\n * The fill color for the series that accepts value in hex and rgba as a valid CSS color string. \n * It also represents the color of the signal lines in technical indicators. \n * For technical indicators, the default value is 'blue' and for series, it has null.\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.fill;\n/**\n * The DataSource field that contains the high value of y \n * It is applicable for series and technical indicators\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.high;\n/**\n * Defines the look back period, the price changes over which will define the %K value in stochastic indicators\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.kPeriod;\n/**\n * The DataSource field that contains the low value of y \n * It is applicable for series and technical indicators\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.low;\n/**\n * Defines the appearance of lower line in technical indicators\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.lowerLine;\n/**\n * Defines the appearance of the the MacdLine of Macd indicator\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.macdLine;\n/**\n * Defines the color of the negative bars in Macd indicators\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.macdNegativeColor;\n/**\n * Defines the color of the positive bars in Macd indicators\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.macdPositiveColor;\n/**\n * Defines the type of the Macd indicator.\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.macdType;\n/**\n * The DataSource field that contains the open value of y \n * It is applicable for series and technical indicators\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.open;\n/**\n * Defines the over-bought(threshold) values. It is applicable for RSI and stochastic indicators\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.overBought;\n/**\n * Defines the over-sold(threshold) values. It is applicable for RSI and stochastic indicators\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.overSold;\n/**\n * Defines the period, the price changes over which will be considered to predict the trend\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.period;\n/**\n * Defines the appearance of period line in technical indicators\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.periodLine;\n/**\n * The DataSource field that contains the color value of point \n * It is applicable for series\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.pointColorMapping;\n/**\n * Specifies query to select data from DataSource. This property is applicable only when the DataSource is `ej.DataManager`.\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.query;\n/**\n * Defines the name of the series, the data of which has to be depicted as indicator\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.seriesName;\n/**\n * Enables/Disables the over-bought and over-sold regions\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.showZones;\n/**\n * Sets the slow period to define the Macd line\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.slowPeriod;\n/**\n * Sets the standard deviation values that helps to define the upper and lower bollinger bands\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.standardDeviation;\n/**\n * Defines the appearance of the upper line in technical indicators\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.upperLine;\n/**\n * Defines the data source field that contains the volume value in candle charts \n * It is applicable for financial series and technical indicators\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.volume;\n/**\n * The stroke width for the series that is applicable only for `Line` type series. \n * It also represents the stroke width of the signal lines in technical indicators.\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.width;\n/**\n * The name of the horizontal axis associated with the series. It requires `axes` of the chart. \n * It is applicable for series and technical indicators \n * \n * @type {?}\n */\nStockChartIndicatorDirective.prototype.xAxisName;\n/**\n * The DataSource field that contains the x value. \n * It is applicable for series and technical indicators\n * @type {?}\n */\nStockChartIndicatorDirective.prototype.xName;\n/**\n * The name of the vertical axis associated with the series. It requires `axes` of the chart. \n * It is applicable for series and technical indicators \n * \n * @type {?}\n */\nStockChartIndicatorDirective.prototype.yAxisName;\n/** @type {?} */\nStockChartIndicatorDirective.prototype.viewContainerRef;\n}\n\n/**\n * StockChartIndicator Array Directive\n */\nexport class StockChartIndicatorsDirective extends ArrayBase<StockChartIndicatorsDirective> {\nconstructor() {\n        super('indicators');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-stockchart>e-stockchart-indicators',\n    queries: {\n        children: new ContentChildren(StockChartIndicatorDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction StockChartIndicatorsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nStockChartIndicatorsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStockChartIndicatorsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ElementRef, ViewContainerRef, ChangeDetectionStrategy, Renderer2, Injector, ValueProvider, ContentChild } from '@angular/core';\nimport { ComponentBase, IComponentBase, applyMixins, ComponentMixins, PropertyCollectionInfo, setValue } from '@syncfusion/ej2-angular-base';\nimport { StockChart } from '@syncfusion/ej2-charts';\nimport { Template } from '@syncfusion/ej2-angular-base';\nimport { StockChartSeriesCollectionDirective } from './series.directive';\nimport { StockChartAxesDirective } from './axes.directive';\nimport { StockChartRowsDirective } from './rows.directive';\nimport { StockChartAnnotationsDirective } from './annotations.directive';\nimport { StockChartSelectedDataIndexesDirective } from './selecteddataindexes.directive';\nimport { StockChartPeriodsDirective } from './periods.directive';\nimport { StockEventsDirective } from './stockevents.directive';\nimport { StockChartIndicatorsDirective } from './indicators.directive';\n\nexport const /** @type {?} */ inputs: string[] = ['annotations','axes','background','border','chartArea','crosshair','dataSource','enableCustomRange','enablePeriodSelector','enablePersistence','enableRtl','enableSelector','exportType','height','indicatorType','indicators','isMultiSelect','isSelect','isTransposed','locale','margin','periods','primaryXAxis','primaryYAxis','rows','selectedDataIndexes','selectionMode','series','seriesType','stockEvents','theme','title','titleStyle','tooltip','trendlineType','width','zoomSettings'];\nexport const /** @type {?} */ outputs: string[] = ['axisLabelRender','load','loaded','pointClick','pointMove','rangeChange','selectorRender','seriesRender','stockChartMouseClick','stockChartMouseDown','stockChartMouseLeave','stockChartMouseMove','stockChartMouseUp','stockEventRender','tooltipRender','dataSourceChange'];\nexport const /** @type {?} */ twoWays: string[] = ['dataSource'];\n/**\n * Stock Chart Component\n * ```html\n * <ejs-stockchart></ejs-stockchart>\n * ```\n */\n@ComponentMixins([ComponentBase])\nexport class StockChartComponent extends StockChart implements IComponentBase {\npublic childSeries: any;\npublic childAxes: any;\npublic childRows: any;\npublic childAnnotations: any;\npublic childSelectedDataIndexes: any;\npublic childPeriods: any;\npublic childStockEvents: any;\npublic childIndicators: any;\npublic tags: string[] = ['series', 'axes', 'rows', 'annotations', 'selectedDataIndexes', 'periods', 'stockEvents', 'indicators'];\npublic dataSourceChange: any;\n    \n    @Template()\npublic tooltip_template: any;\n/**\n * @param {?} ngEle\n * @param {?} srenderer\n * @param {?} viewContainerRef\n * @param {?} injector\n */\nconstructor(private ngEle: ElementRef,\nprivate srenderer: Renderer2,\nprivate viewContainerRef:ViewContainerRef,\nprivate injector: Injector) {\n        super();\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n        try {\n                let mod = this.injector.get('ChartsLineSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsColumnSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsSplineSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsSplineAreaSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsStripLine');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsAreaSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsTooltip');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsCrosshair');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsDateTime');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsZoom');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsDataLabel');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsSelection');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsChartAnnotation');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsHiloSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsHiloOpenCloseSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsCandleSeries');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsSmaIndicator');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsTmaIndicator');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsEmaIndicator');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsAccumulationDistributionIndicator');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsMacdIndicator');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsAtrIndicator');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsRsiIndicator');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsMomentumIndicator');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsStochasticIndicator');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsBollingerBands');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsTrendlines');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsRangeTooltip');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('ChartsExport');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n\n        this.registerEvents(outputs);\n        this.addTwoWay.call(this, twoWays);\n        setValue('currentInstance', this, this.viewContainerRef);\n    }\n/**\n * @return {?}\n */\npublic ngOnInit() {\n    }\n/**\n * @return {?}\n */\npublic ngAfterViewInit(): void {\n    }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\n    }\n/**\n * @return {?}\n */\npublic ngAfterContentChecked(): void {\n    }\npublic registerEvents: (eventList: string[]) => void;\npublic addTwoWay: (propList: string[]) => void;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'ejs-stockchart',\n    inputs: inputs,\n    outputs: outputs,\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    queries: {\n        childSeries: new ContentChild(StockChartSeriesCollectionDirective), \n        childAxes: new ContentChild(StockChartAxesDirective), \n        childRows: new ContentChild(StockChartRowsDirective), \n        childAnnotations: new ContentChild(StockChartAnnotationsDirective), \n        childSelectedDataIndexes: new ContentChild(StockChartSelectedDataIndexesDirective), \n        childPeriods: new ContentChild(StockChartPeriodsDirective), \n        childStockEvents: new ContentChild(StockEventsDirective), \n        childIndicators: new ContentChild(StockChartIndicatorsDirective)\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ViewContainerRef, },\n{type: Injector, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'tooltip_template': [{ type: ContentChild, args: ['tooltipTemplate', ] },],\n};\n}\n\nfunction StockChartComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nStockChartComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStockChartComponent.ctorParameters;\n/** @type {?} */\nStockChartComponent.propDecorators;\n/** @type {?} */\nStockChartComponent.prototype.childSeries;\n/** @type {?} */\nStockChartComponent.prototype.childAxes;\n/** @type {?} */\nStockChartComponent.prototype.childRows;\n/** @type {?} */\nStockChartComponent.prototype.childAnnotations;\n/** @type {?} */\nStockChartComponent.prototype.childSelectedDataIndexes;\n/** @type {?} */\nStockChartComponent.prototype.childPeriods;\n/** @type {?} */\nStockChartComponent.prototype.childStockEvents;\n/** @type {?} */\nStockChartComponent.prototype.childIndicators;\n/** @type {?} */\nStockChartComponent.prototype.tags;\n/** @type {?} */\nStockChartComponent.prototype.dataSourceChange;\n/** @type {?} */\nStockChartComponent.prototype.tooltip_template;\n/** @type {?} */\nStockChartComponent.prototype.registerEvents;\n/** @type {?} */\nStockChartComponent.prototype.addTwoWay;\n/** @type {?} */\nStockChartComponent.prototype.ngEle;\n/** @type {?} */\nStockChartComponent.prototype.srenderer;\n/** @type {?} */\nStockChartComponent.prototype.viewContainerRef;\n/** @type {?} */\nStockChartComponent.prototype.injector;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StockChartTrendlineDirective, StockChartTrendlinesDirective } from './trendlines.directive';\nimport { StockChartSeriesDirective, StockChartSeriesCollectionDirective } from './series.directive';\nimport { StockChartStripLineDirective, StockChartStripLinesDirective } from './striplines.directive';\nimport { StockChartAxisDirective, StockChartAxesDirective } from './axes.directive';\nimport { StockChartRowDirective, StockChartRowsDirective } from './rows.directive';\nimport { StockChartAnnotationDirective, StockChartAnnotationsDirective } from './annotations.directive';\nimport { StockChartSelectedDataIndexDirective, StockChartSelectedDataIndexesDirective } from './selecteddataindexes.directive';\nimport { StockChartPeriodDirective, StockChartPeriodsDirective } from './periods.directive';\nimport { StockEventDirective, StockEventsDirective } from './stockevents.directive';\nimport { StockChartIndicatorDirective, StockChartIndicatorsDirective } from './indicators.directive';\nimport { StockChartComponent } from './stockchart.component';\n/**\n * NgModule definition for the StockChart component.\n */\nexport class StockChartModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule],\n    declarations: [\n        StockChartComponent,\n        StockChartTrendlineDirective,\n        StockChartTrendlinesDirective,\n        StockChartSeriesDirective,\n        StockChartSeriesCollectionDirective,\n        StockChartStripLineDirective,\n        StockChartStripLinesDirective,\n        StockChartAxisDirective,\n        StockChartAxesDirective,\n        StockChartRowDirective,\n        StockChartRowsDirective,\n        StockChartAnnotationDirective,\n        StockChartAnnotationsDirective,\n        StockChartSelectedDataIndexDirective,\n        StockChartSelectedDataIndexesDirective,\n        StockChartPeriodDirective,\n        StockChartPeriodsDirective,\n        StockEventDirective,\n        StockEventsDirective,\n        StockChartIndicatorDirective,\n        StockChartIndicatorsDirective\n    ],\n    exports: [\n        StockChartComponent,\n        StockChartTrendlineDirective,\n        StockChartTrendlinesDirective,\n        StockChartSeriesDirective,\n        StockChartSeriesCollectionDirective,\n        StockChartStripLineDirective,\n        StockChartStripLinesDirective,\n        StockChartAxisDirective,\n        StockChartAxesDirective,\n        StockChartRowDirective,\n        StockChartRowsDirective,\n        StockChartAnnotationDirective,\n        StockChartAnnotationsDirective,\n        StockChartSelectedDataIndexDirective,\n        StockChartSelectedDataIndexesDirective,\n        StockChartPeriodDirective,\n        StockChartPeriodsDirective,\n        StockEventDirective,\n        StockEventsDirective,\n        StockChartIndicatorDirective,\n        StockChartIndicatorsDirective\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction StockChartModule_tsickle_Closure_declarations() {\n/** @type {?} */\nStockChartModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStockChartModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ValueProvider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StockChartTrendlineDirective, StockChartTrendlinesDirective } from './trendlines.directive';\nimport { StockChartSeriesDirective, StockChartSeriesCollectionDirective } from './series.directive';\nimport { StockChartStripLineDirective, StockChartStripLinesDirective } from './striplines.directive';\nimport { StockChartAxisDirective, StockChartAxesDirective } from './axes.directive';\nimport { StockChartRowDirective, StockChartRowsDirective } from './rows.directive';\nimport { StockChartAnnotationDirective, StockChartAnnotationsDirective } from './annotations.directive';\nimport { StockChartSelectedDataIndexDirective, StockChartSelectedDataIndexesDirective } from './selecteddataindexes.directive';\nimport { StockChartPeriodDirective, StockChartPeriodsDirective } from './periods.directive';\nimport { StockEventDirective, StockEventsDirective } from './stockevents.directive';\nimport { StockChartIndicatorDirective, StockChartIndicatorsDirective } from './indicators.directive';\nimport { StockChartComponent } from './stockchart.component';\nimport { StockChartModule } from './stockchart.module';\n/**\n * NgModule definition for the StockChart component with providers.\n */\nexport class StockChartAllModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule, StockChartModule],\n    exports: [\n        StockChartModule\n    ],\n    providers:[\n        \n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction StockChartAllModule_tsickle_Closure_declarations() {\n/** @type {?} */\nStockChartAllModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStockChartAllModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["outputs","TrendlineDirective","_super","viewContainerRef","_this","call","this","setValue","registerEvents","__extends","ComplexBase","decorators","type","Directive","args","selector","inputs","queries","ctorParameters","ViewContainerRef","TrendlinesDirective","ArrayBase","children","ContentChildren","SegmentDirective","SegmentsDirective","SeriesDirective","tags","childTrendlines","ContentChild","childSegments","propDecorators","dataLabel_template","__decorate","Template","prototype","SeriesCollectionDirective","StripLineDirective","StripLinesDirective","CategoryDirective","CategoriesDirective","MultiLevelLabelDirective","childCategories","MultiLevelLabelsDirective","AxisDirective","childStripLines","childMultiLevelLabels","AxesDirective","RowDirective","RowsDirective","ColumnDirective","ColumnsDirective","AnnotationDirective","content","AnnotationsDirective","SelectedDataIndexDirective","SelectedDataIndexesDirective","IndicatorDirective","IndicatorsDirective","twoWays","exports","ChartComponent","ngEle","srenderer","injector","element","nativeElement","injectedModules","mod","get","indexOf","push","_a","_b","_c","_d","_e","_f","_g","_h","_j","_k","_l","_m","_o","_p","_q","_r","_s","_t","_u","_v","_w","_x","_y","_z","_0","_1","_2","_3","_4","_5","_6","_7","_8","_9","_10","_11","_12","_13","_14","_15","_16","_17","_18","_19","_20","_21","_22","_23","_24","_25","_26","_27","_28","_29","_30","addTwoWay","ngOnInit","ngAfterViewInit","ngOnDestroy","ngAfterContentChecked","Chart","Component","template","changeDetection","ChangeDetectionStrategy","OnPush","childSeries","childAxes","childRows","childColumns","childAnnotations","childSelectedDataIndexes","childIndicators","ElementRef","Renderer2","Injector","tooltip_template","ComponentMixins","ComponentBase","__metadata","ChartModule","NgModule","imports","CommonModule","declarations","LineSeriesService","provide","useValue","LineSeries","ScatterSeriesService","ScatterSeries","ColumnSeriesService","ColumnSeries","SplineSeriesService","SplineSeries","SplineAreaSeriesService","SplineAreaSeries","StripLineService","StripLine","AreaSeriesService","AreaSeries","ScrollBarService","ScrollBar","StepLineSeriesService","StepLineSeries","StepAreaSeriesService","StepAreaSeries","StackingColumnSeriesService","StackingColumnSeries","StackingLineSeriesService","StackingLineSeries","StackingAreaSeriesService","StackingAreaSeries","BarSeriesService","BarSeries","StackingBarSeriesService","StackingBarSeries","RangeColumnSeriesService","RangeColumnSeries","BubbleSeriesService","BubbleSeries","TooltipService","Tooltip","CrosshairService","Crosshair","CategoryService","Category","DateTimeService","DateTime","LogarithmicService","Logarithmic","LegendService","Legend","ZoomService","Zoom","DataLabelService","DataLabel","SelectionService","Selection","ChartAnnotationService","ChartAnnotation","HiloSeriesService","HiloSeries","HiloOpenCloseSeriesService","HiloOpenCloseSeries","WaterfallSeriesService","WaterfallSeries","RangeAreaSeriesService","RangeAreaSeries","CandleSeriesService","CandleSeries","PolarSeriesService","PolarSeries","RadarSeriesService","RadarSeries","SmaIndicatorService","SmaIndicator","TmaIndicatorService","TmaIndicator","EmaIndicatorService","EmaIndicator","AccumulationDistributionIndicatorService","AccumulationDistributionIndicator","MacdIndicatorService","MacdIndicator","AtrIndicatorService","AtrIndicator","RsiIndicatorService","RsiIndicator","MomentumIndicatorService","MomentumIndicator","StochasticIndicatorService","StochasticIndicator","BollingerBandsService","BollingerBands","BoxAndWhiskerSeriesService","BoxAndWhiskerSeries","HistogramSeriesService","HistogramSeries","ErrorBarService","ErrorBar","TrendlinesService","Trendlines","DateTimeCategoryService","DateTimeCategory","MultiColoredLineSeriesService","MultiColoredLineSeries","MultiColoredAreaSeriesService","MultiColoredAreaSeries","MultiLevelLabelService","MultiLevelLabel","ParetoSeriesService","ParetoSeries","ExportService","Export","DataEditingService","DataEditing","ChartAllModule","providers","AccumulationSeriesDirective","AccumulationSeriesCollectionDirective","AccumulationAnnotationDirective","AccumulationAnnotationsDirective","AccumulationChartComponent","AccumulationChart","AccumulationChartModule","PieSeriesService","PieSeries","FunnelSeriesService","FunnelSeries","PyramidSeriesService","PyramidSeries","AccumulationTooltipService","AccumulationTooltip","AccumulationLegendService","AccumulationLegend","AccumulationSelectionService","AccumulationSelection","AccumulationDataLabelService","AccumulationDataLabel","AccumulationAnnotationService","AccumulationAnnotation","AccumulationChartAllModule","RangenavigatorSeriesDirective","RangenavigatorSeriesCollectionDirective","RangeNavigatorComponent","RangeNavigator","RangeNavigatorModule","RangeTooltipService","RangeTooltip","PeriodSelectorService","PeriodSelector","RangeNavigatorAllModule","RangeBandSettingDirective","RangeBandSettingsDirective","SparklineComponent","Sparkline","childRangeBandSettings","SparklineModule","SparklineTooltipService","SparklineTooltip","SparklineAllModule","SmithchartSeriesDirective","SmithchartSeriesCollectionDirective","SmithchartComponent","Smithchart","SmithchartModule","SmithchartLegendService","SmithchartLegend","TooltipRenderService","TooltipRender","SmithchartAllModule","StockChartTrendlineDirective","StockChartTrendlinesDirective","StockChartSeriesDirective","StockChartSeriesCollectionDirective","StockChartStripLineDirective","StockChartStripLinesDirective","StockChartAxisDirective","StockChartAxesDirective","StockChartRowDirective","StockChartRowsDirective","StockChartAnnotationDirective","StockChartAnnotationsDirective","StockChartSelectedDataIndexDirective","StockChartSelectedDataIndexesDirective","StockChartPeriodDirective","StockChartPeriodsDirective","StockEventDirective","StockEventsDirective","StockChartIndicatorDirective","StockChartIndicatorsDirective","StockChartComponent","StockChart","childPeriods","childStockEvents","StockChartModule","StockChartAllModule"],"mappings":"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"}
